
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004484  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  080049cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009a60  200001e0  08004bac  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20009c40  08004bac  00029c40  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017c95  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000033d5  00000000  00000000  00037ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008ab1  00000000  00000000  0003b27a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c20  00000000  00000000  00043d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f90  00000000  00000000  00044950  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007352  00000000  00000000  000458e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004713  00000000  00000000  0004cc32  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00051345  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a90  00000000  00000000  000513c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045fc 	.word	0x080045fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080045fc 	.word	0x080045fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__aeabi_d2iz>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d215      	bcs.n	8000a3a <__aeabi_d2iz+0x36>
 8000a0e:	d511      	bpl.n	8000a34 <__aeabi_d2iz+0x30>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d912      	bls.n	8000a40 <__aeabi_d2iz+0x3c>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2e:	bf18      	it	ne
 8000a30:	4240      	negne	r0, r0
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d105      	bne.n	8000a4c <__aeabi_d2iz+0x48>
 8000a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	bf08      	it	eq
 8000a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_InitTick+0x40>)
{
 8000af8:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	b908      	cbnz	r0, 8000b02 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000afe:	2001      	movs	r0, #1
 8000b00:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b02:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <HAL_InitTick+0x44>)
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b0c:	6810      	ldr	r0, [r2, #0]
 8000b0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b12:	f000 f89f 	bl	8000c54 <HAL_SYSTICK_Config>
 8000b16:	4604      	mov	r4, r0
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d1f0      	bne.n	8000afe <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	2d0f      	cmp	r5, #15
 8000b1e:	d8ee      	bhi.n	8000afe <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	4602      	mov	r2, r0
 8000b22:	4629      	mov	r1, r5
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f852 	bl	8000bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_InitTick+0x48>)
 8000b2e:	4620      	mov	r0, r4
 8000b30:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000b32:	bd38      	pop	{r3, r4, r5, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000178 	.word	0x20000178
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_Init>:
{
 8000b40:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b42:	2003      	movs	r0, #3
 8000b44:	f000 f832 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff ffd3 	bl	8000af4 <HAL_InitTick>
 8000b4e:	4604      	mov	r4, r0
 8000b50:	b918      	cbnz	r0, 8000b5a <HAL_Init+0x1a>
    HAL_MspInit();
 8000b52:	f002 fcab 	bl	80034ac <HAL_MspInit>
}
 8000b56:	4620      	mov	r0, r4
 8000b58:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000b5a:	2401      	movs	r4, #1
 8000b5c:	e7fb      	b.n	8000b56 <HAL_Init+0x16>
	...

08000b60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <HAL_IncTick+0x10>)
 8000b62:	4904      	ldr	r1, [pc, #16]	; (8000b74 <HAL_IncTick+0x14>)
 8000b64:	6813      	ldr	r3, [r2, #0]
 8000b66:	6809      	ldr	r1, [r1, #0]
 8000b68:	440b      	add	r3, r1
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000218 	.word	0x20000218
 8000b74:	20000000 	.word	0x20000000

08000b78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b78:	4b01      	ldr	r3, [pc, #4]	; (8000b80 <HAL_GetTick+0x8>)
 8000b7a:	6818      	ldr	r0, [r3, #0]
}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000218 	.word	0x20000218

08000b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b84:	b538      	push	{r3, r4, r5, lr}
 8000b86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff fff6 	bl	8000b78 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	bf1c      	itt	ne
 8000b90:	4b05      	ldrne	r3, [pc, #20]	; (8000ba8 <HAL_Delay+0x24>)
 8000b92:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000b96:	bf18      	it	ne
 8000b98:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9a:	f7ff ffed 	bl	8000b78 <HAL_GetTick>
 8000b9e:	1b40      	subs	r0, r0, r5
 8000ba0:	4284      	cmp	r4, r0
 8000ba2:	d8fa      	bhi.n	8000b9a <HAL_Delay+0x16>
  {
  }
}
 8000ba4:	bd38      	pop	{r3, r4, r5, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000000 	.word	0x20000000

08000bac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bb4:	041b      	lsls	r3, r3, #16
 8000bb6:	0c1b      	lsrs	r3, r3, #16
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	0200      	lsls	r0, r0, #8
 8000bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000bc6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bc8:	60d3      	str	r3, [r2, #12]
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd2:	b530      	push	{r4, r5, lr}
 8000bd4:	68dc      	ldr	r4, [r3, #12]
 8000bd6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bda:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	bf28      	it	cs
 8000be4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 0501 	mov.w	r5, #1
 8000bec:	fa05 f303 	lsl.w	r3, r5, r3
 8000bf0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf4:	bf8c      	ite	hi
 8000bf6:	3c03      	subhi	r4, #3
 8000bf8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfa:	4019      	ands	r1, r3
 8000bfc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfe:	fa05 f404 	lsl.w	r4, r5, r4
 8000c02:	3c01      	subs	r4, #1
 8000c04:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000c06:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	ea42 0201 	orr.w	r2, r2, r1
 8000c0c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	bfad      	iteet	ge
 8000c12:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	f000 000f 	andlt.w	r0, r0, #15
 8000c1a:	4b06      	ldrlt	r3, [pc, #24]	; (8000c34 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	bfb5      	itete	lt
 8000c22:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c2c:	bd30      	pop	{r4, r5, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00
 8000c34:	e000ed14 	.word	0xe000ed14

08000c38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	db08      	blt.n	8000c4e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3c:	0942      	lsrs	r2, r0, #5
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f000 001f 	and.w	r0, r0, #31
 8000c44:	fa03 f000 	lsl.w	r0, r3, r0
 8000c48:	4b01      	ldr	r3, [pc, #4]	; (8000c50 <HAL_NVIC_EnableIRQ+0x18>)
 8000c4a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	3801      	subs	r0, #1
 8000c56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5a:	d20a      	bcs.n	8000c72 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c60:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	21f0      	movs	r1, #240	; 0xf0
 8000c64:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c84:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c86:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c88:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000e34 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c8c:	4c67      	ldr	r4, [pc, #412]	; (8000e2c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000c90:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	9a01      	ldr	r2, [sp, #4]
 8000c94:	40da      	lsrs	r2, r3
 8000c96:	d102      	bne.n	8000c9e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000c98:	b005      	add	sp, #20
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c9e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000ca0:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca2:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000ca4:	ea12 0e06 	ands.w	lr, r2, r6
 8000ca8:	f000 80b1 	beq.w	8000e0e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cac:	684a      	ldr	r2, [r1, #4]
 8000cae:	f022 0710 	bic.w	r7, r2, #16
 8000cb2:	2f02      	cmp	r7, #2
 8000cb4:	d116      	bne.n	8000ce4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8000cb6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000cba:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cbe:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000cc2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000cca:	f04f 0c0f 	mov.w	ip, #15
 8000cce:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000cd2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd6:	690d      	ldr	r5, [r1, #16]
 8000cd8:	fa05 f50a 	lsl.w	r5, r5, sl
 8000cdc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000ce0:	f8c9 5020 	str.w	r5, [r9, #32]
 8000ce4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ce8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000cea:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cee:	fa05 f50c 	lsl.w	r5, r5, ip
 8000cf2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cf8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cfc:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d00:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d02:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d06:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000d08:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0c:	d811      	bhi.n	8000d32 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000d0e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d10:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d14:	68cf      	ldr	r7, [r1, #12]
 8000d16:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d1a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000d1e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d20:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d22:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d26:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000d2a:	409f      	lsls	r7, r3
 8000d2c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000d30:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d32:	f1ba 0f03 	cmp.w	sl, #3
 8000d36:	d107      	bne.n	8000d48 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000d38:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d3a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000d3e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000d42:	409f      	lsls	r7, r3
 8000d44:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000d46:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000d48:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d4a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4c:	688e      	ldr	r6, [r1, #8]
 8000d4e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d52:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000d54:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d56:	00d5      	lsls	r5, r2, #3
 8000d58:	d559      	bpl.n	8000e0e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000d5e:	f045 0501 	orr.w	r5, r5, #1
 8000d62:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000d66:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000d6a:	f023 0603 	bic.w	r6, r3, #3
 8000d6e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000d72:	f005 0501 	and.w	r5, r5, #1
 8000d76:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000d7a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d7c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d80:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d82:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d84:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d88:	270f      	movs	r7, #15
 8000d8a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d8e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d92:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d96:	d03c      	beq.n	8000e12 <HAL_GPIO_Init+0x192>
 8000d98:	4d25      	ldr	r5, [pc, #148]	; (8000e30 <HAL_GPIO_Init+0x1b0>)
 8000d9a:	42a8      	cmp	r0, r5
 8000d9c:	d03b      	beq.n	8000e16 <HAL_GPIO_Init+0x196>
 8000d9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000da2:	42a8      	cmp	r0, r5
 8000da4:	d039      	beq.n	8000e1a <HAL_GPIO_Init+0x19a>
 8000da6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000daa:	42a8      	cmp	r0, r5
 8000dac:	d037      	beq.n	8000e1e <HAL_GPIO_Init+0x19e>
 8000dae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000db2:	42a8      	cmp	r0, r5
 8000db4:	d035      	beq.n	8000e22 <HAL_GPIO_Init+0x1a2>
 8000db6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dba:	42a8      	cmp	r0, r5
 8000dbc:	d033      	beq.n	8000e26 <HAL_GPIO_Init+0x1a6>
 8000dbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dc2:	42a8      	cmp	r0, r5
 8000dc4:	bf14      	ite	ne
 8000dc6:	2507      	movne	r5, #7
 8000dc8:	2506      	moveq	r5, #6
 8000dca:	fa05 f50c 	lsl.w	r5, r5, ip
 8000dce:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dd0:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000dd2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000dd4:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd8:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000dda:	bf54      	ite	pl
 8000ddc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000dde:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000de2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000de4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de6:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000de8:	bf54      	ite	pl
 8000dea:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000dec:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000df0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000df2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df4:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8000df6:	bf54      	ite	pl
 8000df8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000dfa:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000dfe:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000e00:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e02:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8000e04:	bf54      	ite	pl
 8000e06:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000e08:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000e0c:	60e5      	str	r5, [r4, #12]
    position++;
 8000e0e:	3301      	adds	r3, #1
 8000e10:	e73f      	b.n	8000c92 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e12:	2500      	movs	r5, #0
 8000e14:	e7d9      	b.n	8000dca <HAL_GPIO_Init+0x14a>
 8000e16:	2501      	movs	r5, #1
 8000e18:	e7d7      	b.n	8000dca <HAL_GPIO_Init+0x14a>
 8000e1a:	2502      	movs	r5, #2
 8000e1c:	e7d5      	b.n	8000dca <HAL_GPIO_Init+0x14a>
 8000e1e:	2503      	movs	r5, #3
 8000e20:	e7d3      	b.n	8000dca <HAL_GPIO_Init+0x14a>
 8000e22:	2504      	movs	r5, #4
 8000e24:	e7d1      	b.n	8000dca <HAL_GPIO_Init+0x14a>
 8000e26:	2505      	movs	r5, #5
 8000e28:	e7cf      	b.n	8000dca <HAL_GPIO_Init+0x14a>
 8000e2a:	bf00      	nop
 8000e2c:	40010400 	.word	0x40010400
 8000e30:	48000400 	.word	0x48000400
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000e38:	6903      	ldr	r3, [r0, #16]
 8000e3a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000e3c:	bf14      	ite	ne
 8000e3e:	2001      	movne	r0, #1
 8000e40:	2000      	moveq	r0, #0
 8000e42:	4770      	bx	lr

08000e44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e44:	b10a      	cbz	r2, 8000e4a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e46:	6181      	str	r1, [r0, #24]
 8000e48:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4a:	6281      	str	r1, [r0, #40]	; 0x28
 8000e4c:	4770      	bx	lr
	...

08000e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e50:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000e54:	6959      	ldr	r1, [r3, #20]
 8000e56:	4201      	tst	r1, r0
 8000e58:	d002      	beq.n	8000e60 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e5a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e5c:	f002 f82e 	bl	8002ebc <HAL_GPIO_EXTI_Callback>
 8000e60:	bd08      	pop	{r3, pc}
 8000e62:	bf00      	nop
 8000e64:	40010400 	.word	0x40010400

08000e68 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e68:	6803      	ldr	r3, [r0, #0]
 8000e6a:	699a      	ldr	r2, [r3, #24]
 8000e6c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e6e:	bf44      	itt	mi
 8000e70:	2200      	movmi	r2, #0
 8000e72:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e78:	bf5e      	ittt	pl
 8000e7a:	699a      	ldrpl	r2, [r3, #24]
 8000e7c:	f042 0201 	orrpl.w	r2, r2, #1
 8000e80:	619a      	strpl	r2, [r3, #24]
 8000e82:	4770      	bx	lr

08000e84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000e84:	b530      	push	{r4, r5, lr}
 8000e86:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000e88:	6805      	ldr	r5, [r0, #0]
 8000e8a:	4323      	orrs	r3, r4
 8000e8c:	0d64      	lsrs	r4, r4, #21
 8000e8e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000e92:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000e96:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000e9a:	6868      	ldr	r0, [r5, #4]
 8000e9c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000ea0:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000ea4:	4319      	orrs	r1, r3
 8000ea6:	f044 0403 	orr.w	r4, r4, #3
 8000eaa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000eae:	ea20 0404 	bic.w	r4, r0, r4
 8000eb2:	4321      	orrs	r1, r4
 8000eb4:	6069      	str	r1, [r5, #4]
 8000eb6:	bd30      	pop	{r4, r5, pc}

08000eb8 <I2C_WaitOnFlagUntilTimeout>:
{
 8000eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebc:	9f06      	ldr	r7, [sp, #24]
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	4616      	mov	r6, r2
 8000ec4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	6993      	ldr	r3, [r2, #24]
 8000eca:	ea38 0303 	bics.w	r3, r8, r3
 8000ece:	bf0c      	ite	eq
 8000ed0:	2301      	moveq	r3, #1
 8000ed2:	2300      	movne	r3, #0
 8000ed4:	42b3      	cmp	r3, r6
 8000ed6:	d002      	beq.n	8000ede <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000ed8:	2000      	movs	r0, #0
}
 8000eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000ede:	1c6b      	adds	r3, r5, #1
 8000ee0:	d0f2      	beq.n	8000ec8 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ee2:	f7ff fe49 	bl	8000b78 <HAL_GetTick>
 8000ee6:	1bc0      	subs	r0, r0, r7
 8000ee8:	4285      	cmp	r5, r0
 8000eea:	d301      	bcc.n	8000ef0 <I2C_WaitOnFlagUntilTimeout+0x38>
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	d1ea      	bne.n	8000ec6 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ef0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000f04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000f08:	2001      	movs	r0, #1
 8000f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f0e <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f0e:	6803      	ldr	r3, [r0, #0]
{
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f14:	6998      	ldr	r0, [r3, #24]
 8000f16:	f010 0010 	ands.w	r0, r0, #16
{
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f1e:	d116      	bne.n	8000f4e <I2C_IsAcknowledgeFailed+0x40>
 8000f20:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000f22:	1c69      	adds	r1, r5, #1
 8000f24:	d014      	beq.n	8000f50 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f26:	f7ff fe27 	bl	8000b78 <HAL_GetTick>
 8000f2a:	1b80      	subs	r0, r0, r6
 8000f2c:	4285      	cmp	r5, r0
 8000f2e:	d300      	bcc.n	8000f32 <I2C_IsAcknowledgeFailed+0x24>
 8000f30:	b96d      	cbnz	r5, 8000f4e <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f34:	f043 0320 	orr.w	r3, r3, #32
 8000f38:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000f46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
}
 8000f4c:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	6999      	ldr	r1, [r3, #24]
 8000f52:	068a      	lsls	r2, r1, #26
 8000f54:	d5e5      	bpl.n	8000f22 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f56:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f58:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f5a:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000f5c:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f5e:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000f60:	f7ff ff82 	bl	8000e68 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	6853      	ldr	r3, [r2, #4]
 8000f68:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000f6c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000f70:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000f7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000f82:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000f86:	e7db      	b.n	8000f40 <I2C_IsAcknowledgeFailed+0x32>

08000f88 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000f88:	b570      	push	{r4, r5, r6, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	460d      	mov	r5, r1
 8000f8e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	079b      	lsls	r3, r3, #30
 8000f96:	d501      	bpl.n	8000f9c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000f98:	2000      	movs	r0, #0
 8000f9a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f9c:	4632      	mov	r2, r6
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f7ff ffb4 	bl	8000f0e <I2C_IsAcknowledgeFailed>
 8000fa6:	b9a0      	cbnz	r0, 8000fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000fa8:	1c6a      	adds	r2, r5, #1
 8000faa:	d0f1      	beq.n	8000f90 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fac:	f7ff fde4 	bl	8000b78 <HAL_GetTick>
 8000fb0:	1b80      	subs	r0, r0, r6
 8000fb2:	4285      	cmp	r5, r0
 8000fb4:	d301      	bcc.n	8000fba <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000fb6:	2d00      	cmp	r5, #0
 8000fb8:	d1ea      	bne.n	8000f90 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fbc:	f043 0320 	orr.w	r3, r3, #32
 8000fc0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000fce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
}
 8000fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000fd8 <I2C_RequestMemoryWrite>:
{
 8000fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fda:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000fdc:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <I2C_RequestMemoryWrite+0x60>)
 8000fe0:	9300      	str	r3, [sp, #0]
{
 8000fe2:	4605      	mov	r5, r0
 8000fe4:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000fe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fea:	b2fa      	uxtb	r2, r7
 8000fec:	f7ff ff4a 	bl	8000e84 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ff0:	4632      	mov	r2, r6
 8000ff2:	9908      	ldr	r1, [sp, #32]
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	f7ff ffc7 	bl	8000f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ffa:	b110      	cbz	r0, 8001002 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8000ffc:	2001      	movs	r0, #1
}
 8000ffe:	b003      	add	sp, #12
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001002:	2f01      	cmp	r7, #1
 8001004:	682b      	ldr	r3, [r5, #0]
 8001006:	d10c      	bne.n	8001022 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001008:	b2e4      	uxtb	r4, r4
 800100a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800100c:	9b08      	ldr	r3, [sp, #32]
 800100e:	9600      	str	r6, [sp, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	2180      	movs	r1, #128	; 0x80
 8001014:	4628      	mov	r0, r5
 8001016:	f7ff ff4f 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800101a:	3000      	adds	r0, #0
 800101c:	bf18      	it	ne
 800101e:	2001      	movne	r0, #1
 8001020:	e7ed      	b.n	8000ffe <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001022:	0a22      	lsrs	r2, r4, #8
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001026:	9908      	ldr	r1, [sp, #32]
 8001028:	4632      	mov	r2, r6
 800102a:	4628      	mov	r0, r5
 800102c:	f7ff ffac 	bl	8000f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8001030:	2800      	cmp	r0, #0
 8001032:	d1e3      	bne.n	8000ffc <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	e7e7      	b.n	8001008 <I2C_RequestMemoryWrite+0x30>
 8001038:	80002000 	.word	0x80002000

0800103c <I2C_RequestMemoryRead>:
{
 800103c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800103e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001040:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <I2C_RequestMemoryRead+0x60>)
 8001044:	9300      	str	r3, [sp, #0]
{
 8001046:	4605      	mov	r5, r0
 8001048:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800104a:	2300      	movs	r3, #0
 800104c:	b2fa      	uxtb	r2, r7
 800104e:	f7ff ff19 	bl	8000e84 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001052:	4632      	mov	r2, r6
 8001054:	9908      	ldr	r1, [sp, #32]
 8001056:	4628      	mov	r0, r5
 8001058:	f7ff ff96 	bl	8000f88 <I2C_WaitOnTXISFlagUntilTimeout>
 800105c:	b110      	cbz	r0, 8001064 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 800105e:	2001      	movs	r0, #1
}
 8001060:	b003      	add	sp, #12
 8001062:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001064:	2f01      	cmp	r7, #1
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	d10c      	bne.n	8001084 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800106a:	b2e4      	uxtb	r4, r4
 800106c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800106e:	9b08      	ldr	r3, [sp, #32]
 8001070:	9600      	str	r6, [sp, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4628      	mov	r0, r5
 8001078:	f7ff ff1e 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800107c:	3000      	adds	r0, #0
 800107e:	bf18      	it	ne
 8001080:	2001      	movne	r0, #1
 8001082:	e7ed      	b.n	8001060 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001084:	0a22      	lsrs	r2, r4, #8
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001088:	9908      	ldr	r1, [sp, #32]
 800108a:	4632      	mov	r2, r6
 800108c:	4628      	mov	r0, r5
 800108e:	f7ff ff7b 	bl	8000f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8001092:	2800      	cmp	r0, #0
 8001094:	d1e3      	bne.n	800105e <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	e7e7      	b.n	800106a <I2C_RequestMemoryRead+0x2e>
 800109a:	bf00      	nop
 800109c:	80002000 	.word	0x80002000

080010a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	069b      	lsls	r3, r3, #26
 80010ae:	d501      	bpl.n	80010b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80010b0:	2000      	movs	r0, #0
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80010b4:	4632      	mov	r2, r6
 80010b6:	4629      	mov	r1, r5
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff ff28 	bl	8000f0e <I2C_IsAcknowledgeFailed>
 80010be:	b990      	cbnz	r0, 80010e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010c0:	f7ff fd5a 	bl	8000b78 <HAL_GetTick>
 80010c4:	1b80      	subs	r0, r0, r6
 80010c6:	4285      	cmp	r5, r0
 80010c8:	d301      	bcc.n	80010ce <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80010ca:	2d00      	cmp	r5, #0
 80010cc:	d1ec      	bne.n	80010a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80010d6:	2320      	movs	r3, #32
 80010d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80010e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80010e6:	2001      	movs	r0, #1
}
 80010e8:	bd70      	pop	{r4, r5, r6, pc}

080010ea <HAL_I2C_MspInit>:
 80010ea:	4770      	bx	lr

080010ec <HAL_I2C_Init>:
{
 80010ec:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80010ee:	4604      	mov	r4, r0
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d04a      	beq.n	800118a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010fc:	b91b      	cbnz	r3, 8001106 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80010fe:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001102:	f7ff fff2 	bl	80010ea <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001106:	2324      	movs	r3, #36	; 0x24
 8001108:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800110c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800110e:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001118:	6862      	ldr	r2, [r4, #4]
 800111a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800111e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001120:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001122:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800112c:	d124      	bne.n	8001178 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800112e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001132:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001134:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001136:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001138:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800113c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001140:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001148:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800114a:	6922      	ldr	r2, [r4, #16]
 800114c:	430a      	orrs	r2, r1
 800114e:	69a1      	ldr	r1, [r4, #24]
 8001150:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001154:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001156:	6a21      	ldr	r1, [r4, #32]
 8001158:	69e2      	ldr	r2, [r4, #28]
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001166:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001168:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800116a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800116c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001170:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001172:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001176:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001178:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800117c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800117e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001180:	bf04      	itt	eq
 8001182:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001186:	605a      	streq	r2, [r3, #4]
 8001188:	e7d4      	b.n	8001134 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800118a:	2001      	movs	r0, #1
}
 800118c:	bd10      	pop	{r4, pc}

0800118e <HAL_I2C_Mem_Write>:
{
 800118e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001192:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001194:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001198:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800119a:	2b20      	cmp	r3, #32
{
 800119c:	4604      	mov	r4, r0
 800119e:	460f      	mov	r7, r1
 80011a0:	9203      	str	r2, [sp, #12]
 80011a2:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80011a6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011aa:	f040 80a5 	bne.w	80012f8 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 80011ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80011b0:	b113      	cbz	r3, 80011b8 <HAL_I2C_Mem_Write+0x2a>
 80011b2:	f1ba 0f00 	cmp.w	sl, #0
 80011b6:	d106      	bne.n	80011c6 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011bc:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80011be:	2001      	movs	r0, #1
}
 80011c0:	b005      	add	sp, #20
 80011c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80011c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	f000 8094 	beq.w	80012f8 <HAL_I2C_Mem_Write+0x16a>
 80011d0:	2501      	movs	r5, #1
 80011d2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80011d6:	f7ff fccf 	bl	8000b78 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011da:	2319      	movs	r3, #25
 80011dc:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80011de:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011e0:	462a      	mov	r2, r5
 80011e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff fe66 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
 80011ec:	4681      	mov	r9, r0
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d1e5      	bne.n	80011be <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011f2:	2321      	movs	r3, #33	; 0x21
 80011f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80011fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001200:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001202:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001204:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001206:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800120a:	9601      	str	r6, [sp, #4]
 800120c:	f8cd 8000 	str.w	r8, [sp]
 8001210:	465b      	mov	r3, fp
 8001212:	9a03      	ldr	r2, [sp, #12]
 8001214:	4639      	mov	r1, r7
 8001216:	4620      	mov	r0, r4
 8001218:	f7ff fede 	bl	8000fd8 <I2C_RequestMemoryWrite>
 800121c:	b110      	cbz	r0, 8001224 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 800121e:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001222:	e7cc      	b.n	80011be <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001224:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001226:	b29b      	uxth	r3, r3
 8001228:	2bff      	cmp	r3, #255	; 0xff
 800122a:	d955      	bls.n	80012d8 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800122c:	22ff      	movs	r2, #255	; 0xff
 800122e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001230:	9000      	str	r0, [sp, #0]
 8001232:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001236:	4639      	mov	r1, r7
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fe23 	bl	8000e84 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800123e:	4632      	mov	r2, r6
 8001240:	4641      	mov	r1, r8
 8001242:	4620      	mov	r0, r4
 8001244:	f7ff fea0 	bl	8000f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8001248:	2800      	cmp	r0, #0
 800124a:	d1b8      	bne.n	80011be <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800124c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800124e:	6822      	ldr	r2, [r4, #0]
 8001250:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001254:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001256:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001258:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800125a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800125c:	3b01      	subs	r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001262:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001264:	3a01      	subs	r2, #1
 8001266:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001268:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800126a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800126c:	b1ab      	cbz	r3, 800129a <HAL_I2C_Mem_Write+0x10c>
 800126e:	b9a2      	cbnz	r2, 800129a <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001270:	9600      	str	r6, [sp, #0]
 8001272:	4643      	mov	r3, r8
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	4620      	mov	r0, r4
 8001278:	f7ff fe1e 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
 800127c:	2800      	cmp	r0, #0
 800127e:	d19e      	bne.n	80011be <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001280:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001282:	b29b      	uxth	r3, r3
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d92f      	bls.n	80012e8 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800128c:	9000      	str	r0, [sp, #0]
 800128e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001292:	4639      	mov	r1, r7
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff fdf5 	bl	8000e84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800129a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800129c:	b29b      	uxth	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1cd      	bne.n	800123e <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a2:	4632      	mov	r2, r6
 80012a4:	4641      	mov	r1, r8
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff fefa 	bl	80010a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d186      	bne.n	80011be <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	2120      	movs	r1, #32
 80012b4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80012bc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80012c0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80012ca:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012ce:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012d2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80012d6:	e773      	b.n	80011c0 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80012d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012da:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80012dc:	b292      	uxth	r2, r2
 80012de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	e7a6      	b.n	8001236 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80012e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012ea:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80012ec:	b292      	uxth	r2, r2
 80012ee:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	e7cc      	b.n	8001292 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 80012f8:	2002      	movs	r0, #2
 80012fa:	e761      	b.n	80011c0 <HAL_I2C_Mem_Write+0x32>

080012fc <HAL_I2C_Mem_Read>:
{
 80012fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001300:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001302:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001306:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001308:	2b20      	cmp	r3, #32
{
 800130a:	4604      	mov	r4, r0
 800130c:	460f      	mov	r7, r1
 800130e:	9203      	str	r2, [sp, #12]
 8001310:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001314:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001318:	f040 80a9 	bne.w	800146e <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 800131c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800131e:	b113      	cbz	r3, 8001326 <HAL_I2C_Mem_Read+0x2a>
 8001320:	f1ba 0f00 	cmp.w	sl, #0
 8001324:	d106      	bne.n	8001334 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800132c:	2001      	movs	r0, #1
}
 800132e:	b005      	add	sp, #20
 8001330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001334:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001338:	2b01      	cmp	r3, #1
 800133a:	f000 8098 	beq.w	800146e <HAL_I2C_Mem_Read+0x172>
 800133e:	2501      	movs	r5, #1
 8001340:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001344:	f7ff fc18 	bl	8000b78 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001348:	2319      	movs	r3, #25
 800134a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800134c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800134e:	462a      	mov	r2, r5
 8001350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff fdaf 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
 800135a:	4681      	mov	r9, r0
 800135c:	2800      	cmp	r0, #0
 800135e:	d1e5      	bne.n	800132c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001360:	2322      	movs	r3, #34	; 0x22
 8001362:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001366:	2340      	movs	r3, #64	; 0x40
 8001368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800136c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800136e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001370:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001372:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001374:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001378:	9601      	str	r6, [sp, #4]
 800137a:	f8cd 8000 	str.w	r8, [sp]
 800137e:	465b      	mov	r3, fp
 8001380:	9a03      	ldr	r2, [sp, #12]
 8001382:	4639      	mov	r1, r7
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff fe59 	bl	800103c <I2C_RequestMemoryRead>
 800138a:	b110      	cbz	r0, 8001392 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 800138c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001390:	e7cc      	b.n	800132c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001392:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001394:	b29b      	uxth	r3, r3
 8001396:	2bff      	cmp	r3, #255	; 0xff
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <HAL_I2C_Mem_Read+0x178>)
 800139a:	d958      	bls.n	800144e <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800139c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800139e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80013a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80013a6:	4639      	mov	r1, r7
 80013a8:	4620      	mov	r0, r4
 80013aa:	f7ff fd6b 	bl	8000e84 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80013ae:	9600      	str	r6, [sp, #0]
 80013b0:	4643      	mov	r3, r8
 80013b2:	2200      	movs	r2, #0
 80013b4:	2104      	movs	r1, #4
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff fd7e 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
 80013bc:	2800      	cmp	r0, #0
 80013be:	d1b5      	bne.n	800132c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013c0:	6822      	ldr	r2, [r4, #0]
 80013c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013c6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80013c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80013ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80013cc:	3301      	adds	r3, #1
 80013ce:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80013d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013da:	3a01      	subs	r2, #1
 80013dc:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013de:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80013e0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013e2:	b1ab      	cbz	r3, 8001410 <HAL_I2C_Mem_Read+0x114>
 80013e4:	b9a2      	cbnz	r2, 8001410 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013e6:	9600      	str	r6, [sp, #0]
 80013e8:	4643      	mov	r3, r8
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	4620      	mov	r0, r4
 80013ee:	f7ff fd63 	bl	8000eb8 <I2C_WaitOnFlagUntilTimeout>
 80013f2:	2800      	cmp	r0, #0
 80013f4:	d19a      	bne.n	800132c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d92f      	bls.n	800145e <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013fe:	22ff      	movs	r2, #255	; 0xff
 8001400:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001402:	9000      	str	r0, [sp, #0]
 8001404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001408:	4639      	mov	r1, r7
 800140a:	4620      	mov	r0, r4
 800140c:	f7ff fd3a 	bl	8000e84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001412:	b29b      	uxth	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ca      	bne.n	80013ae <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001418:	4632      	mov	r2, r6
 800141a:	4641      	mov	r1, r8
 800141c:	4620      	mov	r0, r4
 800141e:	f7ff fe3f 	bl	80010a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001422:	2800      	cmp	r0, #0
 8001424:	d182      	bne.n	800132c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	2120      	movs	r1, #32
 800142a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001432:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001436:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001440:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001444:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001448:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800144c:	e76f      	b.n	800132e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800144e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001450:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001452:	b292      	uxth	r2, r2
 8001454:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	e7a3      	b.n	80013a6 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800145e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001460:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001462:	b292      	uxth	r2, r2
 8001464:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	e7cc      	b.n	8001408 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 800146e:	2002      	movs	r0, #2
 8001470:	e75d      	b.n	800132e <HAL_I2C_Mem_Read+0x32>
 8001472:	bf00      	nop
 8001474:	80002400 	.word	0x80002400

08001478 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001478:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	2a20      	cmp	r2, #32
{
 8001480:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001482:	d11d      	bne.n	80014c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001484:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001488:	2b01      	cmp	r3, #1
 800148a:	d019      	beq.n	80014c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800148c:	2324      	movs	r3, #36	; 0x24
 800148e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001492:	6803      	ldr	r3, [r0, #0]
 8001494:	681c      	ldr	r4, [r3, #0]
 8001496:	f024 0401 	bic.w	r4, r4, #1
 800149a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800149c:	681c      	ldr	r4, [r3, #0]
 800149e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80014a2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014a4:	681c      	ldr	r4, [r3, #0]
 80014a6:	4321      	orrs	r1, r4
 80014a8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014aa:	6819      	ldr	r1, [r3, #0]
 80014ac:	f041 0101 	orr.w	r1, r1, #1
 80014b0:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80014b4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80014b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80014bc:	4618      	mov	r0, r3
 80014be:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80014c0:	2002      	movs	r0, #2
  }
}
 80014c2:	bd10      	pop	{r4, pc}

080014c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80014ca:	b2e4      	uxtb	r4, r4
 80014cc:	2c20      	cmp	r4, #32
 80014ce:	d11c      	bne.n	800150a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d018      	beq.n	800150a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d8:	2324      	movs	r3, #36	; 0x24
 80014da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014de:	6803      	ldr	r3, [r0, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014e8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014ee:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014f2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014fc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001502:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001506:	4618      	mov	r0, r3
 8001508:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800150a:	2002      	movs	r0, #2
  }
}
 800150c:	bd10      	pop	{r4, pc}
	...

08001510 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <HAL_PWREx_GetVoltageRange+0xc>)
 8001512:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001514:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40007000 	.word	0x40007000

08001520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001522:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001524:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001528:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152c:	d11c      	bne.n	8001568 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800152e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001532:	d015      	beq.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800153a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800153e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001542:	6811      	ldr	r1, [r2, #0]
 8001544:	2232      	movs	r2, #50	; 0x32
 8001546:	434a      	muls	r2, r1
 8001548:	490f      	ldr	r1, [pc, #60]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800154a:	fbb2 f2f1 	udiv	r2, r2, r1
 800154e:	4619      	mov	r1, r3
 8001550:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001552:	6958      	ldr	r0, [r3, #20]
 8001554:	0540      	lsls	r0, r0, #21
 8001556:	d500      	bpl.n	800155a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001558:	b922      	cbnz	r2, 8001564 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800155a:	694b      	ldr	r3, [r1, #20]
 800155c:	055b      	lsls	r3, r3, #21
 800155e:	d40d      	bmi.n	800157c <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001560:	2000      	movs	r0, #0
 8001562:	4770      	bx	lr
        wait_loop_index--;
 8001564:	3a01      	subs	r2, #1
 8001566:	e7f4      	b.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001568:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800156c:	bf1f      	itttt	ne
 800156e:	681a      	ldrne	r2, [r3, #0]
 8001570:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001574:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001578:	601a      	strne	r2, [r3, #0]
 800157a:	e7f1      	b.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 800157c:	2003      	movs	r0, #3
}
 800157e:	4770      	bx	lr
 8001580:	40007000 	.word	0x40007000
 8001584:	20000178 	.word	0x20000178
 8001588:	000f4240 	.word	0x000f4240

0800158c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800158c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800158e:	4d1e      	ldr	r5, [pc, #120]	; (8001608 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001590:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001592:	00da      	lsls	r2, r3, #3
{
 8001594:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001596:	d518      	bpl.n	80015ca <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001598:	f7ff ffba 	bl	8001510 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800159c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80015a0:	d123      	bne.n	80015ea <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80015a2:	2c80      	cmp	r4, #128	; 0x80
 80015a4:	d929      	bls.n	80015fa <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80015a6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015a8:	bf8c      	ite	hi
 80015aa:	2002      	movhi	r0, #2
 80015ac:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80015b0:	6813      	ldr	r3, [r2, #0]
 80015b2:	f023 0307 	bic.w	r3, r3, #7
 80015b6:	4303      	orrs	r3, r0
 80015b8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80015c0:	1a18      	subs	r0, r3, r0
 80015c2:	bf18      	it	ne
 80015c4:	2001      	movne	r0, #1
 80015c6:	b003      	add	sp, #12
 80015c8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	65ab      	str	r3, [r5, #88]	; 0x58
 80015d2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80015dc:	f7ff ff98 	bl	8001510 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80015e0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80015e8:	e7d8      	b.n	800159c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80015ea:	2c80      	cmp	r4, #128	; 0x80
 80015ec:	d807      	bhi.n	80015fe <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80015ee:	d008      	beq.n	8001602 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80015f0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80015f4:	4258      	negs	r0, r3
 80015f6:	4158      	adcs	r0, r3
 80015f8:	e7d9      	b.n	80015ae <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015fa:	2000      	movs	r0, #0
 80015fc:	e7d7      	b.n	80015ae <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80015fe:	2003      	movs	r0, #3
 8001600:	e7d5      	b.n	80015ae <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001602:	2002      	movs	r0, #2
 8001604:	e7d3      	b.n	80015ae <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001612:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001614:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001616:	f012 020c 	ands.w	r2, r2, #12
 800161a:	d005      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x18>
 800161c:	2a0c      	cmp	r2, #12
 800161e:	d115      	bne.n	800164c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001620:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001624:	2901      	cmp	r1, #1
 8001626:	d118      	bne.n	800165a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001628:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800162a:	481d      	ldr	r0, [pc, #116]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800162c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800162e:	bf55      	itete	pl
 8001630:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001634:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001636:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800163a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800163e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001642:	b34a      	cbz	r2, 8001698 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001644:	2a0c      	cmp	r2, #12
 8001646:	d009      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x4c>
 8001648:	2000      	movs	r0, #0
  return sysclockfreq;
 800164a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800164c:	2a04      	cmp	r2, #4
 800164e:	d022      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0x86>
 8001650:	2a08      	cmp	r2, #8
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001654:	bf18      	it	ne
 8001656:	2000      	movne	r0, #0
 8001658:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800165a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001662:	2a02      	cmp	r2, #2
 8001664:	d015      	beq.n	8001692 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8001666:	490f      	ldr	r1, [pc, #60]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001668:	2a03      	cmp	r2, #3
 800166a:	bf08      	it	eq
 800166c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800166e:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001670:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001678:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800167c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001680:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001682:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001684:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001686:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001688:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 800168c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001690:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001694:	e7eb      	b.n	800166e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001696:	4804      	ldr	r0, [pc, #16]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	080048d4 	.word	0x080048d4
 80016a4:	007a1200 	.word	0x007a1200
 80016a8:	00f42400 	.word	0x00f42400

080016ac <HAL_RCC_OscConfig>:
{
 80016ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80016b0:	4605      	mov	r5, r0
 80016b2:	b908      	cbnz	r0, 80016b8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80016b4:	2001      	movs	r0, #1
 80016b6:	e047      	b.n	8001748 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b8:	4ca6      	ldr	r4, [pc, #664]	; (8001954 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ba:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016bc:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016be:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016c0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c2:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ca:	d573      	bpl.n	80017b4 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016cc:	b11e      	cbz	r6, 80016d6 <HAL_RCC_OscConfig+0x2a>
 80016ce:	2e0c      	cmp	r6, #12
 80016d0:	d152      	bne.n	8001778 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016d2:	2f01      	cmp	r7, #1
 80016d4:	d150      	bne.n	8001778 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	0798      	lsls	r0, r3, #30
 80016da:	d502      	bpl.n	80016e2 <HAL_RCC_OscConfig+0x36>
 80016dc:	69ab      	ldr	r3, [r5, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0e8      	beq.n	80016b4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	6a28      	ldr	r0, [r5, #32]
 80016e6:	0719      	lsls	r1, r3, #28
 80016e8:	bf56      	itet	pl
 80016ea:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80016ee:	6823      	ldrmi	r3, [r4, #0]
 80016f0:	091b      	lsrpl	r3, r3, #4
 80016f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f6:	4283      	cmp	r3, r0
 80016f8:	d229      	bcs.n	800174e <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fa:	f7ff ff47 	bl	800158c <RCC_SetFlashLatencyFromMSIRange>
 80016fe:	2800      	cmp	r0, #0
 8001700:	d1d8      	bne.n	80016b4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6023      	str	r3, [r4, #0]
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	6a2a      	ldr	r2, [r5, #32]
 800170e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001712:	4313      	orrs	r3, r2
 8001714:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001716:	6863      	ldr	r3, [r4, #4]
 8001718:	69ea      	ldr	r2, [r5, #28]
 800171a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800171e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001722:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001724:	f7ff ff74 	bl	8001610 <HAL_RCC_GetSysClockFreq>
 8001728:	68a3      	ldr	r3, [r4, #8]
 800172a:	4a8b      	ldr	r2, [pc, #556]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	40d8      	lsrs	r0, r3
 8001738:	4b88      	ldr	r3, [pc, #544]	; (800195c <HAL_RCC_OscConfig+0x2b0>)
 800173a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800173c:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x2b4>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	f7ff f9d8 	bl	8000af4 <HAL_InitTick>
        if(status != HAL_OK)
 8001744:	2800      	cmp	r0, #0
 8001746:	d035      	beq.n	80017b4 <HAL_RCC_OscConfig+0x108>
}
 8001748:	b003      	add	sp, #12
 800174a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6023      	str	r3, [r4, #0]
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800175c:	4303      	orrs	r3, r0
 800175e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001760:	6863      	ldr	r3, [r4, #4]
 8001762:	69ea      	ldr	r2, [r5, #28]
 8001764:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001768:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800176c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800176e:	f7ff ff0d 	bl	800158c <RCC_SetFlashLatencyFromMSIRange>
 8001772:	2800      	cmp	r0, #0
 8001774:	d0d6      	beq.n	8001724 <HAL_RCC_OscConfig+0x78>
 8001776:	e79d      	b.n	80016b4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001778:	69ab      	ldr	r3, [r5, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d036      	beq.n	80017ec <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001786:	f7ff f9f7 	bl	8000b78 <HAL_GetTick>
 800178a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	079a      	lsls	r2, r3, #30
 8001790:	d524      	bpl.n	80017dc <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6023      	str	r3, [r4, #0]
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	6a2a      	ldr	r2, [r5, #32]
 800179e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017a2:	4313      	orrs	r3, r2
 80017a4:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	69ea      	ldr	r2, [r5, #28]
 80017aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017b2:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	07d8      	lsls	r0, r3, #31
 80017b8:	d429      	bmi.n	800180e <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ba:	682b      	ldr	r3, [r5, #0]
 80017bc:	0799      	lsls	r1, r3, #30
 80017be:	d467      	bmi.n	8001890 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	0718      	lsls	r0, r3, #28
 80017c4:	f100 809c 	bmi.w	8001900 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	0759      	lsls	r1, r3, #29
 80017cc:	f100 80ca 	bmi.w	8001964 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80017d2:	2800      	cmp	r0, #0
 80017d4:	f040 8133 	bne.w	8001a3e <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 80017d8:	2000      	movs	r0, #0
 80017da:	e7b5      	b.n	8001748 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017dc:	f7ff f9cc 	bl	8000b78 <HAL_GetTick>
 80017e0:	eba0 0008 	sub.w	r0, r0, r8
 80017e4:	2802      	cmp	r0, #2
 80017e6:	d9d1      	bls.n	800178c <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 80017e8:	2003      	movs	r0, #3
 80017ea:	e7ad      	b.n	8001748 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017f4:	f7ff f9c0 	bl	8000b78 <HAL_GetTick>
 80017f8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	079b      	lsls	r3, r3, #30
 80017fe:	d5d9      	bpl.n	80017b4 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001800:	f7ff f9ba 	bl	8000b78 <HAL_GetTick>
 8001804:	eba0 0008 	sub.w	r0, r0, r8
 8001808:	2802      	cmp	r0, #2
 800180a:	d9f6      	bls.n	80017fa <HAL_RCC_OscConfig+0x14e>
 800180c:	e7ec      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800180e:	2e08      	cmp	r6, #8
 8001810:	d003      	beq.n	800181a <HAL_RCC_OscConfig+0x16e>
 8001812:	2e0c      	cmp	r6, #12
 8001814:	d108      	bne.n	8001828 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001816:	2f03      	cmp	r7, #3
 8001818:	d106      	bne.n	8001828 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	039a      	lsls	r2, r3, #14
 800181e:	d5cc      	bpl.n	80017ba <HAL_RCC_OscConfig+0x10e>
 8001820:	686b      	ldr	r3, [r5, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1c9      	bne.n	80017ba <HAL_RCC_OscConfig+0x10e>
 8001826:	e745      	b.n	80016b4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001828:	686b      	ldr	r3, [r5, #4]
 800182a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182e:	d110      	bne.n	8001852 <HAL_RCC_OscConfig+0x1a6>
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001838:	f7ff f99e 	bl	8000b78 <HAL_GetTick>
 800183c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	039b      	lsls	r3, r3, #14
 8001842:	d4ba      	bmi.n	80017ba <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff f998 	bl	8000b78 <HAL_GetTick>
 8001848:	eba0 0008 	sub.w	r0, r0, r8
 800184c:	2864      	cmp	r0, #100	; 0x64
 800184e:	d9f6      	bls.n	800183e <HAL_RCC_OscConfig+0x192>
 8001850:	e7ca      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001856:	d104      	bne.n	8001862 <HAL_RCC_OscConfig+0x1b6>
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185e:	6023      	str	r3, [r4, #0]
 8001860:	e7e6      	b.n	8001830 <HAL_RCC_OscConfig+0x184>
 8001862:	6822      	ldr	r2, [r4, #0]
 8001864:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001868:	6022      	str	r2, [r4, #0]
 800186a:	6822      	ldr	r2, [r4, #0]
 800186c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001870:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1e0      	bne.n	8001838 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8001876:	f7ff f97f 	bl	8000b78 <HAL_GetTick>
 800187a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	0398      	lsls	r0, r3, #14
 8001880:	d59b      	bpl.n	80017ba <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001882:	f7ff f979 	bl	8000b78 <HAL_GetTick>
 8001886:	eba0 0008 	sub.w	r0, r0, r8
 800188a:	2864      	cmp	r0, #100	; 0x64
 800188c:	d9f6      	bls.n	800187c <HAL_RCC_OscConfig+0x1d0>
 800188e:	e7ab      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001890:	2e04      	cmp	r6, #4
 8001892:	d003      	beq.n	800189c <HAL_RCC_OscConfig+0x1f0>
 8001894:	2e0c      	cmp	r6, #12
 8001896:	d110      	bne.n	80018ba <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001898:	2f02      	cmp	r7, #2
 800189a:	d10e      	bne.n	80018ba <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	0559      	lsls	r1, r3, #21
 80018a0:	d503      	bpl.n	80018aa <HAL_RCC_OscConfig+0x1fe>
 80018a2:	68eb      	ldr	r3, [r5, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f43f af05 	beq.w	80016b4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	692a      	ldr	r2, [r5, #16]
 80018ae:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80018b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018b6:	6063      	str	r3, [r4, #4]
 80018b8:	e782      	b.n	80017c0 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ba:	68eb      	ldr	r3, [r5, #12]
 80018bc:	b17b      	cbz	r3, 80018de <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018c6:	f7ff f957 	bl	8000b78 <HAL_GetTick>
 80018ca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	055a      	lsls	r2, r3, #21
 80018d0:	d4eb      	bmi.n	80018aa <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff f951 	bl	8000b78 <HAL_GetTick>
 80018d6:	1bc0      	subs	r0, r0, r7
 80018d8:	2802      	cmp	r0, #2
 80018da:	d9f7      	bls.n	80018cc <HAL_RCC_OscConfig+0x220>
 80018dc:	e784      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018e6:	f7ff f947 	bl	8000b78 <HAL_GetTick>
 80018ea:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	055b      	lsls	r3, r3, #21
 80018f0:	f57f af66 	bpl.w	80017c0 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff f940 	bl	8000b78 <HAL_GetTick>
 80018f8:	1bc0      	subs	r0, r0, r7
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9f6      	bls.n	80018ec <HAL_RCC_OscConfig+0x240>
 80018fe:	e773      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001900:	696b      	ldr	r3, [r5, #20]
 8001902:	b19b      	cbz	r3, 800192c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001904:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001910:	f7ff f932 	bl	8000b78 <HAL_GetTick>
 8001914:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001916:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800191a:	079a      	lsls	r2, r3, #30
 800191c:	f53f af54 	bmi.w	80017c8 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff f92a 	bl	8000b78 <HAL_GetTick>
 8001924:	1bc0      	subs	r0, r0, r7
 8001926:	2802      	cmp	r0, #2
 8001928:	d9f5      	bls.n	8001916 <HAL_RCC_OscConfig+0x26a>
 800192a:	e75d      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 800192c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001938:	f7ff f91e 	bl	8000b78 <HAL_GetTick>
 800193c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800193e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001942:	079b      	lsls	r3, r3, #30
 8001944:	f57f af40 	bpl.w	80017c8 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff f916 	bl	8000b78 <HAL_GetTick>
 800194c:	1bc0      	subs	r0, r0, r7
 800194e:	2802      	cmp	r0, #2
 8001950:	d9f5      	bls.n	800193e <HAL_RCC_OscConfig+0x292>
 8001952:	e749      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
 8001954:	40021000 	.word	0x40021000
 8001958:	080048c4 	.word	0x080048c4
 800195c:	20000178 	.word	0x20000178
 8001960:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001966:	00d8      	lsls	r0, r3, #3
 8001968:	d429      	bmi.n	80019be <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	65a3      	str	r3, [r4, #88]	; 0x58
 8001972:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800197c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001980:	4f79      	ldr	r7, [pc, #484]	; (8001b68 <HAL_RCC_OscConfig+0x4bc>)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	05d9      	lsls	r1, r3, #23
 8001986:	d51d      	bpl.n	80019c4 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001988:	68ab      	ldr	r3, [r5, #8]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d12b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x33a>
 800198e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800199a:	f7ff f8ed 	bl	8000b78 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019a2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80019a8:	079b      	lsls	r3, r3, #30
 80019aa:	d542      	bpl.n	8001a32 <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 80019ac:	f1b8 0f00 	cmp.w	r8, #0
 80019b0:	f43f af0e 	beq.w	80017d0 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80019bc:	e708      	b.n	80017d0 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 80019be:	f04f 0800 	mov.w	r8, #0
 80019c2:	e7dd      	b.n	8001980 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ca:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80019cc:	f7ff f8d4 	bl	8000b78 <HAL_GetTick>
 80019d0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	05da      	lsls	r2, r3, #23
 80019d6:	d4d7      	bmi.n	8001988 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7ff f8ce 	bl	8000b78 <HAL_GetTick>
 80019dc:	eba0 0009 	sub.w	r0, r0, r9
 80019e0:	2802      	cmp	r0, #2
 80019e2:	d9f6      	bls.n	80019d2 <HAL_RCC_OscConfig+0x326>
 80019e4:	e700      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d106      	bne.n	80019f8 <HAL_RCC_OscConfig+0x34c>
 80019ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80019f6:	e7ca      	b.n	800198e <HAL_RCC_OscConfig+0x2e2>
 80019f8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001a04:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001a08:	f022 0204 	bic.w	r2, r2, #4
 8001a0c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1c2      	bne.n	800199a <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8001a14:	f7ff f8b0 	bl	8000b78 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a18:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a1c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001a22:	0798      	lsls	r0, r3, #30
 8001a24:	d5c2      	bpl.n	80019ac <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff f8a7 	bl	8000b78 <HAL_GetTick>
 8001a2a:	1bc0      	subs	r0, r0, r7
 8001a2c:	4548      	cmp	r0, r9
 8001a2e:	d9f6      	bls.n	8001a1e <HAL_RCC_OscConfig+0x372>
 8001a30:	e6da      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff f8a1 	bl	8000b78 <HAL_GetTick>
 8001a36:	1bc0      	subs	r0, r0, r7
 8001a38:	4548      	cmp	r0, r9
 8001a3a:	d9b3      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2f8>
 8001a3c:	e6d4      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3e:	2e0c      	cmp	r6, #12
 8001a40:	d05c      	beq.n	8001afc <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 8001a42:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a44:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4c:	d13b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f893 	bl	8000b78 <HAL_GetTick>
 8001a52:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	0199      	lsls	r1, r3, #6
 8001a58:	d42f      	bmi.n	8001aba <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5a:	68e2      	ldr	r2, [r4, #12]
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_OscConfig+0x4c0>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001a62:	4313      	orrs	r3, r2
 8001a64:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001a66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a6a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001a6c:	3a01      	subs	r2, #1
 8001a6e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001a72:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001a74:	0912      	lsrs	r2, r2, #4
 8001a76:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001a7a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001a7c:	0852      	lsrs	r2, r2, #1
 8001a7e:	3a01      	subs	r2, #1
 8001a80:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001a84:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001a86:	0852      	lsrs	r2, r2, #1
 8001a88:	3a01      	subs	r2, #1
 8001a8a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001a8e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a96:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a98:	68e3      	ldr	r3, [r4, #12]
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f86a 	bl	8000b78 <HAL_GetTick>
 8001aa4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	019a      	lsls	r2, r3, #6
 8001aaa:	f53f ae95 	bmi.w	80017d8 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f863 	bl	8000b78 <HAL_GetTick>
 8001ab2:	1b40      	subs	r0, r0, r5
 8001ab4:	2802      	cmp	r0, #2
 8001ab6:	d9f6      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x3fa>
 8001ab8:	e696      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff f85d 	bl	8000b78 <HAL_GetTick>
 8001abe:	1b80      	subs	r0, r0, r6
 8001ac0:	2802      	cmp	r0, #2
 8001ac2:	d9c7      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3a8>
 8001ac4:	e690      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001acc:	bf02      	ittt	eq
 8001ace:	68e3      	ldreq	r3, [r4, #12]
 8001ad0:	f023 0303 	biceq.w	r3, r3, #3
 8001ad4:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ad6:	68e3      	ldr	r3, [r4, #12]
 8001ad8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f849 	bl	8000b78 <HAL_GetTick>
 8001ae6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	019b      	lsls	r3, r3, #6
 8001aec:	f57f ae74 	bpl.w	80017d8 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f842 	bl	8000b78 <HAL_GetTick>
 8001af4:	1b40      	subs	r0, r0, r5
 8001af6:	2802      	cmp	r0, #2
 8001af8:	d9f6      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x43c>
 8001afa:	e675      	b.n	80017e8 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	2801      	cmp	r0, #1
 8001afe:	f43f ae23 	beq.w	8001748 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8001b02:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b04:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001b06:	f003 0103 	and.w	r1, r3, #3
 8001b0a:	4291      	cmp	r1, r2
 8001b0c:	f47f add2 	bne.w	80016b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b10:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001b12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b16:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b18:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001b1c:	f47f adca 	bne.w	80016b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b20:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001b22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b26:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001b2a:	f47f adc3 	bne.w	80016b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b2e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001b30:	3a07      	subs	r2, #7
 8001b32:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001b36:	bf18      	it	ne
 8001b38:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3a:	4291      	cmp	r1, r2
 8001b3c:	f47f adba 	bne.w	80016b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b40:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001b42:	0852      	lsrs	r2, r2, #1
 8001b44:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001b48:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b4a:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001b4e:	f47f adb1 	bne.w	80016b4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b52:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001b54:	0852      	lsrs	r2, r2, #1
 8001b56:	3a01      	subs	r2, #1
 8001b58:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8001b60:	bf14      	ite	ne
 8001b62:	2001      	movne	r0, #1
 8001b64:	2000      	moveq	r0, #0
 8001b66:	e5ef      	b.n	8001748 <HAL_RCC_OscConfig+0x9c>
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	f99d808c 	.word	0xf99d808c

08001b70 <HAL_RCC_ClockConfig>:
{
 8001b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b74:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001b76:	4604      	mov	r4, r0
 8001b78:	b910      	cbnz	r0, 8001b80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <HAL_RCC_ClockConfig+0x118>)
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	d32a      	bcc.n	8001be2 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	07d9      	lsls	r1, r3, #31
 8001b90:	d432      	bmi.n	8001bf8 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b92:	6821      	ldr	r1, [r4, #0]
 8001b94:	078a      	lsls	r2, r1, #30
 8001b96:	d45c      	bmi.n	8001c52 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4a3b      	ldr	r2, [pc, #236]	; (8001c88 <HAL_RCC_ClockConfig+0x118>)
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	429e      	cmp	r6, r3
 8001ba2:	d35e      	bcc.n	8001c62 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	f011 0f04 	tst.w	r1, #4
 8001ba8:	4d38      	ldr	r5, [pc, #224]	; (8001c8c <HAL_RCC_ClockConfig+0x11c>)
 8001baa:	d165      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	070b      	lsls	r3, r1, #28
 8001bae:	d506      	bpl.n	8001bbe <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb0:	68ab      	ldr	r3, [r5, #8]
 8001bb2:	6922      	ldr	r2, [r4, #16]
 8001bb4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001bb8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bbc:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bbe:	f7ff fd27 	bl	8001610 <HAL_RCC_GetSysClockFreq>
 8001bc2:	68ab      	ldr	r3, [r5, #8]
 8001bc4:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <HAL_RCC_ClockConfig+0x120>)
 8001bc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	40d8      	lsrs	r0, r3
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_RCC_ClockConfig+0x124>)
 8001bd8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001bda:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <HAL_RCC_ClockConfig+0x128>)
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	f7fe bf89 	b.w	8000af4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	6813      	ldr	r3, [r2, #0]
 8001be4:	f023 0307 	bic.w	r3, r3, #7
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	4299      	cmp	r1, r3
 8001bf4:	d1c1      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xa>
 8001bf6:	e7c9      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf8:	6862      	ldr	r2, [r4, #4]
 8001bfa:	4d24      	ldr	r5, [pc, #144]	; (8001c8c <HAL_RCC_ClockConfig+0x11c>)
 8001bfc:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c00:	d11b      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c06:	d0b8      	beq.n	8001b7a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c08:	68ab      	ldr	r3, [r5, #8]
 8001c0a:	f023 0303 	bic.w	r3, r3, #3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001c12:	f7fe ffb1 	bl	8000b78 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c16:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001c1a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1c:	68ab      	ldr	r3, [r5, #8]
 8001c1e:	6862      	ldr	r2, [r4, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c28:	d0b3      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2a:	f7fe ffa5 	bl	8000b78 <HAL_GetTick>
 8001c2e:	1bc0      	subs	r0, r0, r7
 8001c30:	4540      	cmp	r0, r8
 8001c32:	d9f3      	bls.n	8001c1c <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8001c34:	2003      	movs	r0, #3
}
 8001c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	2a02      	cmp	r2, #2
 8001c3c:	d102      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c42:	e7e0      	b.n	8001c06 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c44:	b912      	cbnz	r2, 8001c4c <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c46:	f013 0f02 	tst.w	r3, #2
 8001c4a:	e7dc      	b.n	8001c06 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001c50:	e7d9      	b.n	8001c06 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <HAL_RCC_ClockConfig+0x11c>)
 8001c54:	68a0      	ldr	r0, [r4, #8]
 8001c56:	6893      	ldr	r3, [r2, #8]
 8001c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c5c:	4303      	orrs	r3, r0
 8001c5e:	6093      	str	r3, [r2, #8]
 8001c60:	e79a      	b.n	8001b98 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	6813      	ldr	r3, [r2, #0]
 8001c64:	f023 0307 	bic.w	r3, r3, #7
 8001c68:	4333      	orrs	r3, r6
 8001c6a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6c:	6813      	ldr	r3, [r2, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	429e      	cmp	r6, r3
 8001c74:	d181      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xa>
 8001c76:	e795      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c78:	68ab      	ldr	r3, [r5, #8]
 8001c7a:	68e2      	ldr	r2, [r4, #12]
 8001c7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60ab      	str	r3, [r5, #8]
 8001c84:	e792      	b.n	8001bac <HAL_RCC_ClockConfig+0x3c>
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	080048c4 	.word	0x080048c4
 8001c94:	20000178 	.word	0x20000178
 8001c98:	20000004 	.word	0x20000004

08001c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c9e:	4b45      	ldr	r3, [pc, #276]	; (8001db4 <RCCEx_PLLSAI1_Config+0x118>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	f012 0f03 	tst.w	r2, #3
{
 8001ca6:	4605      	mov	r5, r0
 8001ca8:	460e      	mov	r6, r1
 8001caa:	461c      	mov	r4, r3
 8001cac:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001cae:	d02a      	beq.n	8001d06 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	f002 0203 	and.w	r2, r2, #3
 8001cb6:	4282      	cmp	r2, r0
 8001cb8:	d13c      	bne.n	8001d34 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d03a      	beq.n	8001d34 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001cbe:	68db      	ldr	r3, [r3, #12]
       ||
 8001cc0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001cc2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001cc6:	3301      	adds	r3, #1
       ||
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d133      	bne.n	8001d34 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001cd2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd4:	f7fe ff50 	bl	8000b78 <HAL_GetTick>
 8001cd8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	011a      	lsls	r2, r3, #4
 8001cde:	d432      	bmi.n	8001d46 <RCCEx_PLLSAI1_Config+0xaa>
 8001ce0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001ce2:	2e00      	cmp	r6, #0
 8001ce4:	d036      	beq.n	8001d54 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001ce6:	2e01      	cmp	r6, #1
 8001ce8:	d150      	bne.n	8001d8c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cea:	6922      	ldr	r2, [r4, #16]
 8001cec:	6928      	ldr	r0, [r5, #16]
 8001cee:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001cf2:	0840      	lsrs	r0, r0, #1
 8001cf4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001cf8:	3801      	subs	r0, #1
 8001cfa:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001cfe:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001d02:	6122      	str	r2, [r4, #16]
 8001d04:	e032      	b.n	8001d6c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001d06:	2802      	cmp	r0, #2
 8001d08:	d010      	beq.n	8001d2c <RCCEx_PLLSAI1_Config+0x90>
 8001d0a:	2803      	cmp	r0, #3
 8001d0c:	d014      	beq.n	8001d38 <RCCEx_PLLSAI1_Config+0x9c>
 8001d0e:	2801      	cmp	r0, #1
 8001d10:	d110      	bne.n	8001d34 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	079f      	lsls	r7, r3, #30
 8001d16:	d538      	bpl.n	8001d8a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001d18:	68e3      	ldr	r3, [r4, #12]
 8001d1a:	686a      	ldr	r2, [r5, #4]
 8001d1c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001d20:	3a01      	subs	r2, #1
 8001d22:	4318      	orrs	r0, r3
 8001d24:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001d28:	60e0      	str	r0, [r4, #12]
 8001d2a:	e7cf      	b.n	8001ccc <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d32:	d1f1      	bne.n	8001d18 <RCCEx_PLLSAI1_Config+0x7c>
 8001d34:	2001      	movs	r0, #1
 8001d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	0391      	lsls	r1, r2, #14
 8001d3c:	d4ec      	bmi.n	8001d18 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001d44:	e7f5      	b.n	8001d32 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d46:	f7fe ff17 	bl	8000b78 <HAL_GetTick>
 8001d4a:	1bc0      	subs	r0, r0, r7
 8001d4c:	2802      	cmp	r0, #2
 8001d4e:	d9c4      	bls.n	8001cda <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001d50:	2003      	movs	r0, #3
 8001d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d54:	6921      	ldr	r1, [r4, #16]
 8001d56:	68eb      	ldr	r3, [r5, #12]
 8001d58:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001d5c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001d60:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001d6a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d72:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7fe ff00 	bl	8000b78 <HAL_GetTick>
 8001d78:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	d513      	bpl.n	8001da8 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001d80:	6923      	ldr	r3, [r4, #16]
 8001d82:	69aa      	ldr	r2, [r5, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	6123      	str	r3, [r4, #16]
 8001d88:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d8c:	6923      	ldr	r3, [r4, #16]
 8001d8e:	6968      	ldr	r0, [r5, #20]
 8001d90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d94:	0840      	lsrs	r0, r0, #1
 8001d96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d9a:	3801      	subs	r0, #1
 8001d9c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001da0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001da4:	6123      	str	r3, [r4, #16]
 8001da6:	e7e1      	b.n	8001d6c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001da8:	f7fe fee6 	bl	8000b78 <HAL_GetTick>
 8001dac:	1b80      	subs	r0, r0, r6
 8001dae:	2802      	cmp	r0, #2
 8001db0:	d9e3      	bls.n	8001d7a <RCCEx_PLLSAI1_Config+0xde>
 8001db2:	e7cd      	b.n	8001d50 <RCCEx_PLLSAI1_Config+0xb4>
 8001db4:	40021000 	.word	0x40021000

08001db8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <RCCEx_PLLSAI2_Config+0xf8>)
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	f012 0f03 	tst.w	r2, #3
{
 8001dc2:	4605      	mov	r5, r0
 8001dc4:	460e      	mov	r6, r1
 8001dc6:	461c      	mov	r4, r3
 8001dc8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001dca:	d028      	beq.n	8001e1e <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	f002 0203 	and.w	r2, r2, #3
 8001dd2:	4282      	cmp	r2, r0
 8001dd4:	d13a      	bne.n	8001e4c <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001dd6:	2a00      	cmp	r2, #0
 8001dd8:	d038      	beq.n	8001e4c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001dda:	68db      	ldr	r3, [r3, #12]
       ||
 8001ddc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001dde:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001de2:	3301      	adds	r3, #1
       ||
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d131      	bne.n	8001e4c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df0:	f7fe fec2 	bl	8000b78 <HAL_GetTick>
 8001df4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	009a      	lsls	r2, r3, #2
 8001dfa:	d430      	bmi.n	8001e5e <RCCEx_PLLSAI2_Config+0xa6>
 8001dfc:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001dfe:	2e00      	cmp	r6, #0
 8001e00:	d034      	beq.n	8001e6c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001e02:	6963      	ldr	r3, [r4, #20]
 8001e04:	6929      	ldr	r1, [r5, #16]
 8001e06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001e0a:	0849      	lsrs	r1, r1, #1
 8001e0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e10:	3901      	subs	r1, #1
 8001e12:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001e16:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001e1a:	6163      	str	r3, [r4, #20]
 8001e1c:	e032      	b.n	8001e84 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001e1e:	2802      	cmp	r0, #2
 8001e20:	d010      	beq.n	8001e44 <RCCEx_PLLSAI2_Config+0x8c>
 8001e22:	2803      	cmp	r0, #3
 8001e24:	d014      	beq.n	8001e50 <RCCEx_PLLSAI2_Config+0x98>
 8001e26:	2801      	cmp	r0, #1
 8001e28:	d110      	bne.n	8001e4c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	079f      	lsls	r7, r3, #30
 8001e2e:	d538      	bpl.n	8001ea2 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e30:	68e3      	ldr	r3, [r4, #12]
 8001e32:	686a      	ldr	r2, [r5, #4]
 8001e34:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001e38:	3a01      	subs	r2, #1
 8001e3a:	4318      	orrs	r0, r3
 8001e3c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001e40:	60e0      	str	r0, [r4, #12]
 8001e42:	e7d1      	b.n	8001de8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e4a:	d1f1      	bne.n	8001e30 <RCCEx_PLLSAI2_Config+0x78>
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	0391      	lsls	r1, r2, #14
 8001e54:	d4ec      	bmi.n	8001e30 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001e5c:	e7f5      	b.n	8001e4a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001e5e:	f7fe fe8b 	bl	8000b78 <HAL_GetTick>
 8001e62:	1bc0      	subs	r0, r0, r7
 8001e64:	2802      	cmp	r0, #2
 8001e66:	d9c6      	bls.n	8001df6 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001e68:	2003      	movs	r0, #3
 8001e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001e6c:	6962      	ldr	r2, [r4, #20]
 8001e6e:	68eb      	ldr	r3, [r5, #12]
 8001e70:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001e74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e78:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001e82:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7fe fe74 	bl	8000b78 <HAL_GetTick>
 8001e90:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	d505      	bpl.n	8001ea4 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001e98:	6963      	ldr	r3, [r4, #20]
 8001e9a:	696a      	ldr	r2, [r5, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	6163      	str	r3, [r4, #20]
 8001ea0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001ea4:	f7fe fe68 	bl	8000b78 <HAL_GetTick>
 8001ea8:	1b80      	subs	r0, r0, r6
 8001eaa:	2802      	cmp	r0, #2
 8001eac:	d9f1      	bls.n	8001e92 <RCCEx_PLLSAI2_Config+0xda>
 8001eae:	e7db      	b.n	8001e68 <RCCEx_PLLSAI2_Config+0xb0>
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001eb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001eb8:	6806      	ldr	r6, [r0, #0]
 8001eba:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001ebe:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ec0:	d024      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ec2:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001ec4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001ec8:	d02c      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001eca:	d802      	bhi.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ecc:	b1c1      	cbz	r1, 8001f00 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001ece:	2601      	movs	r6, #1
 8001ed0:	e01c      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ed2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ed8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001edc:	d1f7      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ede:	4a4d      	ldr	r2, [pc, #308]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001ee2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ee6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001eea:	430b      	orrs	r3, r1
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ef0:	2600      	movs	r6, #0
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ef4:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef6:	68d3      	ldr	r3, [r2, #12]
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	60d3      	str	r3, [r2, #12]
      break;
 8001efe:	e7ee      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f00:	3004      	adds	r0, #4
 8001f02:	f7ff fecb 	bl	8001c9c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f06:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d0e8      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	04d8      	lsls	r0, r3, #19
 8001f10:	d506      	bpl.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001f12:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001f14:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001f18:	d074      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001f1a:	d808      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001f1c:	b1a9      	cbz	r1, 8001f4a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001f1e:	2601      	movs	r6, #1
 8001f20:	4635      	mov	r5, r6
 8001f22:	e021      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f24:	2100      	movs	r1, #0
 8001f26:	3020      	adds	r0, #32
 8001f28:	f7ff ff46 	bl	8001db8 <RCCEx_PLLSAI2_Config>
 8001f2c:	e7eb      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001f2e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001f32:	d004      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001f34:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001f38:	d1f1      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001f3a:	4635      	mov	r5, r6
 8001f3c:	e009      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f3e:	4a35      	ldr	r2, [pc, #212]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f40:	68d3      	ldr	r3, [r2, #12]
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	60d3      	str	r3, [r2, #12]
 8001f48:	e7f7      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f4a:	1d20      	adds	r0, r4, #4
 8001f4c:	f7ff fea6 	bl	8001c9c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f50:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	d15c      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f56:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f58:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001f5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f5e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001f62:	430b      	orrs	r3, r1
 8001f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	0399      	lsls	r1, r3, #14
 8001f6c:	f140 814f 	bpl.w	800220e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f70:	4f28      	ldr	r7, [pc, #160]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f74:	00da      	lsls	r2, r3, #3
 8001f76:	f140 8176 	bpl.w	8002266 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002018 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001f82:	f8d9 3000 	ldr.w	r3, [r9]
 8001f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001f8e:	f7fe fdf3 	bl	8000b78 <HAL_GetTick>
 8001f92:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f94:	f8d9 3000 	ldr.w	r3, [r9]
 8001f98:	05db      	lsls	r3, r3, #23
 8001f9a:	d53f      	bpl.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001f9c:	2d00      	cmp	r5, #0
 8001f9e:	d144      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fa4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001fa8:	d015      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001faa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d011      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001fba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fd6:	07d8      	lsls	r0, r3, #31
 8001fd8:	d509      	bpl.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001fda:	f7fe fdcd 	bl	8000b78 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001fe2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fe8:	0799      	lsls	r1, r3, #30
 8001fea:	f140 8109 	bpl.w	8002200 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ff2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002000:	4635      	mov	r5, r6
 8002002:	e012      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002004:	2100      	movs	r1, #0
 8002006:	f104 0020 	add.w	r0, r4, #32
 800200a:	f7ff fed5 	bl	8001db8 <RCCEx_PLLSAI2_Config>
 800200e:	e79f      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002010:	462e      	mov	r6, r5
 8002012:	e7a9      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7fe fdac 	bl	8000b78 <HAL_GetTick>
 8002020:	eba0 000a 	sub.w	r0, r0, sl
 8002024:	2802      	cmp	r0, #2
 8002026:	d9b5      	bls.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002028:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800202a:	f1b8 0f00 	cmp.w	r8, #0
 800202e:	d003      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002036:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	07da      	lsls	r2, r3, #31
 800203c:	d508      	bpl.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800203e:	4990      	ldr	r1, [pc, #576]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002040:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002042:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002046:	f022 0203 	bic.w	r2, r2, #3
 800204a:	4302      	orrs	r2, r0
 800204c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002050:	079f      	lsls	r7, r3, #30
 8002052:	d508      	bpl.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002054:	498a      	ldr	r1, [pc, #552]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002056:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002058:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800205c:	f022 020c 	bic.w	r2, r2, #12
 8002060:	4302      	orrs	r2, r0
 8002062:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002066:	075e      	lsls	r6, r3, #29
 8002068:	d508      	bpl.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800206a:	4985      	ldr	r1, [pc, #532]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800206c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800206e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002072:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002076:	4302      	orrs	r2, r0
 8002078:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800207c:	0718      	lsls	r0, r3, #28
 800207e:	d508      	bpl.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002080:	497f      	ldr	r1, [pc, #508]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002082:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002084:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002088:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800208c:	4302      	orrs	r2, r0
 800208e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002092:	06d9      	lsls	r1, r3, #27
 8002094:	d508      	bpl.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002096:	497a      	ldr	r1, [pc, #488]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002098:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800209a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800209e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020a2:	4302      	orrs	r2, r0
 80020a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020a8:	069a      	lsls	r2, r3, #26
 80020aa:	d508      	bpl.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020ac:	4974      	ldr	r1, [pc, #464]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020ae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80020b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020b8:	4302      	orrs	r2, r0
 80020ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020be:	059f      	lsls	r7, r3, #22
 80020c0:	d508      	bpl.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020c2:	496f      	ldr	r1, [pc, #444]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020c4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80020c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020ca:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80020ce:	4302      	orrs	r2, r0
 80020d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020d4:	055e      	lsls	r6, r3, #21
 80020d6:	d508      	bpl.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020d8:	4969      	ldr	r1, [pc, #420]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020da:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80020dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020e0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80020e4:	4302      	orrs	r2, r0
 80020e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ea:	0658      	lsls	r0, r3, #25
 80020ec:	d508      	bpl.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ee:	4964      	ldr	r1, [pc, #400]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80020f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020fa:	4302      	orrs	r2, r0
 80020fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002100:	0619      	lsls	r1, r3, #24
 8002102:	d508      	bpl.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002104:	495e      	ldr	r1, [pc, #376]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002106:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002108:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800210c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002110:	4302      	orrs	r2, r0
 8002112:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002116:	05da      	lsls	r2, r3, #23
 8002118:	d508      	bpl.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800211a:	4959      	ldr	r1, [pc, #356]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800211c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800211e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002122:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002126:	4302      	orrs	r2, r0
 8002128:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800212c:	049b      	lsls	r3, r3, #18
 800212e:	d50f      	bpl.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002130:	4a53      	ldr	r2, [pc, #332]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002132:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002134:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002138:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800213c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800213e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002142:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002146:	d164      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002148:	68d3      	ldr	r3, [r2, #12]
 800214a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	031f      	lsls	r7, r3, #12
 8002154:	d50f      	bpl.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002156:	4a4a      	ldr	r2, [pc, #296]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002158:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800215a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800215e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002162:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002164:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800216c:	d15c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800216e:	68d3      	ldr	r3, [r2, #12]
 8002170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002174:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	035e      	lsls	r6, r3, #13
 800217a:	d50f      	bpl.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800217c:	4a40      	ldr	r2, [pc, #256]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800217e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002180:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002184:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002188:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800218a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800218e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002192:	d154      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002194:	68d3      	ldr	r3, [r2, #12]
 8002196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800219a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	0458      	lsls	r0, r3, #17
 80021a0:	d512      	bpl.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021a2:	4937      	ldr	r1, [pc, #220]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021a4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80021a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021aa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80021ae:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021b0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021b8:	d14c      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021ba:	2102      	movs	r1, #2
 80021bc:	1d20      	adds	r0, r4, #4
 80021be:	f7ff fd6d 	bl	8001c9c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80021c2:	2800      	cmp	r0, #0
 80021c4:	bf18      	it	ne
 80021c6:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021c8:	6822      	ldr	r2, [r4, #0]
 80021ca:	0411      	lsls	r1, r2, #16
 80021cc:	d508      	bpl.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021ce:	492c      	ldr	r1, [pc, #176]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021d0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80021d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021da:	4303      	orrs	r3, r0
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021e0:	03d3      	lsls	r3, r2, #15
 80021e2:	d509      	bpl.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021e6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80021ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021f2:	430b      	orrs	r3, r1
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80021f8:	4628      	mov	r0, r5
 80021fa:	b002      	add	sp, #8
 80021fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7fe fcba 	bl	8000b78 <HAL_GetTick>
 8002204:	1b40      	subs	r0, r0, r5
 8002206:	4548      	cmp	r0, r9
 8002208:	f67f aeec 	bls.w	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800220c:	e70c      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800220e:	4635      	mov	r5, r6
 8002210:	e712      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002212:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002216:	d19b      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002218:	2101      	movs	r1, #1
 800221a:	1d20      	adds	r0, r4, #4
 800221c:	f7ff fd3e 	bl	8001c9c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002220:	2800      	cmp	r0, #0
 8002222:	bf18      	it	ne
 8002224:	4605      	movne	r5, r0
 8002226:	e793      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002228:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800222c:	d1a3      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222e:	2101      	movs	r1, #1
 8002230:	1d20      	adds	r0, r4, #4
 8002232:	f7ff fd33 	bl	8001c9c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002236:	2800      	cmp	r0, #0
 8002238:	bf18      	it	ne
 800223a:	4605      	movne	r5, r0
 800223c:	e79b      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800223e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002242:	d1ab      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002244:	2101      	movs	r1, #1
 8002246:	1d20      	adds	r0, r4, #4
 8002248:	f7ff fd28 	bl	8001c9c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800224c:	2800      	cmp	r0, #0
 800224e:	bf18      	it	ne
 8002250:	4605      	movne	r5, r0
 8002252:	e7a3      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002254:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002258:	d1b6      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800225a:	2102      	movs	r1, #2
 800225c:	f104 0020 	add.w	r0, r4, #32
 8002260:	f7ff fdaa 	bl	8001db8 <RCCEx_PLLSAI2_Config>
 8002264:	e7ad      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226c:	65bb      	str	r3, [r7, #88]	; 0x58
 800226e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002278:	f04f 0801 	mov.w	r8, #1
 800227c:	e67f      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0xca>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_SPI_MspInit>:
 8002284:	4770      	bx	lr

08002286 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002286:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002288:	4604      	mov	r4, r0
 800228a:	2800      	cmp	r0, #0
 800228c:	d04a      	beq.n	8002324 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002292:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002296:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800229a:	b91b      	cbnz	r3, 80022a4 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800229c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022a0:	f7ff fff0 	bl	8002284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022a4:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022a6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80022a8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80022ac:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022ae:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80022b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80022b8:	600b      	str	r3, [r1, #0]
 80022ba:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022be:	d92e      	bls.n	800231e <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022c0:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022c2:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c6:	bf18      	it	ne
 80022c8:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80022ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022cc:	b92b      	cbnz	r3, 80022da <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022ce:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80022d2:	bf8c      	ite	hi
 80022d4:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80022d6:	2301      	movls	r3, #1
 80022d8:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80022da:	68a6      	ldr	r6, [r4, #8]
 80022dc:	6863      	ldr	r3, [r4, #4]
 80022de:	69a5      	ldr	r5, [r4, #24]
 80022e0:	4333      	orrs	r3, r6
 80022e2:	6926      	ldr	r6, [r4, #16]
 80022e4:	4333      	orrs	r3, r6
 80022e6:	6966      	ldr	r6, [r4, #20]
 80022e8:	4333      	orrs	r3, r6
 80022ea:	69e6      	ldr	r6, [r4, #28]
 80022ec:	4333      	orrs	r3, r6
 80022ee:	6a26      	ldr	r6, [r4, #32]
 80022f0:	4333      	orrs	r3, r6
 80022f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022f4:	4333      	orrs	r3, r6
 80022f6:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80022fa:	4333      	orrs	r3, r6
 80022fc:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80022fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002300:	431a      	orrs	r2, r3
 8002302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002304:	0c2d      	lsrs	r5, r5, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	f005 0504 	and.w	r5, r5, #4
 800230c:	432a      	orrs	r2, r5
 800230e:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8002310:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002312:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002314:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002316:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002318:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 800231c:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800231e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002322:	e7d0      	b.n	80022c6 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002324:	2001      	movs	r0, #1
}
 8002326:	bd70      	pop	{r4, r5, r6, pc}

08002328 <Read>:
}



static void Read(uint8_t *buf)
{
 8002328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	MemAddress = 0x80;    //AMG88xx_T01L
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <Read+0x24>)
 800232c:	2280      	movs	r2, #128	; 0x80
 800232e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c3, DevAddress, MemAddress,  sizeof(MemAddress) , (uint8_t*)buf,  128 , HAL_MAX_DELAY);//sizeof(pixdata)
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <Read+0x28>)
 8002332:	8819      	ldrh	r1, [r3, #0]
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
 800233c:	2301      	movs	r3, #1
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <Read+0x2c>)
 8002340:	f7fe ffdc 	bl	80012fc <HAL_I2C_Mem_Read>
	//printf("The raw data in AMG8833 BUFFER are: \n ");
	//for(int i=0;i<128;i++)
	//{
	//	printf("%02X ", buf[i]);
	//}
}
 8002344:	b005      	add	sp, #20
 8002346:	f85d fb04 	ldr.w	pc, [sp], #4
 800234a:	bf00      	nop
 800234c:	200001fc 	.word	0x200001fc
 8002350:	20000008 	.word	0x20000008
 8002354:	20000244 	.word	0x20000244

08002358 <AMG8833_Init>:
{
 8002358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress),Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY)) //AMG88xx_NORMAL_MODE;
 800235c:	4f26      	ldr	r7, [pc, #152]	; (80023f8 <AMG8833_Init+0xa0>)
	Txbuff[0]=0x00;               //cmd to send
 800235e:	4d27      	ldr	r5, [pc, #156]	; (80023fc <AMG8833_Init+0xa4>)
	MemAddress = AMG88xx_PCTL;    //PCTL
 8002360:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002404 <AMG8833_Init+0xac>
{
 8002364:	b086      	sub	sp, #24
	MemAddress = AMG88xx_PCTL;    //PCTL
 8002366:	f04f 0900 	mov.w	r9, #0
	if (HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress),Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY)) //AMG88xx_NORMAL_MODE;
 800236a:	2401      	movs	r4, #1
 800236c:	f04f 36ff 	mov.w	r6, #4294967295
	I2C3_initaliztion();
 8002370:	f000 fe72 	bl	8003058 <I2C3_initaliztion>
	if (HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress),Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY)) //AMG88xx_NORMAL_MODE;
 8002374:	8839      	ldrh	r1, [r7, #0]
 8002376:	4822      	ldr	r0, [pc, #136]	; (8002400 <AMG8833_Init+0xa8>)
 8002378:	9602      	str	r6, [sp, #8]
 800237a:	9401      	str	r4, [sp, #4]
 800237c:	9500      	str	r5, [sp, #0]
 800237e:	4623      	mov	r3, r4
 8002380:	464a      	mov	r2, r9
	MemAddress = AMG88xx_PCTL;    //PCTL
 8002382:	f888 9000 	strb.w	r9, [r8]
	Txbuff[0]=0x00;               //cmd to send
 8002386:	f885 9000 	strb.w	r9, [r5]
	if (HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress),Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY)) //AMG88xx_NORMAL_MODE;
 800238a:	f7fe ff00 	bl	800118e <HAL_I2C_Mem_Write>
 800238e:	4682      	mov	sl, r0
 8002390:	b128      	cbz	r0, 800239e <AMG8833_Init+0x46>


static void Error_Handler(void)
{

	volatile int i = 0;
 8002392:	f8cd 9014 	str.w	r9, [sp, #20]
	for(;;) i+=1;
 8002396:	9b05      	ldr	r3, [sp, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	9305      	str	r3, [sp, #20]
 800239c:	e7fb      	b.n	8002396 <AMG8833_Init+0x3e>
	Txbuff[0]=0x3F;
 800239e:	233f      	movs	r3, #63	; 0x3f
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY); //AMG88xx_INITIAL_RESET;
 80023a0:	8839      	ldrh	r1, [r7, #0]
	Txbuff[0]=0x3F;
 80023a2:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY); //AMG88xx_INITIAL_RESET;
 80023a4:	4622      	mov	r2, r4
 80023a6:	4623      	mov	r3, r4
 80023a8:	9602      	str	r6, [sp, #8]
 80023aa:	9401      	str	r4, [sp, #4]
 80023ac:	9500      	str	r5, [sp, #0]
 80023ae:	4814      	ldr	r0, [pc, #80]	; (8002400 <AMG8833_Init+0xa8>)
	MemAddress = AMG88xx_RST;    //RST
 80023b0:	f888 4000 	strb.w	r4, [r8]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY); //AMG88xx_INITIAL_RESET;
 80023b4:	f7fe feeb 	bl	800118e <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY); //disable INTC;
 80023b8:	8839      	ldrh	r1, [r7, #0]
 80023ba:	4811      	ldr	r0, [pc, #68]	; (8002400 <AMG8833_Init+0xa8>)
 80023bc:	9602      	str	r6, [sp, #8]
	MemAddress = AMG88xx_INTC;    //INTC
 80023be:	2203      	movs	r2, #3
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY); //disable INTC;
 80023c0:	4623      	mov	r3, r4
 80023c2:	9401      	str	r4, [sp, #4]
 80023c4:	9500      	str	r5, [sp, #0]
	MemAddress = AMG88xx_INTC;    //INTC
 80023c6:	f888 2000 	strb.w	r2, [r8]
	Txbuff[0]=AMG88xx_INT_DISABLED;
 80023ca:	f885 a000 	strb.w	sl, [r5]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY); //disable INTC;
 80023ce:	f7fe fede 	bl	800118e <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress),Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY); //AMG88xx_FPS_10;
 80023d2:	8839      	ldrh	r1, [r7, #0]
 80023d4:	480a      	ldr	r0, [pc, #40]	; (8002400 <AMG8833_Init+0xa8>)
 80023d6:	9602      	str	r6, [sp, #8]
	MemAddress = AMG88xx_FPSC;    //FRR
 80023d8:	2202      	movs	r2, #2
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress),Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY); //AMG88xx_FPS_10;
 80023da:	4623      	mov	r3, r4
 80023dc:	9401      	str	r4, [sp, #4]
 80023de:	9500      	str	r5, [sp, #0]
	MemAddress = AMG88xx_FPSC;    //FRR
 80023e0:	f888 2000 	strb.w	r2, [r8]
	Txbuff[0]=AMG88xx_FPS_10;
 80023e4:	f885 a000 	strb.w	sl, [r5]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress),Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY); //AMG88xx_FPS_10;
 80023e8:	f7fe fed1 	bl	800118e <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	f7fe fbc9 	bl	8000b84 <HAL_Delay>
}
 80023f2:	b006      	add	sp, #24
 80023f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023f8:	20000008 	.word	0x20000008
 80023fc:	200001fd 	.word	0x200001fd
 8002400:	20000244 	.word	0x20000244
 8002404:	200001fc 	.word	0x200001fc

08002408 <AMG8833_Read_pixdels>:
{
 8002408:	b510      	push	{r4, lr}
 800240a:	4604      	mov	r4, r0
 800240c:	b0a0      	sub	sp, #128	; 0x80
	  Read(rawArray);
 800240e:	4668      	mov	r0, sp
 8002410:	f7ff ff8a 	bl	8002328 <Read>
	while((rawArray[0]==0)&&(rawArray[1]==0)&&(rawArray[2]==0)&&(rawArray[3]==0))
 8002414:	f89d 2000 	ldrb.w	r2, [sp]
 8002418:	b95a      	cbnz	r2, 8002432 <AMG8833_Read_pixdels+0x2a>
 800241a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800241e:	b933      	cbnz	r3, 800242e <AMG8833_Read_pixdels+0x26>
 8002420:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002424:	b932      	cbnz	r2, 8002434 <AMG8833_Read_pixdels+0x2c>
 8002426:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0ef      	beq.n	800240e <AMG8833_Read_pixdels+0x6>
 800242e:	4613      	mov	r3, r2
 8002430:	e000      	b.n	8002434 <AMG8833_Read_pixdels+0x2c>
 8002432:	2300      	movs	r3, #0
		converted = int12ToFloat(recast) * 0.25;
 8002434:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
		buf[(8*((63-i)/8))+(i%8)] = converted;
 8002438:	f1c3 013f 	rsb	r1, r3, #63	; 0x3f
 800243c:	f003 0207 	and.w	r2, r3, #7
 8002440:	f021 0107 	bic.w	r1, r1, #7
 8002444:	4411      	add	r1, r2
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
 8002446:	eb0d 0243 	add.w	r2, sp, r3, lsl #1
		buf[(8*((63-i)/8))+(i%8)] = converted;
 800244a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
 800244e:	7850      	ldrb	r0, [r2, #1]
 8002450:	f81d 2013 	ldrb.w	r2, [sp, r3, lsl #1]
	int16_t sVal = (val << 4); //shift to left so that sign bit of 12 bit integer number is placed on sign bit of 16 bit signed integer number
 8002454:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return sVal >> 4;          //shift back the signed number, return converts to float
 8002458:	f342 020b 	sbfx	r2, r2, #0, #12
 800245c:	ee07 2a90 	vmov	s15, r2
 8002460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for(int i=0; i<64; i++){
 8002464:	3301      	adds	r3, #1
		converted = int12ToFloat(recast) * 0.25;
 8002466:	ee67 7a87 	vmul.f32	s15, s15, s14
	for(int i=0; i<64; i++){
 800246a:	2b40      	cmp	r3, #64	; 0x40
		buf[(8*((63-i)/8))+(i%8)] = converted;
 800246c:	edc1 7a00 	vstr	s15, [r1]
	for(int i=0; i<64; i++){
 8002470:	d1e2      	bne.n	8002438 <AMG8833_Read_pixdels+0x30>
}
 8002472:	b020      	add	sp, #128	; 0x80
 8002474:	bd10      	pop	{r4, pc}
	...

08002478 <AMG8833_Read_thermistor>:
{
 8002478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 MemAddress = 0x0E;    //AMG88xx_TTHL
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <AMG8833_Read_thermistor+0x2c>)
	 thermistor=0;
 800247c:	4c0a      	ldr	r4, [pc, #40]	; (80024a8 <AMG8833_Read_thermistor+0x30>)
	 HAL_I2C_Mem_Read(&hi2c3, DevAddress, MemAddress,  sizeof(MemAddress) , (uint8_t*)&thermistor, sizeof(thermistor), HAL_MAX_DELAY);
 800247e:	480b      	ldr	r0, [pc, #44]	; (80024ac <AMG8833_Read_thermistor+0x34>)
	 MemAddress = 0x0E;    //AMG88xx_TTHL
 8002480:	220e      	movs	r2, #14
 8002482:	701a      	strb	r2, [r3, #0]
	 thermistor=0;
 8002484:	2300      	movs	r3, #0
 8002486:	8023      	strh	r3, [r4, #0]
	 HAL_I2C_Mem_Read(&hi2c3, DevAddress, MemAddress,  sizeof(MemAddress) , (uint8_t*)&thermistor, sizeof(thermistor), HAL_MAX_DELAY);
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <AMG8833_Read_thermistor+0x38>)
 800248a:	8819      	ldrh	r1, [r3, #0]
 800248c:	9400      	str	r4, [sp, #0]
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2302      	movs	r3, #2
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2301      	movs	r3, #1
 800249a:	f7fe ff2f 	bl	80012fc <HAL_I2C_Mem_Read>
}
 800249e:	8820      	ldrh	r0, [r4, #0]
 80024a0:	b004      	add	sp, #16
 80024a2:	bd10      	pop	{r4, pc}
 80024a4:	200001fc 	.word	0x200001fc
 80024a8:	2000021c 	.word	0x2000021c
 80024ac:	20000244 	.word	0x20000244
 80024b0:	20000008 	.word	0x20000008
 80024b4:	00000000 	.word	0x00000000

080024b8 <Set_interrupt>:
{
 80024b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	volatile int upperlimit = (upper * 4);//*quarter_deg;
 80024bc:	eef0 7a40 	vmov.f32	s15, s0
 80024c0:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
	volatile int lowerlimit = (lower * 4);//*quarter_deg;
 80024c4:	eefe 0acf 	vcvt.s32.f32	s1, s1, #2
{
 80024c8:	b088      	sub	sp, #32
	volatile int hys_level  = ((upper*0.95)* 4);
 80024ca:	ee10 0a10 	vmov	r0, s0
	volatile int upperlimit = (upper * 4);//*quarter_deg;
 80024ce:	edcd 7a05 	vstr	s15, [sp, #20]
	volatile int lowerlimit = (lower * 4);//*quarter_deg;
 80024d2:	edcd 0a06 	vstr	s1, [sp, #24]
	volatile int hys_level  = ((upper*0.95)* 4);
 80024d6:	f7fe f82f 	bl	8000538 <__aeabi_f2d>
 80024da:	a339      	add	r3, pc, #228	; (adr r3, 80025c0 <Set_interrupt+0x108>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fe f87e 	bl	80005e0 <__aeabi_dmul>
 80024e4:	2200      	movs	r2, #0
 80024e6:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <Set_interrupt+0xf8>)
	Txbuff[0]=upperlimit&0xFF;
 80024e8:	4d32      	ldr	r5, [pc, #200]	; (80025b4 <Set_interrupt+0xfc>)
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 80024ea:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80025c8 <Set_interrupt+0x110>
 80024ee:	4f32      	ldr	r7, [pc, #200]	; (80025b8 <Set_interrupt+0x100>)
    MemAddress = AMG88xx_INTHL;
 80024f0:	4e32      	ldr	r6, [pc, #200]	; (80025bc <Set_interrupt+0x104>)
	volatile int hys_level  = ((upper*0.95)* 4);
 80024f2:	f7fe f875 	bl	80005e0 <__aeabi_dmul>
 80024f6:	f7fe fa85 	bl	8000a04 <__aeabi_d2iz>
 80024fa:	9007      	str	r0, [sp, #28]
	Txbuff[0]=upperlimit&0xFF;
 80024fc:	9b05      	ldr	r3, [sp, #20]
 80024fe:	702b      	strb	r3, [r5, #0]
	Txbuff[1]=((upperlimit&0x0F00) >> 8);
 8002500:	9b05      	ldr	r3, [sp, #20]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 8002502:	f8b9 1000 	ldrh.w	r1, [r9]
 8002506:	9500      	str	r5, [sp, #0]
 8002508:	2401      	movs	r4, #1
 800250a:	f04f 38ff 	mov.w	r8, #4294967295
	Txbuff[1]=((upperlimit&0x0F00) >> 8);
 800250e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002512:	706b      	strb	r3, [r5, #1]
    MemAddress = AMG88xx_INTHL;
 8002514:	2208      	movs	r2, #8
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 8002516:	4623      	mov	r3, r4
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[1], 1, HAL_MAX_DELAY);
 8002518:	eb05 0a04 	add.w	sl, r5, r4
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 800251c:	f8cd 8008 	str.w	r8, [sp, #8]
 8002520:	9401      	str	r4, [sp, #4]
 8002522:	4638      	mov	r0, r7
    MemAddress = AMG88xx_INTHL;
 8002524:	7032      	strb	r2, [r6, #0]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 8002526:	f7fe fe32 	bl	800118e <HAL_I2C_Mem_Write>
	MemAddress = AMG88xx_INTHH;
 800252a:	2209      	movs	r2, #9
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[1], 1, HAL_MAX_DELAY);
 800252c:	f8b9 1000 	ldrh.w	r1, [r9]
 8002530:	f8cd 8008 	str.w	r8, [sp, #8]
 8002534:	4623      	mov	r3, r4
 8002536:	9401      	str	r4, [sp, #4]
 8002538:	f8cd a000 	str.w	sl, [sp]
 800253c:	4638      	mov	r0, r7
	MemAddress = AMG88xx_INTHH;
 800253e:	7032      	strb	r2, [r6, #0]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[1], 1, HAL_MAX_DELAY);
 8002540:	f7fe fe25 	bl	800118e <HAL_I2C_Mem_Write>
	Txbuff[0]=lowerlimit&0xFF;
 8002544:	9b06      	ldr	r3, [sp, #24]
 8002546:	702b      	strb	r3, [r5, #0]
	Txbuff[1]=((lowerlimit&0x0F00) >> 8);
 8002548:	9b06      	ldr	r3, [sp, #24]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 800254a:	f8b9 1000 	ldrh.w	r1, [r9]
 800254e:	f8cd 8008 	str.w	r8, [sp, #8]
	Txbuff[1]=((lowerlimit&0x0F00) >> 8);
 8002552:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002556:	706b      	strb	r3, [r5, #1]
	MemAddress = AMG88xx_INTLL;
 8002558:	220a      	movs	r2, #10
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 800255a:	4623      	mov	r3, r4
 800255c:	9401      	str	r4, [sp, #4]
 800255e:	9500      	str	r5, [sp, #0]
 8002560:	4638      	mov	r0, r7
	MemAddress = AMG88xx_INTLL;
 8002562:	7032      	strb	r2, [r6, #0]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 8002564:	f7fe fe13 	bl	800118e <HAL_I2C_Mem_Write>
	MemAddress = AMG88xx_INTLH;
 8002568:	220b      	movs	r2, #11
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[1], 1, HAL_MAX_DELAY);
 800256a:	f8b9 1000 	ldrh.w	r1, [r9]
 800256e:	f8cd 8008 	str.w	r8, [sp, #8]
 8002572:	4623      	mov	r3, r4
 8002574:	9401      	str	r4, [sp, #4]
 8002576:	f8cd a000 	str.w	sl, [sp]
 800257a:	4638      	mov	r0, r7
	MemAddress = AMG88xx_INTLH;
 800257c:	7032      	strb	r2, [r6, #0]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[1], 1, HAL_MAX_DELAY);
 800257e:	f7fe fe06 	bl	800118e <HAL_I2C_Mem_Write>
	Txbuff[0]=hys_level&0xFF;
 8002582:	9b07      	ldr	r3, [sp, #28]
 8002584:	702b      	strb	r3, [r5, #0]
	Txbuff[1]=((hys_level&0x0F00) >> 8);
 8002586:	9b07      	ldr	r3, [sp, #28]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 8002588:	f8b9 1000 	ldrh.w	r1, [r9]
 800258c:	f8cd 8008 	str.w	r8, [sp, #8]
	Txbuff[1]=((hys_level&0x0F00) >> 8);
 8002590:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002594:	706b      	strb	r3, [r5, #1]
	MemAddress = AMG88xx_IHYSL;
 8002596:	220c      	movs	r2, #12
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 8002598:	4623      	mov	r3, r4
 800259a:	9401      	str	r4, [sp, #4]
 800259c:	9500      	str	r5, [sp, #0]
 800259e:	4638      	mov	r0, r7
	MemAddress = AMG88xx_IHYSL;
 80025a0:	7032      	strb	r2, [r6, #0]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), &Txbuff[0], 1, HAL_MAX_DELAY);
 80025a2:	f7fe fdf4 	bl	800118e <HAL_I2C_Mem_Write>
	MemAddress = AMG88xx_IHYSH;
 80025a6:	230d      	movs	r3, #13
 80025a8:	7033      	strb	r3, [r6, #0]
}
 80025aa:	b008      	add	sp, #32
 80025ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025b0:	40100000 	.word	0x40100000
 80025b4:	200001fd 	.word	0x200001fd
 80025b8:	20000244 	.word	0x20000244
 80025bc:	200001fc 	.word	0x200001fc
 80025c0:	66666666 	.word	0x66666666
 80025c4:	3fee6666 	.word	0x3fee6666
 80025c8:	20000008 	.word	0x20000008

080025cc <Enable_interrupt>:
{
 80025cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	MemAddress = AMG88xx_INTC;
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <Enable_interrupt+0x28>)
	Txbuff[0]=0x03;//AMG88xx_ABSOLUTE_VALUE<<1;  // enable INT output and Absolute INT mode
 80025d0:	4809      	ldr	r0, [pc, #36]	; (80025f8 <Enable_interrupt+0x2c>)
	MemAddress = AMG88xx_INTC;
 80025d2:	2203      	movs	r2, #3
 80025d4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <Enable_interrupt+0x30>)
	Txbuff[0]=0x03;//AMG88xx_ABSOLUTE_VALUE<<1;  // enable INT output and Absolute INT mode
 80025d8:	7002      	strb	r2, [r0, #0]
	HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY);
 80025da:	8819      	ldrh	r1, [r3, #0]
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	2301      	movs	r3, #1
 80025e4:	e88d 0009 	stmia.w	sp, {r0, r3}
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <Enable_interrupt+0x34>)
 80025ea:	f7fe fdd0 	bl	800118e <HAL_I2C_Mem_Write>
}
 80025ee:	b005      	add	sp, #20
 80025f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80025f4:	200001fc 	.word	0x200001fc
 80025f8:	200001fd 	.word	0x200001fd
 80025fc:	20000008 	.word	0x20000008
 8002600:	20000244 	.word	0x20000244

08002604 <Clear_interrupt>:
{
 8002604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	MemAddress = AMG88xx_RST;
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <Clear_interrupt+0x2c>)
 8002608:	2301      	movs	r3, #1
 800260a:	7013      	strb	r3, [r2, #0]
    Txbuff[0]  =  AMG88xx_FLAG_RESET ;
 800260c:	4a09      	ldr	r2, [pc, #36]	; (8002634 <Clear_interrupt+0x30>)
 800260e:	2130      	movs	r1, #48	; 0x30
 8002610:	7011      	strb	r1, [r2, #0]
    HAL_I2C_Mem_Write(&hi2c3,DevAddress,MemAddress, sizeof(MemAddress), Txbuff, sizeof(Txbuff[0]) , HAL_MAX_DELAY);
 8002612:	4909      	ldr	r1, [pc, #36]	; (8002638 <Clear_interrupt+0x34>)
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	8809      	ldrh	r1, [r1, #0]
 800261a:	9002      	str	r0, [sp, #8]
 800261c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002620:	4806      	ldr	r0, [pc, #24]	; (800263c <Clear_interrupt+0x38>)
 8002622:	461a      	mov	r2, r3
 8002624:	f7fe fdb3 	bl	800118e <HAL_I2C_Mem_Write>
}
 8002628:	b005      	add	sp, #20
 800262a:	f85d fb04 	ldr.w	pc, [sp], #4
 800262e:	bf00      	nop
 8002630:	200001fc 	.word	0x200001fc
 8002634:	200001fd 	.word	0x200001fd
 8002638:	20000008 	.word	0x20000008
 800263c:	20000244 	.word	0x20000244

08002640 <getInterrupt>:
{
 8002640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	MemAddress=AMG88xx_INT_OFFSET;
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <getInterrupt+0x28>)
 8002644:	2210      	movs	r2, #16
 8002646:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c3, DevAddress, MemAddress,  sizeof(MemAddress) , buf,  bytesToRead , HAL_MAX_DELAY);//sizeof(pixdata)
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <getInterrupt+0x2c>)
 800264a:	8819      	ldrh	r1, [r3, #0]
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	9302      	str	r3, [sp, #8]
 8002652:	2308      	movs	r3, #8
 8002654:	e88d 0009 	stmia.w	sp, {r0, r3}
 8002658:	2301      	movs	r3, #1
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <getInterrupt+0x30>)
 800265c:	f7fe fe4e 	bl	80012fc <HAL_I2C_Mem_Read>
}
 8002660:	b005      	add	sp, #20
 8002662:	f85d fb04 	ldr.w	pc, [sp], #4
 8002666:	bf00      	nop
 8002668:	200001fc 	.word	0x200001fc
 800266c:	20000008 	.word	0x20000008
 8002670:	20000244 	.word	0x20000244

08002674 <writeCmd>:



void writeCmd(uint8_t cmd)

{
 8002674:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_RS.port,    LCD_RS.pin,    GPIO_PIN_RESET);   //RS->0
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <writeCmd+0x64>)
	HAL_GPIO_WritePin(SPI_1.Nss.port, SPI_1.Nss.pin, GPIO_PIN_RESET);   //CS->0
 8002678:	4c18      	ldr	r4, [pc, #96]	; (80026dc <writeCmd+0x68>)
	HAL_GPIO_WritePin(LCD_RS.port,    LCD_RS.pin,    GPIO_PIN_RESET);   //RS->0
 800267a:	8819      	ldrh	r1, [r3, #0]
{
 800267c:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(LCD_RS.port,    LCD_RS.pin,    GPIO_PIN_RESET);   //RS->0
 800267e:	2200      	movs	r2, #0
 8002680:	6858      	ldr	r0, [r3, #4]
 8002682:	f7fe fbdf 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_1.Nss.port, SPI_1.Nss.pin, GPIO_PIN_RESET);   //CS->0
 8002686:	2200      	movs	r2, #0
 8002688:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 800268c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800268e:	f7fe fbd9 	bl	8000e44 <HAL_GPIO_WritePin>
	SPI_transmit_8bit(&SPI_Handle, cmd );
 8002692:	4629      	mov	r1, r5
	//HAL_SPI_Transmit(&SPI_Handle,&cmd,sizeof(cmd),10);  //1byte
	HAL_GPIO_WritePin(LCD_LCK.port, LCD_LCK.pin, GPIO_PIN_SET);        //LCK->1
 8002694:	4d12      	ldr	r5, [pc, #72]	; (80026e0 <writeCmd+0x6c>)
	SPI_transmit_8bit(&SPI_Handle, cmd );
 8002696:	4813      	ldr	r0, [pc, #76]	; (80026e4 <writeCmd+0x70>)
 8002698:	f000 fef0 	bl	800347c <SPI_transmit_8bit>
	HAL_GPIO_WritePin(LCD_LCK.port, LCD_LCK.pin, GPIO_PIN_SET);        //LCK->1
 800269c:	8829      	ldrh	r1, [r5, #0]
 800269e:	6868      	ldr	r0, [r5, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f7fe fbcf 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_LCK.port, LCD_LCK.pin, GPIO_PIN_RESET);      //LCK->0
 80026a6:	8829      	ldrh	r1, [r5, #0]
 80026a8:	6868      	ldr	r0, [r5, #4]
	HAL_GPIO_WritePin(LCD_WR.port, LCD_WR.pin, GPIO_PIN_RESET);        //WR->0
 80026aa:	4d0f      	ldr	r5, [pc, #60]	; (80026e8 <writeCmd+0x74>)
	HAL_GPIO_WritePin(LCD_LCK.port, LCD_LCK.pin, GPIO_PIN_RESET);      //LCK->0
 80026ac:	2200      	movs	r2, #0
 80026ae:	f7fe fbc9 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR.port, LCD_WR.pin, GPIO_PIN_RESET);        //WR->0
 80026b2:	8829      	ldrh	r1, [r5, #0]
 80026b4:	6868      	ldr	r0, [r5, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f7fe fbc4 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR.port, LCD_WR.pin, GPIO_PIN_SET);          //WR->1
 80026bc:	8829      	ldrh	r1, [r5, #0]
 80026be:	6868      	ldr	r0, [r5, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f7fe fbbf 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_1.Nss.port, SPI_1.Nss.pin, GPIO_PIN_SET);    //CS->1
 80026c6:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 80026ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026cc:	2201      	movs	r2, #1
}
 80026ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(SPI_1.Nss.port, SPI_1.Nss.pin, GPIO_PIN_SET);    //CS->1
 80026d2:	f7fe bbb7 	b.w	8000e44 <HAL_GPIO_WritePin>
 80026d6:	bf00      	nop
 80026d8:	20000098 	.word	0x20000098
 80026dc:	20000108 	.word	0x20000108
 80026e0:	2000007c 	.word	0x2000007c
 80026e4:	20009bd8 	.word	0x20009bd8
 80026e8:	200000b4 	.word	0x200000b4

080026ec <showText>:



void showText(char* text)
{
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
	setTextSize(1);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f000 fa67 	bl	8002bc4 <setTextSize>
	setTextColor(0xF800);       //set text color to white
 80026f6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80026fa:	f000 fa6f 	bl	8002bdc <setTextColor>
	setTextBackground(0X0000);  //set text background to black
 80026fe:	2000      	movs	r0, #0
 8002700:	f000 fa66 	bl	8002bd0 <setTextBackground>
	Display(128,128);
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	4608      	mov	r0, r1
 8002708:	f000 fa1c 	bl	8002b44 <Display>
	setCursor(35, 100);
 800270c:	2023      	movs	r0, #35	; 0x23
 800270e:	2164      	movs	r1, #100	; 0x64
 8002710:	f000 fa3e 	bl	8002b90 <setCursor>
	print1(text);
 8002714:	4620      	mov	r0, r4
}
 8002716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	print1(text);
 800271a:	f000 ba65 	b.w	8002be8 <print1>
	...

08002720 <writeDatBytes>:
}


void writeDatBytes(uint8_t* pDat, uint16_t count)
{
	HAL_GPIO_WritePin(LCD_RS.port, LCD_RS.pin, GPIO_PIN_SET);         //RS->1
 8002720:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <writeDatBytes+0xb4>)
{
 8002722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_GPIO_WritePin(SPI_1.Nss.port, SPI_1.Nss.pin, GPIO_PIN_RESET);   //CS->0
 8002726:	4c2c      	ldr	r4, [pc, #176]	; (80027d8 <writeDatBytes+0xb8>)
	SPI_Handle.Instance->CR1|=SPI_CR1_SPE;
 8002728:	4f2c      	ldr	r7, [pc, #176]	; (80027dc <writeDatBytes+0xbc>)
	HAL_GPIO_WritePin(LCD_RS.port, LCD_RS.pin, GPIO_PIN_SET);         //RS->1
 800272a:	2201      	movs	r2, #1
{
 800272c:	4606      	mov	r6, r0
 800272e:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(LCD_RS.port, LCD_RS.pin, GPIO_PIN_SET);         //RS->1
 8002730:	6858      	ldr	r0, [r3, #4]
 8002732:	8819      	ldrh	r1, [r3, #0]
 8002734:	f7fe fb86 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_1.Nss.port, SPI_1.Nss.pin, GPIO_PIN_RESET);   //CS->0
 8002738:	2200      	movs	r2, #0
 800273a:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 800273e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002740:	f7fe fb80 	bl	8000e44 <HAL_GPIO_WritePin>
	SPI_Handle.Instance->CR1|=SPI_CR1_SPE;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274c:	601a      	str	r2, [r3, #0]
	while((SPI_Handle.Instance->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	07d0      	lsls	r0, r2, #31
 8002752:	d435      	bmi.n	80027c0 <writeDatBytes+0xa0>
 8002754:	3d01      	subs	r5, #1
		(void)SPI_Handle.Instance->DR;
		while((SPI_Handle.Instance->SR & SPI_SR_BSY) == SPI_SR_BSY)
		{
		}
		//HAL_SPI_Transmit(&SPI_Handle, pDat, sizeof(*pDat), 10);
		HAL_GPIO_WritePin(LCD_LCK.port, LCD_LCK.pin, GPIO_PIN_SET);        //LCK->1
 8002756:	f8df a088 	ldr.w	sl, [pc, #136]	; 80027e0 <writeDatBytes+0xc0>
		HAL_GPIO_WritePin(LCD_LCK.port, LCD_LCK.pin, GPIO_PIN_RESET);      //LCK->0
		HAL_GPIO_WritePin(LCD_WR.port,  LCD_WR.pin,  GPIO_PIN_RESET);      //WR->0
 800275a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80027e4 <writeDatBytes+0xc4>
 800275e:	f106 38ff 	add.w	r8, r6, #4294967295
 8002762:	4435      	add	r5, r6
	while(count --)
 8002764:	45a8      	cmp	r8, r5
 8002766:	d02d      	beq.n	80027c4 <writeDatBytes+0xa4>
		while((SPI_Handle.Instance->SR & SPI_SR_TXE) != SPI_SR_TXE)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	0791      	lsls	r1, r2, #30
 800276e:	d5fc      	bpl.n	800276a <writeDatBytes+0x4a>
		*((__IO uint8_t *)&SPI_Handle.Instance->DR)=*pDat;
 8002770:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8002774:	731a      	strb	r2, [r3, #12]
		while((SPI_Handle.Instance->SR & SPI_SR_RXNE) != SPI_SR_RXNE)
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	07d2      	lsls	r2, r2, #31
 800277a:	d5fc      	bpl.n	8002776 <writeDatBytes+0x56>
		(void)SPI_Handle.Instance->DR;
 800277c:	68da      	ldr	r2, [r3, #12]
		while((SPI_Handle.Instance->SR & SPI_SR_BSY) == SPI_SR_BSY)
 800277e:	689e      	ldr	r6, [r3, #8]
 8002780:	f016 0680 	ands.w	r6, r6, #128	; 0x80
 8002784:	d1fb      	bne.n	800277e <writeDatBytes+0x5e>
		HAL_GPIO_WritePin(LCD_LCK.port, LCD_LCK.pin, GPIO_PIN_SET);        //LCK->1
 8002786:	f8ba 1000 	ldrh.w	r1, [sl]
 800278a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f7fe fb58 	bl	8000e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_LCK.port, LCD_LCK.pin, GPIO_PIN_RESET);      //LCK->0
 8002794:	4632      	mov	r2, r6
 8002796:	f8ba 1000 	ldrh.w	r1, [sl]
 800279a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800279e:	f7fe fb51 	bl	8000e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_WR.port,  LCD_WR.pin,  GPIO_PIN_RESET);      //WR->0
 80027a2:	4632      	mov	r2, r6
 80027a4:	f8b9 1000 	ldrh.w	r1, [r9]
 80027a8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80027ac:	f7fe fb4a 	bl	8000e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_WR.port,  LCD_WR.pin,  GPIO_PIN_SET);        //WR->1
 80027b0:	2201      	movs	r2, #1
 80027b2:	f8b9 1000 	ldrh.w	r1, [r9]
 80027b6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80027ba:	f7fe fb43 	bl	8000e44 <HAL_GPIO_WritePin>
 80027be:	e7d1      	b.n	8002764 <writeDatBytes+0x44>
		(void)SPI_Handle.Instance->DR;
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	e7c4      	b.n	800274e <writeDatBytes+0x2e>
		pDat ++;
	}
	HAL_GPIO_WritePin(SPI_1.Nss.port, SPI_1.Nss.pin, GPIO_PIN_SET);    //CS->1
 80027c4:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 80027c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027ca:	2201      	movs	r2, #1
}
 80027cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_GPIO_WritePin(SPI_1.Nss.port, SPI_1.Nss.pin, GPIO_PIN_SET);    //CS->1
 80027d0:	f7fe bb38 	b.w	8000e44 <HAL_GPIO_WritePin>
 80027d4:	20000098 	.word	0x20000098
 80027d8:	20000108 	.word	0x20000108
 80027dc:	20009bd8 	.word	0x20009bd8
 80027e0:	2000007c 	.word	0x2000007c
 80027e4:	200000b4 	.word	0x200000b4

080027e8 <writeDat>:
{
 80027e8:	b507      	push	{r0, r1, r2, lr}
 80027ea:	ab02      	add	r3, sp, #8
	writeDatBytes(&dat,sizeof(dat));
 80027ec:	2101      	movs	r1, #1
{
 80027ee:	f803 0d01 	strb.w	r0, [r3, #-1]!
	writeDatBytes(&dat,sizeof(dat));
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff94 	bl	8002720 <writeDatBytes>
}
 80027f8:	b003      	add	sp, #12
 80027fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002800 <LCD_Init>:
{
 8002800:	b510      	push	{r4, lr}
	  HAL_GPIO_WritePin(LCD_LCK.port,   LCD_LCK.pin,  GPIO_PIN_RESET);     //LCK->0
 8002802:	4c8b      	ldr	r4, [pc, #556]	; (8002a30 <LCD_Init+0x230>)
 8002804:	2200      	movs	r2, #0
 8002806:	8821      	ldrh	r1, [r4, #0]
 8002808:	6860      	ldr	r0, [r4, #4]
 800280a:	f7fe fb1b 	bl	8000e44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI_1.Nss.port, SPI_1.Nss.pin, GPIO_PIN_SET);      //CS->1
 800280e:	4b89      	ldr	r3, [pc, #548]	; (8002a34 <LCD_Init+0x234>)
 8002810:	2201      	movs	r2, #1
 8002812:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
 8002816:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002818:	f7fe fb14 	bl	8000e44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LCD_RS.port,    LCD_RS.pin,    GPIO_PIN_SET);      //RS->1
 800281c:	4b86      	ldr	r3, [pc, #536]	; (8002a38 <LCD_Init+0x238>)
 800281e:	2201      	movs	r2, #1
 8002820:	8819      	ldrh	r1, [r3, #0]
 8002822:	6858      	ldr	r0, [r3, #4]
 8002824:	f7fe fb0e 	bl	8000e44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LCD_WR.port,    LCD_WR.pin,    GPIO_PIN_SET);      //WR->1
 8002828:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <LCD_Init+0x23c>)
 800282a:	2201      	movs	r2, #1
 800282c:	8819      	ldrh	r1, [r3, #0]
 800282e:	6858      	ldr	r0, [r3, #4]
 8002830:	f7fe fb08 	bl	8000e44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LCD_LCK.port,   LCD_LCK.pin,   GPIO_PIN_SET);      //CLK->1
 8002834:	8821      	ldrh	r1, [r4, #0]
 8002836:	6860      	ldr	r0, [r4, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f7fe fb03 	bl	8000e44 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800283e:	2032      	movs	r0, #50	; 0x32
 8002840:	f7fe f9a0 	bl	8000b84 <HAL_Delay>
	  writeCmd(0xd7);                 //AutoLoadSet
 8002844:	20d7      	movs	r0, #215	; 0xd7
 8002846:	f7ff ff15 	bl	8002674 <writeCmd>
	  writeDat(0x9f);                 //D4->1: Disable EEPROM auto read,
 800284a:	209f      	movs	r0, #159	; 0x9f
 800284c:	f7ff ffcc 	bl	80027e8 <writeDat>
	  writeCmd(0xE0);                 //control EEPROM
 8002850:	20e0      	movs	r0, #224	; 0xe0
 8002852:	f7ff ff0f 	bl	8002674 <writeCmd>
	  writeDat(0x00);                 //the Read enable of EEPROM will be opened
 8002856:	2000      	movs	r0, #0
 8002858:	f7ff ffc6 	bl	80027e8 <writeDat>
	  HAL_Delay(5);
 800285c:	2005      	movs	r0, #5
 800285e:	f7fe f991 	bl	8000b84 <HAL_Delay>
	  writeCmd(0xFA);                 //EEPROM Function Selection
 8002862:	20fa      	movs	r0, #250	; 0xfa
 8002864:	f7ff ff06 	bl	8002674 <writeCmd>
	  writeDat(0x01);                 //0 : EEPROM erase disable,0 : EEPROM write disable
 8002868:	2001      	movs	r0, #1
 800286a:	f7ff ffbd 	bl	80027e8 <writeDat>
	  HAL_Delay(5);
 800286e:	2005      	movs	r0, #5
 8002870:	f7fe f988 	bl	8000b84 <HAL_Delay>
	  writeCmd(0xE3);                 //EEPRD: Read from EEPROM
 8002874:	20e3      	movs	r0, #227	; 0xe3
 8002876:	f7ff fefd 	bl	8002674 <writeCmd>
	  HAL_Delay(5);
 800287a:	2005      	movs	r0, #5
 800287c:	f7fe f982 	bl	8000b84 <HAL_Delay>
	  writeCmd(0xE1);                 //EEPROM control out
 8002880:	20e1      	movs	r0, #225	; 0xe1
 8002882:	f7ff fef7 	bl	8002674 <writeCmd>
	  writeCmd(0x28);                 //Display Off
 8002886:	2028      	movs	r0, #40	; 0x28
 8002888:	f7ff fef4 	bl	8002674 <writeCmd>
	  writeCmd(0x11);                 //Sleep Out
 800288c:	2011      	movs	r0, #17
 800288e:	f7ff fef1 	bl	8002674 <writeCmd>
	  HAL_Delay(5);
 8002892:	2005      	movs	r0, #5
 8002894:	f7fe f976 	bl	8000b84 <HAL_Delay>
	  writeCmd(0xc0);                 //Vop set
 8002898:	20c0      	movs	r0, #192	; 0xc0
 800289a:	f7ff feeb 	bl	8002674 <writeCmd>
	  writeDat(0x17);                 //ctrL=0x1b 080416 5PCS 0X1E; 8PCS 0X2A
 800289e:	2017      	movs	r0, #23
 80028a0:	f7ff ffa2 	bl	80027e8 <writeDat>
	  writeDat(0x01);
 80028a4:	2001      	movs	r0, #1
 80028a6:	f7ff ff9f 	bl	80027e8 <writeDat>
	  writeCmd(0x25);                 //Write Contrast WRCNTR       fine tuning the contrast of the display
 80028aa:	2025      	movs	r0, #37	; 0x25
 80028ac:	f7ff fee2 	bl	8002674 <writeCmd>
	  writeDat(0x1E);
 80028b0:	201e      	movs	r0, #30
 80028b2:	f7ff ff99 	bl	80027e8 <writeDat>
	  writeCmd(0xC3);                 //Bias Selection
 80028b6:	20c3      	movs	r0, #195	; 0xc3
 80028b8:	f7ff fedc 	bl	8002674 <writeCmd>
	  writeDat(0x03);                 //1/9
 80028bc:	2003      	movs	r0, #3
 80028be:	f7ff ff93 	bl	80027e8 <writeDat>
	  writeCmd(0xC4);                 //Booster Setting
 80028c2:	20c4      	movs	r0, #196	; 0xc4
 80028c4:	f7ff fed6 	bl	8002674 <writeCmd>
	  writeDat(0x07);                 //x8 boosting circuit
 80028c8:	2007      	movs	r0, #7
 80028ca:	f7ff ff8d 	bl	80027e8 <writeDat>
	  writeCmd(0xC5);
 80028ce:	20c5      	movs	r0, #197	; 0xc5
 80028d0:	f7ff fed0 	bl	8002674 <writeCmd>
	  writeDat(0x01);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7ff ff87 	bl	80027e8 <writeDat>
	  writeCmd(0xCB);                //Vg source control
 80028da:	20cb      	movs	r0, #203	; 0xcb
 80028dc:	f7ff feca 	bl	8002674 <writeCmd>
	  writeDat(0x01);
 80028e0:	2001      	movs	r0, #1
 80028e2:	f7ff ff81 	bl	80027e8 <writeDat>
	  writeCmd(0xB7);                //Scan Direction for glass layout
 80028e6:	20b7      	movs	r0, #183	; 0xb7
 80028e8:	f7ff fec4 	bl	8002674 <writeCmd>
	  writeDat(0x00);                //Keep MX,Keep BGR
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7ff ff7b 	bl	80027e8 <writeDat>
	  writeCmd(0xD0);                //Analog circuit setting
 80028f2:	20d0      	movs	r0, #208	; 0xd0
 80028f4:	f7ff febe 	bl	8002674 <writeCmd>
	  writeDat(0x1d);
 80028f8:	201d      	movs	r0, #29
 80028fa:	f7ff ff75 	bl	80027e8 <writeDat>
	  writeCmd(0xB5);                //N-Line control
 80028fe:	20b5      	movs	r0, #181	; 0xb5
 8002900:	f7ff feb8 	bl	8002674 <writeCmd>
	  writeDat(0x89);
 8002904:	2089      	movs	r0, #137	; 0x89
 8002906:	f7ff ff6f 	bl	80027e8 <writeDat>
	  writeCmd(0xBD);                 //Display Compensation Step
 800290a:	20bd      	movs	r0, #189	; 0xbd
 800290c:	f7ff feb2 	bl	8002674 <writeCmd>
	  writeDat(0x02);
 8002910:	2002      	movs	r0, #2
 8002912:	f7ff ff69 	bl	80027e8 <writeDat>
	  writeCmd(0xF0);                 //Frame Freq. in Temperature range
 8002916:	20f0      	movs	r0, #240	; 0xf0
 8002918:	f7ff feac 	bl	8002674 <writeCmd>
	  writeDat(0x07);
 800291c:	2007      	movs	r0, #7
 800291e:	f7ff ff63 	bl	80027e8 <writeDat>
	  writeDat(0x0C);
 8002922:	200c      	movs	r0, #12
 8002924:	f7ff ff60 	bl	80027e8 <writeDat>
	  writeDat(0x0C);
 8002928:	200c      	movs	r0, #12
 800292a:	f7ff ff5d 	bl	80027e8 <writeDat>
	  writeDat(0x12);
 800292e:	2012      	movs	r0, #18
 8002930:	f7ff ff5a 	bl	80027e8 <writeDat>
	  writeCmd(0xF4);                 //Temperature Gradient Compensation Coefficient Set
 8002934:	20f4      	movs	r0, #244	; 0xf4
 8002936:	f7ff fe9d 	bl	8002674 <writeCmd>
	  writeDat(0x33);
 800293a:	2033      	movs	r0, #51	; 0x33
 800293c:	f7ff ff54 	bl	80027e8 <writeDat>
	  writeDat(0x33);
 8002940:	2033      	movs	r0, #51	; 0x33
 8002942:	f7ff ff51 	bl	80027e8 <writeDat>
	  writeDat(0x33);
 8002946:	2033      	movs	r0, #51	; 0x33
 8002948:	f7ff ff4e 	bl	80027e8 <writeDat>
	  writeDat(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f7ff ff4b 	bl	80027e8 <writeDat>
	  writeDat(0x33);
 8002952:	2033      	movs	r0, #51	; 0x33
 8002954:	f7ff ff48 	bl	80027e8 <writeDat>
	  writeDat(0x66);
 8002958:	2066      	movs	r0, #102	; 0x66
 800295a:	f7ff ff45 	bl	80027e8 <writeDat>
	  writeDat(0x66);
 800295e:	2066      	movs	r0, #102	; 0x66
 8002960:	f7ff ff42 	bl	80027e8 <writeDat>
	  writeDat(0x66);
 8002964:	2066      	movs	r0, #102	; 0x66
 8002966:	f7ff ff3f 	bl	80027e8 <writeDat>
	  writeCmd(0x20);                 //Display Inversion Off
 800296a:	2020      	movs	r0, #32
 800296c:	f7ff fe82 	bl	8002674 <writeCmd>
	  writeCmd(0x2A);                 //Column Address Set
 8002970:	202a      	movs	r0, #42	; 0x2a
 8002972:	f7ff fe7f 	bl	8002674 <writeCmd>
	  writeDat(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7ff ff36 	bl	80027e8 <writeDat>
	  writeDat(0x7F);
 800297c:	207f      	movs	r0, #127	; 0x7f
 800297e:	f7ff ff33 	bl	80027e8 <writeDat>
	  writeCmd(0x2B);                 //Row Address Set
 8002982:	202b      	movs	r0, #43	; 0x2b
 8002984:	f7ff fe76 	bl	8002674 <writeCmd>
	  writeDat(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f7ff ff2d 	bl	80027e8 <writeDat>
	  writeDat(0x7f);
 800298e:	207f      	movs	r0, #127	; 0x7f
 8002990:	f7ff ff2a 	bl	80027e8 <writeDat>
	  writeCmd(0x3A);                 //Interface Pixel Format
 8002994:	203a      	movs	r0, #58	; 0x3a
 8002996:	f7ff fe6d 	bl	8002674 <writeCmd>
	  writeDat(0x05);
 800299a:	2005      	movs	r0, #5
 800299c:	f7ff ff24 	bl	80027e8 <writeDat>
	  writeCmd(0x36);                 //Memory Data Access Control
 80029a0:	2036      	movs	r0, #54	; 0x36
 80029a2:	f7ff fe67 	bl	8002674 <writeCmd>
	  writeDat(0x80);                 //RGB->0, MX,MV,ML->0,MY->1
 80029a6:	2080      	movs	r0, #128	; 0x80
 80029a8:	f7ff ff1e 	bl	80027e8 <writeDat>
	  writeCmd(0xB0);                 //Display Duty setting
 80029ac:	20b0      	movs	r0, #176	; 0xb0
 80029ae:	f7ff fe61 	bl	8002674 <writeCmd>
	  writeDat(0x7F);
 80029b2:	207f      	movs	r0, #127	; 0x7f
 80029b4:	f7ff ff18 	bl	80027e8 <writeDat>
	  writeCmd(0x29);                 //Display On
 80029b8:	2029      	movs	r0, #41	; 0x29
 80029ba:	f7ff fe5b 	bl	8002674 <writeCmd>
	  writeCmd(0xF9);                  //Frame PWM Set
 80029be:	20f9      	movs	r0, #249	; 0xf9
 80029c0:	f7ff fe58 	bl	8002674 <writeCmd>
	  writeDat(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7ff ff0f 	bl	80027e8 <writeDat>
	  writeDat(0x02);
 80029ca:	2002      	movs	r0, #2
 80029cc:	f7ff ff0c 	bl	80027e8 <writeDat>
	  writeDat(0x04);
 80029d0:	2004      	movs	r0, #4
 80029d2:	f7ff ff09 	bl	80027e8 <writeDat>
	  writeDat(0x06);
 80029d6:	2006      	movs	r0, #6
 80029d8:	f7ff ff06 	bl	80027e8 <writeDat>
	  writeDat(0x08);
 80029dc:	2008      	movs	r0, #8
 80029de:	f7ff ff03 	bl	80027e8 <writeDat>
	  writeDat(0x0a);
 80029e2:	200a      	movs	r0, #10
 80029e4:	f7ff ff00 	bl	80027e8 <writeDat>
	  writeDat(0x0c);
 80029e8:	200c      	movs	r0, #12
 80029ea:	f7ff fefd 	bl	80027e8 <writeDat>
	  writeDat(0x0e);
 80029ee:	200e      	movs	r0, #14
 80029f0:	f7ff fefa 	bl	80027e8 <writeDat>
	  writeDat(0x10);
 80029f4:	2010      	movs	r0, #16
 80029f6:	f7ff fef7 	bl	80027e8 <writeDat>
	  writeDat(0x12);
 80029fa:	2012      	movs	r0, #18
 80029fc:	f7ff fef4 	bl	80027e8 <writeDat>
	  writeDat(0x14);
 8002a00:	2014      	movs	r0, #20
 8002a02:	f7ff fef1 	bl	80027e8 <writeDat>
	  writeDat(0x16);
 8002a06:	2016      	movs	r0, #22
 8002a08:	f7ff feee 	bl	80027e8 <writeDat>
	  writeDat(0x18);
 8002a0c:	2018      	movs	r0, #24
 8002a0e:	f7ff feeb 	bl	80027e8 <writeDat>
	  writeDat(0x1A);
 8002a12:	201a      	movs	r0, #26
 8002a14:	f7ff fee8 	bl	80027e8 <writeDat>
	  writeDat(0x1C);
 8002a18:	201c      	movs	r0, #28
 8002a1a:	f7ff fee5 	bl	80027e8 <writeDat>
	  writeDat(0x1E);
 8002a1e:	201e      	movs	r0, #30
 8002a20:	f7ff fee2 	bl	80027e8 <writeDat>
	  writeCmd(0x29);                    //Display On
 8002a24:	2029      	movs	r0, #41	; 0x29
}
 8002a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  writeCmd(0x29);                    //Display On
 8002a2a:	f7ff be23 	b.w	8002674 <writeCmd>
 8002a2e:	bf00      	nop
 8002a30:	2000007c 	.word	0x2000007c
 8002a34:	20000108 	.word	0x20000108
 8002a38:	20000098 	.word	0x20000098
 8002a3c:	200000b4 	.word	0x200000b4

08002a40 <setCursorAddr>:


void setCursorAddr(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8002a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t addrBuf[2] = {(uint16_t)x0 , (uint16_t)x1};
 8002a42:	f88d 0004 	strb.w	r0, [sp, #4]
	writeCmd(0x2a);                                                          //column address set
 8002a46:	202a      	movs	r0, #42	; 0x2a
{
 8002a48:	461c      	mov	r4, r3
	uint8_t addrBuf[2] = {(uint16_t)x0 , (uint16_t)x1};
 8002a4a:	f88d 2005 	strb.w	r2, [sp, #5]
{
 8002a4e:	460d      	mov	r5, r1
	writeCmd(0x2a);                                                          //column address set
 8002a50:	f7ff fe10 	bl	8002674 <writeCmd>
	writeDatBytes(addrBuf, 2);
 8002a54:	2102      	movs	r1, #2
 8002a56:	a801      	add	r0, sp, #4
 8002a58:	f7ff fe62 	bl	8002720 <writeDatBytes>
	addrBuf[0] = (uint16_t)y0;
	addrBuf[1] = (uint16_t)y1;
	writeCmd(0x2b);                                                          //row address set
 8002a5c:	202b      	movs	r0, #43	; 0x2b
	addrBuf[0] = (uint16_t)y0;
 8002a5e:	f88d 5004 	strb.w	r5, [sp, #4]
	addrBuf[1] = (uint16_t)y1;
 8002a62:	f88d 4005 	strb.w	r4, [sp, #5]
	writeCmd(0x2b);                                                          //row address set
 8002a66:	f7ff fe05 	bl	8002674 <writeCmd>
	writeDatBytes(addrBuf, 2);
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	a801      	add	r0, sp, #4
 8002a6e:	f7ff fe57 	bl	8002720 <writeDatBytes>
}
 8002a72:	b003      	add	sp, #12
 8002a74:	bd30      	pop	{r4, r5, pc}

08002a76 <fillScreen>:
{
 8002a76:	b513      	push	{r0, r1, r4, lr}
  setCursorAddr(0, 0, 128, 128);
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	2100      	movs	r1, #0
{
 8002a7c:	4604      	mov	r4, r0
  setCursorAddr(0, 0, 128, 128);
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4608      	mov	r0, r1
 8002a82:	f7ff ffdd 	bl	8002a40 <setCursorAddr>
  writeCmd(0x2c); //writeToRam();
 8002a86:	202c      	movs	r0, #44	; 0x2c
 8002a88:	f7ff fdf4 	bl	8002674 <writeCmd>



static void writeRepeatPixel(uint16_t color, uint16_t count, uint16_t repeatCount)
{
	uint8_t    colorBuf[2] = {color , color>> 8};
 8002a8c:	f88d 4004 	strb.w	r4, [sp, #4]
 8002a90:	0a24      	lsrs	r4, r4, #8
 8002a92:	f88d 4005 	strb.w	r4, [sp, #5]
 8002a96:	f44f 4480 	mov.w	r4, #16384	; 0x4000
	uint32_t   i = 0;
	for(i = 0; i < repeatCount * count; i ++)
	{
	writeDatBytes(colorBuf, 2);
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	a801      	add	r0, sp, #4
 8002a9e:	f7ff fe3f 	bl	8002720 <writeDatBytes>
	for(i = 0; i < repeatCount * count; i ++)
 8002aa2:	3c01      	subs	r4, #1
 8002aa4:	d1f9      	bne.n	8002a9a <fillScreen+0x24>
}
 8002aa6:	b002      	add	sp, #8
 8002aa8:	bd10      	pop	{r4, pc}
	...

08002aac <Character_getCharacter>:
}


/*get the character buff into temp buf, defult setting textwidth=6, textheigh=8  */
static int16_t Character_getCharacter(uint8_t *pCh, uint8_t* pBuf, uint8_t* pWidth, uint8_t* pHeight)
{
 8002aac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t        var1 = 0;
  if(*pCh < 0x20) {
 8002aae:	7804      	ldrb	r4, [r0, #0]
 8002ab0:	2c1f      	cmp	r4, #31
 8002ab2:	d808      	bhi.n	8002ac6 <Character_getCharacter+0x1a>
    if(*pCh > 0x06 && *pCh < 0x0e) {
 8002ab4:	3c07      	subs	r4, #7
 8002ab6:	2c06      	cmp	r4, #6
 8002ab8:	d814      	bhi.n	8002ae4 <Character_getCharacter+0x38>
      *pWidth = 6; *pHeight = 8;
 8002aba:	2106      	movs	r1, #6
 8002abc:	7011      	strb	r1, [r2, #0]
 8002abe:	2208      	movs	r2, #8
 8002ac0:	701a      	strb	r2, [r3, #0]
      return 1;
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else {
      return DISPLAY_ERR_PARAM;
    }
  //utf-8 code
  } else if(*pCh < 0x80) {
 8002ac6:	0624      	lsls	r4, r4, #24
 8002ac8:	d40c      	bmi.n	8002ae4 <Character_getCharacter+0x38>
	  for(var1 = 0; var1 < 6; var1 ++) {
      pBuf[var1] = table_character_6_8[*pCh - 0x20][var1];
 8002aca:	4e08      	ldr	r6, [pc, #32]	; (8002aec <Character_getCharacter+0x40>)
 8002acc:	2400      	movs	r4, #0
 8002ace:	2706      	movs	r7, #6
 8002ad0:	7805      	ldrb	r5, [r0, #0]
 8002ad2:	3d20      	subs	r5, #32
 8002ad4:	fb07 6505 	mla	r5, r7, r5, r6
 8002ad8:	5d2d      	ldrb	r5, [r5, r4]
 8002ada:	550d      	strb	r5, [r1, r4]
 8002adc:	3401      	adds	r4, #1
	  for(var1 = 0; var1 < 6; var1 ++) {
 8002ade:	2c06      	cmp	r4, #6
 8002ae0:	d1f6      	bne.n	8002ad0 <Character_getCharacter+0x24>
 8002ae2:	e7ea      	b.n	8002aba <Character_getCharacter+0xe>
      return DISPLAY_ERR_PARAM;
 8002ae4:	f06f 0001 	mvn.w	r0, #1
	  *pWidth = 6; *pHeight = 8;
	  return 1;
  } else {
    return DISPLAY_ERR_PARAM;
  }
}
 8002ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	08004623 	.word	0x08004623

08002af0 <drawVLine1.isra.2>:
}


static void drawVLine1(int16_t x, int16_t y, int16_t height_, uint16_t color)
{
  if((x + cursorX < 0) || (x + cursorX > width)) {return;}
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <drawVLine1.isra.2+0x48>)
 8002af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af6:	181b      	adds	r3, r3, r0
static void drawVLine1(int16_t x, int16_t y, int16_t height_, uint16_t color)
 8002af8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x + cursorX < 0) || (x + cursorX > width)) {return;}
 8002afa:	d413      	bmi.n	8002b24 <drawVLine1.isra.2+0x34>
 8002afc:	4c0f      	ldr	r4, [pc, #60]	; (8002b3c <drawVLine1.isra.2+0x4c>)
 8002afe:	f9b4 4000 	ldrsh.w	r4, [r4]
 8002b02:	42a3      	cmp	r3, r4
 8002b04:	dc0e      	bgt.n	8002b24 <drawVLine1.isra.2+0x34>
  int8_t        direction = 1;
  int16_t       var1 = y + height_;
  if(height_ < 0) {
    direction = -1;
 8002b06:	2a00      	cmp	r2, #0
  int16_t       var1 = y + height_;
 8002b08:	b28b      	uxth	r3, r1
 8002b0a:	eb03 0402 	add.w	r4, r3, r2

   // uint8_t colorBuf[2] = {color >> 8, color};
  //setCursorAddr(x, y, x, y);
  //writeCmd(0x2c);
  //writeDatBytes(colorBuf, 2);
  LCD_buff[y*128+x]=0x00F8;
 8002b0e:	4d0c      	ldr	r5, [pc, #48]	; (8002b40 <drawVLine1.isra.2+0x50>)
    direction = -1;
 8002b10:	bfac      	ite	ge
 8002b12:	2201      	movge	r2, #1
 8002b14:	f04f 32ff 	movlt.w	r2, #4294967295
  int16_t       var1 = y + height_;
 8002b18:	b224      	sxth	r4, r4
 8002b1a:	b292      	uxth	r2, r2
  LCD_buff[y*128+x]=0x00F8;
 8002b1c:	b280      	uxth	r0, r0
 8002b1e:	26f8      	movs	r6, #248	; 0xf8
  for(; y != var1; y += direction) {
 8002b20:	428c      	cmp	r4, r1
 8002b22:	d100      	bne.n	8002b26 <drawVLine1.isra.2+0x36>
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LCD_buff[y*128+x]=0x00F8;
 8002b26:	eb00 17c3 	add.w	r7, r0, r3, lsl #7
 8002b2a:	4411      	add	r1, r2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f825 6017 	strh.w	r6, [r5, r7, lsl #1]
 8002b32:	b209      	sxth	r1, r1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	e7f3      	b.n	8002b20 <drawVLine1.isra.2+0x30>
 8002b38:	20000236 	.word	0x20000236
 8002b3c:	20000240 	.word	0x20000240
 8002b40:	20001bd8 	.word	0x20001bd8

08002b44 <Display>:
  width = width_ - 1;
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <Display+0x2c>)
 8002b46:	1e42      	subs	r2, r0, #1
 8002b48:	801a      	strh	r2, [r3, #0]
  height = height_ - 1;
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <Display+0x30>)
 8002b4c:	1e4a      	subs	r2, r1, #1
 8002b4e:	801a      	strh	r2, [r3, #0]
  rawWidth = width - 1;
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <Display+0x34>)
  textSize = 1;
 8002b52:	4a0a      	ldr	r2, [pc, #40]	; (8002b7c <Display+0x38>)
  rawWidth = width - 1;
 8002b54:	3802      	subs	r0, #2
 8002b56:	8018      	strh	r0, [r3, #0]
  rawHeight = height - 1;
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <Display+0x3c>)
 8002b5a:	3902      	subs	r1, #2
 8002b5c:	8019      	strh	r1, [r3, #0]
  textSize = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	7013      	strb	r3, [r2, #0]
  pfCharacterFont = Character_getCharacter;
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <Display+0x40>)
 8002b64:	4908      	ldr	r1, [pc, #32]	; (8002b88 <Display+0x44>)
 8002b66:	6011      	str	r1, [r2, #0]
  lineWidth = 1;
 8002b68:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <Display+0x48>)
 8002b6a:	8013      	strh	r3, [r2, #0]
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000240 	.word	0x20000240
 8002b74:	2000023e 	.word	0x2000023e
 8002b78:	20000232 	.word	0x20000232
 8002b7c:	20000228 	.word	0x20000228
 8002b80:	2000023a 	.word	0x2000023a
 8002b84:	20000224 	.word	0x20000224
 8002b88:	08002aad 	.word	0x08002aad
 8002b8c:	20000230 	.word	0x20000230

08002b90 <setCursor>:
  if(x > width) {
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <setCursor+0x24>)
 8002b92:	f9b3 3000 	ldrsh.w	r3, [r3]
    printfX = width;
 8002b96:	4298      	cmp	r0, r3
 8002b98:	bfa8      	it	ge
 8002b9a:	4618      	movge	r0, r3
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <setCursor+0x28>)
 8002b9e:	8018      	strh	r0, [r3, #0]
  if(y > height) {
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <setCursor+0x2c>)
 8002ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
    printfY = height;
 8002ba6:	4299      	cmp	r1, r3
 8002ba8:	bfa8      	it	ge
 8002baa:	4619      	movge	r1, r3
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <setCursor+0x30>)
 8002bae:	8019      	strh	r1, [r3, #0]
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000240 	.word	0x20000240
 8002bb8:	2000022a 	.word	0x2000022a
 8002bbc:	2000023e 	.word	0x2000023e
 8002bc0:	20000220 	.word	0x20000220

08002bc4 <setTextSize>:
  textSize = size;
 8002bc4:	4b01      	ldr	r3, [pc, #4]	; (8002bcc <setTextSize+0x8>)
 8002bc6:	7018      	strb	r0, [r3, #0]
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000228 	.word	0x20000228

08002bd0 <setTextBackground>:
  textBackground = color;
 8002bd0:	4b01      	ldr	r3, [pc, #4]	; (8002bd8 <setTextBackground+0x8>)
 8002bd2:	8018      	strh	r0, [r3, #0]
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	2000022c 	.word	0x2000022c

08002bdc <setTextColor>:
  textColor = color;
 8002bdc:	4b01      	ldr	r3, [pc, #4]	; (8002be4 <setTextColor+0x8>)
 8002bde:	8018      	strh	r0, [r3, #0]
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	2000022e 	.word	0x2000022e

08002be8 <print1>:
{
 8002be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bec:	b08b      	sub	sp, #44	; 0x2c
  uint8_t       characterBuffer[32] = {0};
 8002bee:	2220      	movs	r2, #32
{
 8002bf0:	9001      	str	r0, [sp, #4]
  uint8_t       characterBuffer[32] = {0};
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	a802      	add	r0, sp, #8
 8002bf6:	f000 fd4d 	bl	8003694 <memset>
  while(*ch) {
 8002bfa:	9b01      	ldr	r3, [sp, #4]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b913      	cbnz	r3, 8002c06 <print1+0x1e>
}
 8002c00:	b00b      	add	sp, #44	; 0x2c
 8002c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   rslt = pfCharacterFont((uint8_t*) ch, characterBuffer, &textWidth, &textHeight);
 8002c06:	4e82      	ldr	r6, [pc, #520]	; (8002e10 <print1+0x228>)
 8002c08:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <print1+0x22c>)
 8002c0a:	4d83      	ldr	r5, [pc, #524]	; (8002e18 <print1+0x230>)
 8002c0c:	681f      	ldr	r7, [r3, #0]
 8002c0e:	9801      	ldr	r0, [sp, #4]
 8002c10:	462b      	mov	r3, r5
 8002c12:	4632      	mov	r2, r6
 8002c14:	a902      	add	r1, sp, #8
 8002c16:	47b8      	blx	r7
      if(*ch > 0x06 && *ch < 0x0e) {
 8002c18:	9b01      	ldr	r3, [sp, #4]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	1fda      	subs	r2, r3, #7
 8002c1e:	2a06      	cmp	r2, #6
 8002c20:	9a01      	ldr	r2, [sp, #4]
   rslt = pfCharacterFont((uint8_t*) ch, characterBuffer, &textWidth, &textHeight);
 8002c22:	b2c0      	uxtb	r0, r0
 8002c24:	4402      	add	r2, r0
 8002c26:	46b1      	mov	r9, r6
 8002c28:	4614      	mov	r4, r2
      if(*ch > 0x06 && *ch < 0x0e) {
 8002c2a:	d80e      	bhi.n	8002c4a <print1+0x62>
        if(*ch == '\n') {
 8002c2c:	2b0a      	cmp	r3, #10
 8002c2e:	d10a      	bne.n	8002c46 <print1+0x5e>
          *pX = 0;
 8002c30:	4b7a      	ldr	r3, [pc, #488]	; (8002e1c <print1+0x234>)
          *pY += textHeight * textSize;
 8002c32:	7828      	ldrb	r0, [r5, #0]
          *pX = 0;
 8002c34:	2200      	movs	r2, #0
 8002c36:	801a      	strh	r2, [r3, #0]
          *pY += textHeight * textSize;
 8002c38:	4a79      	ldr	r2, [pc, #484]	; (8002e20 <print1+0x238>)
 8002c3a:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <print1+0x23c>)
 8002c3c:	8811      	ldrh	r1, [r2, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	fb00 1303 	mla	r3, r0, r3, r1
 8002c44:	8013      	strh	r3, [r2, #0]
        ch += rslt;
 8002c46:	9401      	str	r4, [sp, #4]
 8002c48:	e7d7      	b.n	8002bfa <print1+0x12>
      if(*pX > rawWidth - textWidth * textSize) {
 8002c4a:	4977      	ldr	r1, [pc, #476]	; (8002e28 <print1+0x240>)
 8002c4c:	4b75      	ldr	r3, [pc, #468]	; (8002e24 <print1+0x23c>)
      ch += rslt;
 8002c4e:	9201      	str	r2, [sp, #4]
      if(*pX > rawWidth - textWidth * textSize) {
 8002c50:	4a72      	ldr	r2, [pc, #456]	; (8002e1c <print1+0x234>)
 8002c52:	f9b1 e000 	ldrsh.w	lr, [r1]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	7831      	ldrb	r1, [r6, #0]
 8002c5a:	f9b2 7000 	ldrsh.w	r7, [r2]
 8002c5e:	fb01 e113 	mls	r1, r1, r3, lr
 8002c62:	428f      	cmp	r7, r1
 8002c64:	4f6e      	ldr	r7, [pc, #440]	; (8002e20 <print1+0x238>)
 8002c66:	dd06      	ble.n	8002c76 <print1+0x8e>
        *pX = 0;
 8002c68:	2100      	movs	r1, #0
 8002c6a:	8011      	strh	r1, [r2, #0]
        *pY += textHeight * textSize;
 8002c6c:	8839      	ldrh	r1, [r7, #0]
 8002c6e:	782a      	ldrb	r2, [r5, #0]
 8002c70:	fb02 1203 	mla	r2, r2, r3, r1
 8002c74:	803a      	strh	r2, [r7, #0]
      if(*pY > rawHeight - textHeight * textSize) {
 8002c76:	782a      	ldrb	r2, [r5, #0]
 8002c78:	4d6c      	ldr	r5, [pc, #432]	; (8002e2c <print1+0x244>)
 8002c7a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002c7e:	f9b5 5000 	ldrsh.w	r5, [r5]
 8002c82:	fb03 5312 	mls	r3, r3, r2, r5
 8002c86:	4299      	cmp	r1, r3
 8002c88:	dcba      	bgt.n	8002c00 <print1+0x18>
      if(rslt > 1) {
 8002c8a:	2801      	cmp	r0, #1
 8002c8c:	d949      	bls.n	8002d22 <print1+0x13a>
 8002c8e:	2600      	movs	r6, #0
          var1 = characterBuffer[i];
 8002c90:	ab02      	add	r3, sp, #8
 8002c92:	b2f5      	uxtb	r5, r6
                drawVLine1(*pX + (i % 2) * 8 * textSize + j * textSize + k - cursorX,
 8002c94:	f005 0801 	and.w	r8, r5, #1
          var1 = characterBuffer[i];
 8002c98:	f813 b006 	ldrb.w	fp, [r3, r6]
                drawVLine1(*pX + (i % 2) * 8 * textSize + j * textSize + k - cursorX,
 8002c9c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
                          *pY + (i / 2) * textSize - cursorY, textSize , textColor);
 8002ca0:	086d      	lsrs	r5, r5, #1
 8002ca2:	2700      	movs	r7, #0
            if(var1 & (0x01 << j)) {
 8002ca4:	fa4b f307 	asr.w	r3, fp, r7
 8002ca8:	07d9      	lsls	r1, r3, #31
 8002caa:	d40f      	bmi.n	8002ccc <print1+0xe4>
 8002cac:	3701      	adds	r7, #1
          for(j = 0; j < 8; j ++) {
 8002cae:	2f08      	cmp	r7, #8
 8002cb0:	d1f8      	bne.n	8002ca4 <print1+0xbc>
 8002cb2:	3601      	adds	r6, #1
        for(i = 0; i < 32; i ++) {
 8002cb4:	2e20      	cmp	r6, #32
 8002cb6:	d1eb      	bne.n	8002c90 <print1+0xa8>
    *pX += textWidth * textSize;
 8002cb8:	4b55      	ldr	r3, [pc, #340]	; (8002e10 <print1+0x228>)
 8002cba:	4a58      	ldr	r2, [pc, #352]	; (8002e1c <print1+0x234>)
 8002cbc:	7818      	ldrb	r0, [r3, #0]
 8002cbe:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <print1+0x23c>)
 8002cc0:	8811      	ldrh	r1, [r2, #0]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	fb00 1303 	mla	r3, r0, r3, r1
 8002cc8:	8013      	strh	r3, [r2, #0]
 8002cca:	e796      	b.n	8002bfa <print1+0x12>
 8002ccc:	eb08 0a07 	add.w	sl, r8, r7
 8002cd0:	fa1f fa8a 	uxth.w	sl, sl
            if(var1 & (0x01 << j)) {
 8002cd4:	f04f 0900 	mov.w	r9, #0
              for(k = 0; k < textSize; k ++) {
 8002cd8:	4b52      	ldr	r3, [pc, #328]	; (8002e24 <print1+0x23c>)
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	fa5f f089 	uxtb.w	r0, r9
 8002ce0:	4282      	cmp	r2, r0
 8002ce2:	f109 0901 	add.w	r9, r9, #1
 8002ce6:	d9e1      	bls.n	8002cac <print1+0xc4>
                          *pY + (i / 2) * textSize - cursorY, textSize , textColor);
 8002ce8:	4c51      	ldr	r4, [pc, #324]	; (8002e30 <print1+0x248>)
 8002cea:	494d      	ldr	r1, [pc, #308]	; (8002e20 <print1+0x238>)
 8002cec:	f8b4 e000 	ldrh.w	lr, [r4]
 8002cf0:	8809      	ldrh	r1, [r1, #0]
 8002cf2:	eba1 010e 	sub.w	r1, r1, lr
                drawVLine1(*pX + (i % 2) * 8 * textSize + j * textSize + k - cursorX,
 8002cf6:	f8df e124 	ldr.w	lr, [pc, #292]	; 8002e1c <print1+0x234>
 8002cfa:	f8be c000 	ldrh.w	ip, [lr]
 8002cfe:	f8df e134 	ldr.w	lr, [pc, #308]	; 8002e34 <print1+0x24c>
 8002d02:	f8be e000 	ldrh.w	lr, [lr]
 8002d06:	b293      	uxth	r3, r2
                          *pY + (i / 2) * textSize - cursorY, textSize , textColor);
 8002d08:	fb03 1105 	mla	r1, r3, r5, r1
                drawVLine1(*pX + (i % 2) * 8 * textSize + j * textSize + k - cursorX,
 8002d0c:	ebac 0e0e 	sub.w	lr, ip, lr
 8002d10:	fb13 f30a 	smulbb	r3, r3, sl
 8002d14:	449e      	add	lr, r3
 8002d16:	4470      	add	r0, lr
 8002d18:	b209      	sxth	r1, r1
 8002d1a:	b200      	sxth	r0, r0
 8002d1c:	f7ff fee8 	bl	8002af0 <drawVLine1.isra.2>
 8002d20:	e7da      	b.n	8002cd8 <print1+0xf0>
        if(textHeight == 16) {
 8002d22:	2a10      	cmp	r2, #16
 8002d24:	d01f      	beq.n	8002d66 <print1+0x17e>
 8002d26:	2700      	movs	r7, #0
          for(i = 0; i < textWidth; i ++) {
 8002d28:	f899 3000 	ldrb.w	r3, [r9]
 8002d2c:	b2fe      	uxtb	r6, r7
 8002d2e:	42b3      	cmp	r3, r6
 8002d30:	d9c2      	bls.n	8002cb8 <print1+0xd0>
            var1 = characterBuffer[i];
 8002d32:	ab0a      	add	r3, sp, #40	; 0x28
 8002d34:	4433      	add	r3, r6
                for(k = 0; k < textSize; k ++) {
 8002d36:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8002e24 <print1+0x23c>
            var1 = characterBuffer[i];
 8002d3a:	f813 ac20 	ldrb.w	sl, [r3, #-32]
 8002d3e:	2500      	movs	r5, #0
              if(var1 & (0x01 << j)) {
 8002d40:	fa4a f305 	asr.w	r3, sl, r5
 8002d44:	07db      	lsls	r3, r3, #31
 8002d46:	d509      	bpl.n	8002d5c <print1+0x174>
 8002d48:	f04f 0800 	mov.w	r8, #0
                for(k = 0; k < textSize; k ++) {
 8002d4c:	f89b 2000 	ldrb.w	r2, [fp]
 8002d50:	fa5f f088 	uxtb.w	r0, r8
 8002d54:	4282      	cmp	r2, r0
 8002d56:	f108 0801 	add.w	r8, r8, #1
 8002d5a:	d83c      	bhi.n	8002dd6 <print1+0x1ee>
 8002d5c:	3501      	adds	r5, #1
            for(j = 0; j < 8; j ++) {
 8002d5e:	2d08      	cmp	r5, #8
 8002d60:	d1ee      	bne.n	8002d40 <print1+0x158>
 8002d62:	3701      	adds	r7, #1
 8002d64:	e7e0      	b.n	8002d28 <print1+0x140>
                for(k = 0; k < textSize; k ++) {
 8002d66:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8002e24 <print1+0x23c>
        if(textHeight == 16) {
 8002d6a:	2500      	movs	r5, #0
            var1 = characterBuffer[i];
 8002d6c:	ab02      	add	r3, sp, #8
 8002d6e:	2600      	movs	r6, #0
 8002d70:	f813 a005 	ldrb.w	sl, [r3, r5]
              if(var1 & (0x01 << j)) {
 8002d74:	fa4a f306 	asr.w	r3, sl, r6
 8002d78:	07da      	lsls	r2, r3, #31
 8002d7a:	d50b      	bpl.n	8002d94 <print1+0x1ac>
                  drawVLine1(*pX + j * textSize + k - cursorX,
 8002d7c:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8002e34 <print1+0x24c>
              if(var1 & (0x01 << j)) {
 8002d80:	f04f 0800 	mov.w	r8, #0
                for(k = 0; k < textSize; k ++) {
 8002d84:	f899 2000 	ldrb.w	r2, [r9]
 8002d88:	fa5f f088 	uxtb.w	r0, r8
 8002d8c:	4282      	cmp	r2, r0
 8002d8e:	f108 0801 	add.w	r8, r8, #1
 8002d92:	d806      	bhi.n	8002da2 <print1+0x1ba>
 8002d94:	3601      	adds	r6, #1
            for(j = 0; j < 8; j ++) {
 8002d96:	2e08      	cmp	r6, #8
 8002d98:	d1ec      	bne.n	8002d74 <print1+0x18c>
 8002d9a:	3501      	adds	r5, #1
          for(i = 0; i < 16; i ++) {
 8002d9c:	2d10      	cmp	r5, #16
 8002d9e:	d1e5      	bne.n	8002d6c <print1+0x184>
 8002da0:	e78a      	b.n	8002cb8 <print1+0xd0>
                            *pY + i * textSize - cursorY, textSize , textColor);
 8002da2:	4c23      	ldr	r4, [pc, #140]	; (8002e30 <print1+0x248>)
 8002da4:	8839      	ldrh	r1, [r7, #0]
 8002da6:	f8b4 e000 	ldrh.w	lr, [r4]
                  drawVLine1(*pX + j * textSize + k - cursorX,
 8002daa:	4c1c      	ldr	r4, [pc, #112]	; (8002e1c <print1+0x234>)
 8002dac:	b293      	uxth	r3, r2
                            *pY + i * textSize - cursorY, textSize , textColor);
 8002dae:	eba1 010e 	sub.w	r1, r1, lr
 8002db2:	fb15 fe03 	smulbb	lr, r5, r3
 8002db6:	4471      	add	r1, lr
                  drawVLine1(*pX + j * textSize + k - cursorX,
 8002db8:	f8b4 c000 	ldrh.w	ip, [r4]
 8002dbc:	f8bb e000 	ldrh.w	lr, [fp]
 8002dc0:	fb16 f303 	smulbb	r3, r6, r3
 8002dc4:	ebac 0e0e 	sub.w	lr, ip, lr
 8002dc8:	449e      	add	lr, r3
 8002dca:	4470      	add	r0, lr
 8002dcc:	b209      	sxth	r1, r1
 8002dce:	b200      	sxth	r0, r0
 8002dd0:	f7ff fe8e 	bl	8002af0 <drawVLine1.isra.2>
 8002dd4:	e7d6      	b.n	8002d84 <print1+0x19c>
                 drawVLine1(*pX + i * textSize + k - cursorX, *pY + j * textSize - cursorY, textSize, textColor);
 8002dd6:	4c16      	ldr	r4, [pc, #88]	; (8002e30 <print1+0x248>)
 8002dd8:	4911      	ldr	r1, [pc, #68]	; (8002e20 <print1+0x238>)
 8002dda:	f8b4 e000 	ldrh.w	lr, [r4]
 8002dde:	8809      	ldrh	r1, [r1, #0]
 8002de0:	4c0e      	ldr	r4, [pc, #56]	; (8002e1c <print1+0x234>)
 8002de2:	f8df c050 	ldr.w	ip, [pc, #80]	; 8002e34 <print1+0x24c>
 8002de6:	b293      	uxth	r3, r2
 8002de8:	eba1 010e 	sub.w	r1, r1, lr
 8002dec:	fb15 fe03 	smulbb	lr, r5, r3
 8002df0:	4471      	add	r1, lr
 8002df2:	f8bc c000 	ldrh.w	ip, [ip]
 8002df6:	f8b4 e000 	ldrh.w	lr, [r4]
 8002dfa:	ebae 0e0c 	sub.w	lr, lr, ip
 8002dfe:	fb06 e303 	mla	r3, r6, r3, lr
 8002e02:	4418      	add	r0, r3
 8002e04:	b209      	sxth	r1, r1
 8002e06:	b200      	sxth	r0, r0
 8002e08:	f7ff fe72 	bl	8002af0 <drawVLine1.isra.2>
 8002e0c:	e79e      	b.n	8002d4c <print1+0x164>
 8002e0e:	bf00      	nop
 8002e10:	20000239 	.word	0x20000239
 8002e14:	20000224 	.word	0x20000224
 8002e18:	20000238 	.word	0x20000238
 8002e1c:	2000022a 	.word	0x2000022a
 8002e20:	20000220 	.word	0x20000220
 8002e24:	20000228 	.word	0x20000228
 8002e28:	20000232 	.word	0x20000232
 8002e2c:	2000023a 	.word	0x2000023a
 8002e30:	2000023c 	.word	0x2000023c
 8002e34:	20000236 	.word	0x20000236

08002e38 <InitBoard>:


extern volatile bool intReceived;

void InitBoard(void)
{
 8002e38:	b530      	push	{r4, r5, lr}
 8002e3a:	b0b9      	sub	sp, #228	; 0xe4
	HAL_Init();
 8002e3c:	f7fd fe80 	bl	8000b40 <HAL_Init>
}


static void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e40:	2244      	movs	r2, #68	; 0x44
 8002e42:	2100      	movs	r1, #0
 8002e44:	a805      	add	r0, sp, #20
 8002e46:	f000 fc25 	bl	8003694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e4a:	2214      	movs	r2, #20
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4668      	mov	r0, sp
 8002e50:	f000 fc20 	bl	8003694 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e54:	2100      	movs	r1, #0
 8002e56:	2288      	movs	r2, #136	; 0x88
 8002e58:	a816      	add	r0, sp, #88	; 0x58
 8002e5a:	f000 fc1b 	bl	8003694 <memset>

  /** Initializes the CPU, AHB and APB busses clocks */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e5e:	2210      	movs	r2, #16
 8002e60:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;                     //Division factor for PLL VCO input clock
 8002e62:	2201      	movs	r2, #1
 8002e64:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;                    //Multiplication factor for PLL VCO output clock
 8002e66:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e68:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e6a:	f44f 7580 	mov.w	r5, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;                    //Multiplication factor for PLL VCO output clock
 8002e6e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;         //SAI clock
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;         //SDMMC1, RNG and USB
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;         // main system clock
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e70:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;         //SAI clock
 8002e72:	2207      	movs	r2, #7
  }
  /** Initializes the CPU, AHB and APB busses clocks*/
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e74:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e76:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e78:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e7a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;         //SAI clock
 8002e7c:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;         //SDMMC1, RNG and USB
 8002e7e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;         // main system clock
 8002e80:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e82:	9508      	str	r5, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e84:	f7fe fc12 	bl	80016ac <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e88:	220f      	movs	r2, #15
 8002e8a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e90:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e94:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e96:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e98:	f7fe fe6a 	bl	8001b70 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e9c:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002e9e:	9516      	str	r5, [sp, #88]	; 0x58
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002ea0:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ea2:	f7ff f807 	bl	8001eb4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage*/
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002ea6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002eaa:	f7fe fb39 	bl	8001520 <HAL_PWREx_ControlVoltageScaling>
	ALL_GPIO_Init();
 8002eae:	f000 f855 	bl	8002f5c <ALL_GPIO_Init>
	SPI_initialization();
 8002eb2:	f000 faad 	bl	8003410 <SPI_initialization>
}
 8002eb6:	b039      	add	sp, #228	; 0xe4
 8002eb8:	bd30      	pop	{r4, r5, pc}
	...

08002ebc <HAL_GPIO_EXTI_Callback>:
{
 8002ebc:	b510      	push	{r4, lr}
  if(HAL_GPIO_ReadPin(Call_BTN.port, Call_BTN.pin) == GPIO_PIN_RESET)             //CALL button pushed
 8002ebe:	4c16      	ldr	r4, [pc, #88]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002ec0:	8821      	ldrh	r1, [r4, #0]
 8002ec2:	6860      	ldr	r0, [r4, #4]
 8002ec4:	f7fd ffb8 	bl	8000e38 <HAL_GPIO_ReadPin>
 8002ec8:	b950      	cbnz	r0, 8002ee0 <HAL_GPIO_EXTI_Callback+0x24>
	 HAL_GPIO_WritePin(Cancel_LED.port, Cancel_LED.pin, GPIO_PIN_SET);            // CANCEL led light up
 8002eca:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_GPIO_EXTI_Callback+0x60>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	8819      	ldrh	r1, [r3, #0]
 8002ed0:	6858      	ldr	r0, [r3, #4]
 8002ed2:	f7fd ffb7 	bl	8000e44 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Call_BTN.port, Call_BTN.pin, GPIO_PIN_SET);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	8821      	ldrh	r1, [r4, #0]
 8002eda:	6860      	ldr	r0, [r4, #4]
 8002edc:	f7fd ffb2 	bl	8000e44 <HAL_GPIO_WritePin>
  if(HAL_GPIO_ReadPin(Cancel_BTN.port, Cancel_BTN.pin) == GPIO_PIN_RESET)         //CANCEL button pushed
 8002ee0:	4c0f      	ldr	r4, [pc, #60]	; (8002f20 <HAL_GPIO_EXTI_Callback+0x64>)
 8002ee2:	8821      	ldrh	r1, [r4, #0]
 8002ee4:	6860      	ldr	r0, [r4, #4]
 8002ee6:	f7fd ffa7 	bl	8000e38 <HAL_GPIO_ReadPin>
 8002eea:	4602      	mov	r2, r0
 8002eec:	b948      	cbnz	r0, 8002f02 <HAL_GPIO_EXTI_Callback+0x46>
	 HAL_GPIO_WritePin(Cancel_LED.port, Cancel_LED.pin, GPIO_PIN_RESET);         // CANCEL led turn off
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_GPIO_EXTI_Callback+0x60>)
 8002ef0:	8819      	ldrh	r1, [r3, #0]
 8002ef2:	6858      	ldr	r0, [r3, #4]
 8002ef4:	f7fd ffa6 	bl	8000e44 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Cancel_BTN.port, Cancel_BTN.pin, GPIO_PIN_SET);
 8002ef8:	2201      	movs	r2, #1
 8002efa:	8821      	ldrh	r1, [r4, #0]
 8002efc:	6860      	ldr	r0, [r4, #4]
 8002efe:	f7fd ffa1 	bl	8000e44 <HAL_GPIO_WritePin>
  if(HAL_GPIO_ReadPin(AMG8833_INT.port, AMG8833_INT.pin) == GPIO_PIN_RESET)         //Detect the AMG8833_INT is low, ????
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_GPIO_EXTI_Callback+0x68>)
 8002f04:	8819      	ldrh	r1, [r3, #0]
 8002f06:	6858      	ldr	r0, [r3, #4]
 8002f08:	f7fd ff96 	bl	8000e38 <HAL_GPIO_ReadPin>
 8002f0c:	b910      	cbnz	r0, 8002f14 <HAL_GPIO_EXTI_Callback+0x58>
	  intReceived = true;
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	bd10      	pop	{r4, pc}
 8002f16:	bf00      	nop
 8002f18:	20000028 	.word	0x20000028
 8002f1c:	20000060 	.word	0x20000060
 8002f20:	20000044 	.word	0x20000044
 8002f24:	2000000c 	.word	0x2000000c
 8002f28:	20000204 	.word	0x20000204

08002f2c <Init_GPIO_PIN>:
}



void Init_GPIO_PIN(Gpio_t * Gpio_obj)
{
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	4604      	mov	r4, r0
 8002f30:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f32:	2214      	movs	r2, #20
 8002f34:	2100      	movs	r1, #0
 8002f36:	a801      	add	r0, sp, #4
 8002f38:	f000 fbac 	bl	8003694 <memset>
	GPIO_InitStruct.Pin       =  Gpio_obj->pin;
 8002f3c:	8823      	ldrh	r3, [r4, #0]
 8002f3e:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode      =  Gpio_obj->Mode;
 8002f40:	68a3      	ldr	r3, [r4, #8]
 8002f42:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull      =  Gpio_obj->Pull;
 8002f44:	68e3      	ldr	r3, [r4, #12]
 8002f46:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed     =  Gpio_obj->Speed;
 8002f48:	6923      	ldr	r3, [r4, #16]
 8002f4a:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate =  Gpio_obj->Alternate;
	HAL_GPIO_Init(Gpio_obj->port, &GPIO_InitStruct);
 8002f4c:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Alternate =  Gpio_obj->Alternate;
 8002f4e:	6963      	ldr	r3, [r4, #20]
	HAL_GPIO_Init(Gpio_obj->port, &GPIO_InitStruct);
 8002f50:	6860      	ldr	r0, [r4, #4]
	GPIO_InitStruct.Alternate =  Gpio_obj->Alternate;
 8002f52:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(Gpio_obj->port, &GPIO_InitStruct);
 8002f54:	f7fd fe94 	bl	8000c80 <HAL_GPIO_Init>
}
 8002f58:	b006      	add	sp, #24
 8002f5a:	bd10      	pop	{r4, pc}

08002f5c <ALL_GPIO_Init>:
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5c:	4b33      	ldr	r3, [pc, #204]	; (800302c <ALL_GPIO_Init+0xd0>)
 8002f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8002f60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f64:	f042 0204 	orr.w	r2, r2, #4
 8002f68:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  Init_GPIO_PIN(&Cancel_BTN);
 8002f6c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003040 <ALL_GPIO_Init+0xe4>
  Init_GPIO_PIN(&Call_BTN);
 8002f70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003044 <ALL_GPIO_Init+0xe8>
  Init_GPIO_PIN(&Cancel_LED);
 8002f74:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8003048 <ALL_GPIO_Init+0xec>
  Init_GPIO_PIN(&LCD_RS);
 8002f78:	4f2d      	ldr	r7, [pc, #180]	; (8003030 <ALL_GPIO_Init+0xd4>)
  Init_GPIO_PIN(&LCD_WR);
 8002f7a:	4e2e      	ldr	r6, [pc, #184]	; (8003034 <ALL_GPIO_Init+0xd8>)
  Init_GPIO_PIN(&LCD_LCK);
 8002f7c:	4d2e      	ldr	r5, [pc, #184]	; (8003038 <ALL_GPIO_Init+0xdc>)
  Init_GPIO_PIN(&AMG8833_INT);
 8002f7e:	4c2f      	ldr	r4, [pc, #188]	; (800303c <ALL_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f80:	f002 0204 	and.w	r2, r2, #4
 8002f84:	9200      	str	r2, [sp, #0]
 8002f86:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	9301      	str	r3, [sp, #4]
  Init_GPIO_PIN(&Cancel_BTN);
 8002f98:	4648      	mov	r0, r9
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	9b01      	ldr	r3, [sp, #4]
  Init_GPIO_PIN(&Cancel_BTN);
 8002f9c:	f7ff ffc6 	bl	8002f2c <Init_GPIO_PIN>
  Init_GPIO_PIN(&Call_BTN);
 8002fa0:	4640      	mov	r0, r8
 8002fa2:	f7ff ffc3 	bl	8002f2c <Init_GPIO_PIN>
  Init_GPIO_PIN(&Cancel_LED);
 8002fa6:	4650      	mov	r0, sl
 8002fa8:	f7ff ffc0 	bl	8002f2c <Init_GPIO_PIN>
  Init_GPIO_PIN(&LCD_RS);
 8002fac:	4638      	mov	r0, r7
 8002fae:	f7ff ffbd 	bl	8002f2c <Init_GPIO_PIN>
  Init_GPIO_PIN(&LCD_WR);
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	f7ff ffba 	bl	8002f2c <Init_GPIO_PIN>
  Init_GPIO_PIN(&LCD_LCK);
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f7ff ffb7 	bl	8002f2c <Init_GPIO_PIN>
  Init_GPIO_PIN(&AMG8833_INT);
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7ff ffb4 	bl	8002f2c <Init_GPIO_PIN>
  HAL_GPIO_WritePin(Cancel_LED.port, Cancel_LED.pin, GPIO_PIN_RESET);
 8002fc4:	f8ba 1000 	ldrh.w	r1, [sl]
 8002fc8:	f8da 0004 	ldr.w	r0, [sl, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f7fd ff39 	bl	8000e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Cancel_BTN.port, Cancel_BTN.pin, GPIO_PIN_SET);
 8002fd2:	f8b9 1000 	ldrh.w	r1, [r9]
 8002fd6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f7fd ff32 	bl	8000e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Call_BTN.port,   Call_BTN.pin,   GPIO_PIN_SET);
 8002fe0:	f8b8 1000 	ldrh.w	r1, [r8]
 8002fe4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f7fd ff2b 	bl	8000e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS.port,  LCD_RS.pin,  GPIO_PIN_SET);                 //RS->1
 8002fee:	8839      	ldrh	r1, [r7, #0]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f7fd ff26 	bl	8000e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WR.port,  LCD_WR.pin,  GPIO_PIN_SET);                 //WR->1
 8002ff8:	8831      	ldrh	r1, [r6, #0]
 8002ffa:	6870      	ldr	r0, [r6, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f7fd ff21 	bl	8000e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_LCK.port, LCD_LCK.pin, GPIO_PIN_SET);                 //LCK->1
 8003002:	8829      	ldrh	r1, [r5, #0]
 8003004:	6868      	ldr	r0, [r5, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f7fd ff1c 	bl	8000e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AMG8833_INT.port, AMG8833_INT.pin, GPIO_PIN_SET);
 800300c:	8821      	ldrh	r1, [r4, #0]
 800300e:	6860      	ldr	r0, [r4, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f7fd ff17 	bl	8000e44 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	4611      	mov	r1, r2
 800301a:	2017      	movs	r0, #23
 800301c:	f7fd fdd8 	bl	8000bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003020:	2017      	movs	r0, #23
 8003022:	f7fd fe09 	bl	8000c38 <HAL_NVIC_EnableIRQ>
}
 8003026:	b002      	add	sp, #8
 8003028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	20000098 	.word	0x20000098
 8003034:	200000b4 	.word	0x200000b4
 8003038:	2000007c 	.word	0x2000007c
 800303c:	2000000c 	.word	0x2000000c
 8003040:	20000044 	.word	0x20000044
 8003044:	20000028 	.word	0x20000028
 8003048:	20000060 	.word	0x20000060

0800304c <Error_Handler>:




static void Error_Handler(void)
{
 800304c:	b082      	sub	sp, #8

	volatile int i = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	9301      	str	r3, [sp, #4]
	for(;;) i+=1;
 8003052:	9b01      	ldr	r3, [sp, #4]
 8003054:	3301      	adds	r3, #1
 8003056:	e7fb      	b.n	8003050 <Error_Handler+0x4>

08003058 <I2C3_initaliztion>:
{
 8003058:	b513      	push	{r0, r1, r4, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800305a:	4c1d      	ldr	r4, [pc, #116]	; (80030d0 <I2C3_initaliztion+0x78>)
  Init_GPIO_PIN(&I2Cx->SCLK);
 800305c:	481d      	ldr	r0, [pc, #116]	; (80030d4 <I2C3_initaliztion+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800305e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003066:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	9b00      	ldr	r3, [sp, #0]
  Init_GPIO_PIN(&I2Cx->SCLK);
 8003070:	f7ff ff5c 	bl	8002f2c <Init_GPIO_PIN>
  Init_GPIO_PIN(&I2Cx->SDA);
 8003074:	4818      	ldr	r0, [pc, #96]	; (80030d8 <I2C3_initaliztion+0x80>)
 8003076:	f7ff ff59 	bl	8002f2c <Init_GPIO_PIN>
  __HAL_RCC_I2C3_CLK_ENABLE();
 800307a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   hi2c3.Init.Timing = 0x00702991;                        //PRESC[3:0], SCLDEL[3:0] and SDADEL[3:0]
 800307c:	4a17      	ldr	r2, [pc, #92]	; (80030dc <I2C3_initaliztion+0x84>)
  __HAL_RCC_I2C3_CLK_ENABLE();
 800307e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003082:	65a3      	str	r3, [r4, #88]	; 0x58
 8003084:	6da3      	ldr	r3, [r4, #88]	; 0x58
   hi2c3.Instance = I2C3;
 8003086:	4c16      	ldr	r4, [pc, #88]	; (80030e0 <I2C3_initaliztion+0x88>)
  __HAL_RCC_I2C3_CLK_ENABLE();
 8003088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	9b01      	ldr	r3, [sp, #4]
   hi2c3.Init.Timing = 0x00702991;                        //PRESC[3:0], SCLDEL[3:0] and SDADEL[3:0]
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <I2C3_initaliztion+0x8c>)
   if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003092:	4620      	mov	r0, r4
   hi2c3.Init.Timing = 0x00702991;                        //PRESC[3:0], SCLDEL[3:0] and SDADEL[3:0]
 8003094:	e884 000c 	stmia.w	r4, {r2, r3}
   hi2c3.Init.OwnAddress1 = 0;
 8003098:	2300      	movs	r3, #0
   hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800309a:	2201      	movs	r2, #1
   hi2c3.Init.OwnAddress1 = 0;
 800309c:	60a3      	str	r3, [r4, #8]
   hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800309e:	60e2      	str	r2, [r4, #12]
   hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030a0:	6123      	str	r3, [r4, #16]
   hi2c3.Init.OwnAddress2 = 0;
 80030a2:	6163      	str	r3, [r4, #20]
   hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030a4:	61a3      	str	r3, [r4, #24]
   hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030a6:	61e3      	str	r3, [r4, #28]
   hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030a8:	6223      	str	r3, [r4, #32]
   if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80030aa:	f7fe f81f 	bl	80010ec <HAL_I2C_Init>
 80030ae:	4601      	mov	r1, r0
 80030b0:	b108      	cbz	r0, 80030b6 <I2C3_initaliztion+0x5e>
     Error_Handler();
 80030b2:	f7ff ffcb 	bl	800304c <Error_Handler>
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030b6:	4620      	mov	r0, r4
 80030b8:	f7fe f9de 	bl	8001478 <HAL_I2CEx_ConfigAnalogFilter>
 80030bc:	4601      	mov	r1, r0
 80030be:	2800      	cmp	r0, #0
 80030c0:	d1f7      	bne.n	80030b2 <I2C3_initaliztion+0x5a>
   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7fe f9fe 	bl	80014c4 <HAL_I2CEx_ConfigDigitalFilter>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d1f2      	bne.n	80030b2 <I2C3_initaliztion+0x5a>
}
 80030cc:	b002      	add	sp, #8
 80030ce:	bd10      	pop	{r4, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	200000d0 	.word	0x200000d0
 80030d8:	200000ec 	.word	0x200000ec
 80030dc:	40005c00 	.word	0x40005c00
 80030e0:	20000244 	.word	0x20000244
 80030e4:	00702991 	.word	0x00702991

080030e8 <DrawInts.constprop.0>:
	//HAL_Delay(200);
	intReceived = false;
}


static void DrawInts(uint8_t* InfBuff)
 80030e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ec:	b0c9      	sub	sp, #292	; 0x124
{
	volatile int j=0;
	volatile int shift=0;
	volatile int temp_intpos[8][8]={0};
 80030ee:	ad08      	add	r5, sp, #32
	volatile int j=0;
 80030f0:	2100      	movs	r1, #0
	volatile int temp_intpos[8][8]={0};
 80030f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f6:	4628      	mov	r0, r5

	for(int i=0;i<64;i++)
	{
		j=i/8;
		shift=(7-i%8);
		if( ((InfBuff[j]) & (0x01<<shift))== (0x01<<shift))  drawInts[(8*((63-i)/8))+((63-i)%8)]='*';
 80030f8:	4c4e      	ldr	r4, [pc, #312]	; (8003234 <DrawInts.constprop.0+0x14c>)
 80030fa:	f8df 8150 	ldr.w	r8, [pc, #336]	; 800324c <DrawInts.constprop.0+0x164>
	volatile int j=0;
 80030fe:	9100      	str	r1, [sp, #0]
		else  drawInts[(8*((63-i)/8))+((63-i)%8)]='0';
 8003100:	2630      	movs	r6, #48	; 0x30
	volatile int shift=0;
 8003102:	9101      	str	r1, [sp, #4]
		if( ((InfBuff[j]) & (0x01<<shift))== (0x01<<shift))  drawInts[(8*((63-i)/8))+((63-i)%8)]='*';
 8003104:	272a      	movs	r7, #42	; 0x2a
	volatile int temp_intpos[8][8]={0};
 8003106:	f000 fac5 	bl	8003694 <memset>
 800310a:	233f      	movs	r3, #63	; 0x3f
		if( ((InfBuff[j]) & (0x01<<shift))== (0x01<<shift))  drawInts[(8*((63-i)/8))+((63-i)%8)]='*';
 800310c:	2001      	movs	r0, #1
		j=i/8;
 800310e:	f1c3 023f 	rsb	r2, r3, #63	; 0x3f
 8003112:	10d2      	asrs	r2, r2, #3
 8003114:	9200      	str	r2, [sp, #0]
 8003116:	f003 0207 	and.w	r2, r3, #7
		shift=(7-i%8);
 800311a:	9201      	str	r2, [sp, #4]
		if( ((InfBuff[j]) & (0x01<<shift))== (0x01<<shift))  drawInts[(8*((63-i)/8))+((63-i)%8)]='*';
 800311c:	9900      	ldr	r1, [sp, #0]
 800311e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003122:	5d09      	ldrb	r1, [r1, r4]
 8003124:	9a01      	ldr	r2, [sp, #4]
 8003126:	fa00 fe0e 	lsl.w	lr, r0, lr
 800312a:	ea01 010e 	and.w	r1, r1, lr
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	4291      	cmp	r1, r2
 8003134:	ea4f 02e3 	mov.w	r2, r3, asr #3
 8003138:	f003 0107 	and.w	r1, r3, #7
 800313c:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8003140:	bf0c      	ite	eq
 8003142:	5457      	strbeq	r7, [r2, r1]
		else  drawInts[(8*((63-i)/8))+((63-i)%8)]='0';
 8003144:	5456      	strbne	r6, [r2, r1]
	for(int i=0;i<64;i++)
 8003146:	f113 33ff 	adds.w	r3, r3, #4294967295
 800314a:	d2e0      	bcs.n	800310e <DrawInts.constprop.0+0x26>

	for(int i=0;i<8;i++)       //line
	{
	   for(int j=0;j<8;j++)   //col
	   {
		  printf("%c   ",drawInts[j+i*8]);
 800314c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8003250 <DrawInts.constprop.0+0x168>
	for(int i=0;i<64;i++)
 8003150:	2700      	movs	r7, #0

		  if (drawInts[j+i*8]=='*')  temp_intpos[i][j]=1;
 8003152:	f04f 0a01 	mov.w	sl, #1
 8003156:	ea4f 0bc7 	mov.w	fp, r7, lsl #3
 800315a:	f10b 34ff 	add.w	r4, fp, #4294967295
 800315e:	4444      	add	r4, r8
	volatile int temp_intpos[8][8]={0};
 8003160:	2600      	movs	r6, #0
		  printf("%c   ",drawInts[j+i*8]);
 8003162:	7861      	ldrb	r1, [r4, #1]
 8003164:	4648      	mov	r0, r9
 8003166:	f000 fa9d 	bl	80036a4 <iprintf>
		  if (drawInts[j+i*8]=='*')  temp_intpos[i][j]=1;
 800316a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800316e:	2b2a      	cmp	r3, #42	; 0x2a
 8003170:	bf08      	it	eq
 8003172:	eb0b 0306 	addeq.w	r3, fp, r6
	   for(int j=0;j<8;j++)   //col
 8003176:	f106 0601 	add.w	r6, r6, #1
		  if (drawInts[j+i*8]=='*')  temp_intpos[i][j]=1;
 800317a:	bf08      	it	eq
 800317c:	f845 a023 	streq.w	sl, [r5, r3, lsl #2]
	   for(int j=0;j<8;j++)   //col
 8003180:	2e08      	cmp	r6, #8
 8003182:	d1ee      	bne.n	8003162 <DrawInts.constprop.0+0x7a>
				   temp_intpos[i][j]=1;
		          kk++;
		         }
		  }*/
	   }
	   puts("\n");
 8003184:	482c      	ldr	r0, [pc, #176]	; (8003238 <DrawInts.constprop.0+0x150>)
	for(int i=0;i<8;i++)       //line
 8003186:	3701      	adds	r7, #1
	   puts("\n");
 8003188:	f000 fb00 	bl	800378c <puts>
	for(int i=0;i<8;i++)       //line
 800318c:	2f08      	cmp	r7, #8
 800318e:	d1e2      	bne.n	8003156 <DrawInts.constprop.0+0x6e>
 8003190:	2400      	movs	r4, #0
 8003192:	492a      	ldr	r1, [pc, #168]	; (800323c <DrawInts.constprop.0+0x154>)
		ii=i/16;
		for(int j =0;j<128;j++)       //column
		{
			jj=j/16;
			if(temp_intpos[ii][jj]==1)  LCD_buff[(j+128*i)]=0x00F8;
			else LCD_buff[(j+128*i)]=0x0000;
 8003194:	4626      	mov	r6, r4
			if(temp_intpos[ii][jj]==1)  LCD_buff[(j+128*i)]=0x00F8;
 8003196:	27f8      	movs	r7, #248	; 0xf8
		ii=i/16;
 8003198:	1122      	asrs	r2, r4, #4
 800319a:	ea4f 1ec4 	mov.w	lr, r4, lsl #7
		for(int j =0;j<128;j++)       //column
 800319e:	2300      	movs	r3, #0
			if(temp_intpos[ii][jj]==1)  LCD_buff[(j+128*i)]=0x00F8;
 80031a0:	00d2      	lsls	r2, r2, #3
 80031a2:	eb02 1023 	add.w	r0, r2, r3, asr #4
 80031a6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80031aa:	2801      	cmp	r0, #1
 80031ac:	eb03 000e 	add.w	r0, r3, lr
		for(int j =0;j<128;j++)       //column
 80031b0:	f103 0301 	add.w	r3, r3, #1
			if(temp_intpos[ii][jj]==1)  LCD_buff[(j+128*i)]=0x00F8;
 80031b4:	bf0c      	ite	eq
 80031b6:	f821 7010 	strheq.w	r7, [r1, r0, lsl #1]
			else LCD_buff[(j+128*i)]=0x0000;
 80031ba:	f821 6010 	strhne.w	r6, [r1, r0, lsl #1]
		for(int j =0;j<128;j++)       //column
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d1ef      	bne.n	80031a2 <DrawInts.constprop.0+0xba>
	for(int i =0;i<128;i++)          //line
 80031c2:	3401      	adds	r4, #1
 80031c4:	2c80      	cmp	r4, #128	; 0x80
 80031c6:	d1e7      	bne.n	8003198 <DrawInts.constprop.0+0xb0>

		}

	}
	char  cur_Temp[15]="Rm temp:";
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <DrawInts.constprop.0+0x158>)
	char  cur_value[5]={0};
	itoa((int)(ThermValue*100),cur_value, 10);
 80031ca:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003244 <DrawInts.constprop.0+0x15c>
	char  cur_Temp[15]="Rm temp:";
 80031ce:	6810      	ldr	r0, [r2, #0]
 80031d0:	6851      	ldr	r1, [r2, #4]
 80031d2:	7a12      	ldrb	r2, [r2, #8]
 80031d4:	ab04      	add	r3, sp, #16
 80031d6:	c303      	stmia	r3!, {r0, r1}
 80031d8:	701a      	strb	r2, [r3, #0]
	itoa((int)(ThermValue*100),cur_value, 10);
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <DrawInts.constprop.0+0x160>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	ee67 7a87 	vmul.f32	s15, s15, s14
	char  cur_Temp[15]="Rm temp:";
 80031e4:	2500      	movs	r5, #0
	itoa((int)(ThermValue*100),cur_value, 10);
 80031e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ea:	220a      	movs	r2, #10
 80031ec:	ee17 0a90 	vmov	r0, s15
 80031f0:	a902      	add	r1, sp, #8
	char  cur_Temp[15]="Rm temp:";
 80031f2:	f8cd 5019 	str.w	r5, [sp, #25]
 80031f6:	f8ad 501d 	strh.w	r5, [sp, #29]
	char  cur_value[5]={0};
 80031fa:	9502      	str	r5, [sp, #8]
 80031fc:	f88d 500c 	strb.w	r5, [sp, #12]
	itoa((int)(ThermValue*100),cur_value, 10);
 8003200:	f000 fa46 	bl	8003690 <itoa>
	strcat(cur_Temp, cur_value);
 8003204:	a902      	add	r1, sp, #8
 8003206:	a804      	add	r0, sp, #16
 8003208:	f000 fac8 	bl	800379c <strcat>
	showText(cur_Temp);
 800320c:	a804      	add	r0, sp, #16
 800320e:	f7ff fa6d 	bl	80026ec <showText>
	setCursorAddr(0, 0, 128, 128);
 8003212:	4623      	mov	r3, r4
 8003214:	4622      	mov	r2, r4
 8003216:	4629      	mov	r1, r5
 8003218:	4628      	mov	r0, r5
 800321a:	f7ff fc11 	bl	8002a40 <setCursorAddr>
	writeCmd(0x2c);
 800321e:	202c      	movs	r0, #44	; 0x2c
 8003220:	f7ff fa28 	bl	8002674 <writeCmd>
	writeDatBytes((uint8_t*)LCD_buff, sizeof(LCD_buff));
 8003224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <DrawInts.constprop.0+0x154>)
 800322a:	f7ff fa79 	bl	8002720 <writeDatBytes>

}
 800322e:	b049      	add	sp, #292	; 0x124
 8003230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003234:	20000290 	.word	0x20000290
 8003238:	08004869 	.word	0x08004869
 800323c:	20001bd8 	.word	0x20001bd8
 8003240:	08004614 	.word	0x08004614
 8003244:	42c80000 	.word	0x42c80000
 8003248:	20000200 	.word	0x20000200
 800324c:	20000b98 	.word	0x20000b98
 8003250:	08004863 	.word	0x08004863

08003254 <_write>:
{
 8003254:	b510      	push	{r4, lr}
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003256:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003258:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 800325c:	4293      	cmp	r3, r2
 800325e:	db01      	blt.n	8003264 <_write+0x10>
}
 8003260:	4610      	mov	r0, r2
 8003262:	bd10      	pop	{r4, pc}
 8003264:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8003268:	07c0      	lsls	r0, r0, #31
 800326a:	d503      	bpl.n	8003274 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800326c:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003270:	07c0      	lsls	r0, r0, #31
 8003272:	d402      	bmi.n	800327a <_write+0x26>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003274:	3301      	adds	r3, #1
 8003276:	e7f1      	b.n	800325c <_write+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8003278:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	2800      	cmp	r0, #0
 800327e:	d0fb      	beq.n	8003278 <_write+0x24>
		ITM_SendChar(*ptr++);
 8003280:	5cc8      	ldrb	r0, [r1, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003282:	7020      	strb	r0, [r4, #0]
 8003284:	e7f6      	b.n	8003274 <_write+0x20>
	...

08003288 <show_buffer>:
{
 8003288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		printf("No.(%d.%d)-%d\t",line,col, (int)(buff[(col+line*8)]*100));  //float can not work
 800328c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80032e0 <show_buffer+0x58>
	puts("\n");
 8003290:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80032e4 <show_buffer+0x5c>
{
 8003294:	ed2d 8b02 	vpush	{d8}
		printf("No.(%d.%d)-%d\t",line,col, (int)(buff[(col+line*8)]*100));  //float can not work
 8003298:	ed9f 8a10 	vldr	s16, [pc, #64]	; 80032dc <show_buffer+0x54>
{
 800329c:	4607      	mov	r7, r0
	for(int line=0; line<8;line++)
 800329e:	2400      	movs	r4, #0
 80032a0:	eb07 1644 	add.w	r6, r7, r4, lsl #5
{
 80032a4:	2500      	movs	r5, #0
		sum+=buff[col+line*8];
 80032a6:	ecf6 7a01 	vldmia	r6!, {s15}
		printf("No.(%d.%d)-%d\t",line,col, (int)(buff[(col+line*8)]*100));  //float can not work
 80032aa:	ee67 7a88 	vmul.f32	s15, s15, s16
 80032ae:	462a      	mov	r2, r5
 80032b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b4:	4621      	mov	r1, r4
 80032b6:	ee17 3a90 	vmov	r3, s15
 80032ba:	4640      	mov	r0, r8
		for (int col=0;col<8;col++)
 80032bc:	3501      	adds	r5, #1
		printf("No.(%d.%d)-%d\t",line,col, (int)(buff[(col+line*8)]*100));  //float can not work
 80032be:	f000 f9f1 	bl	80036a4 <iprintf>
		for (int col=0;col<8;col++)
 80032c2:	2d08      	cmp	r5, #8
 80032c4:	d1ef      	bne.n	80032a6 <show_buffer+0x1e>
	puts("\n");
 80032c6:	4648      	mov	r0, r9
	for(int line=0; line<8;line++)
 80032c8:	3401      	adds	r4, #1
	puts("\n");
 80032ca:	f000 fa5f 	bl	800378c <puts>
	for(int line=0; line<8;line++)
 80032ce:	2c08      	cmp	r4, #8
 80032d0:	d1e6      	bne.n	80032a0 <show_buffer+0x18>
}
 80032d2:	ecbd 8b02 	vpop	{d8}
 80032d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032da:	bf00      	nop
 80032dc:	42c80000 	.word	0x42c80000
 80032e0:	080048b5 	.word	0x080048b5
 80032e4:	08004869 	.word	0x08004869

080032e8 <main>:
 {
 80032e8:	b580      	push	{r7, lr}
	InitBoard();
 80032ea:	f7ff fda5 	bl	8002e38 <InitBoard>
	AMG8833_Init();
 80032ee:	f7ff f833 	bl	8002358 <AMG8833_Init>
	LCD_Init();
 80032f2:	f7ff fa85 	bl	8002800 <LCD_Init>
	fillScreen(color_blue);
 80032f6:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
 80032fa:	f7ff fbbc 	bl	8002a76 <fillScreen>
	memset(pixdata,0, sizeof(pixdata));
 80032fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003302:	2100      	movs	r1, #0
 8003304:	4829      	ldr	r0, [pc, #164]	; (80033ac <main+0xc4>)
	  if(intReceived)
 8003306:	4d2a      	ldr	r5, [pc, #168]	; (80033b0 <main+0xc8>)
	  AMG8833_Read_pixdels(pixdata);                  //output temperature
 8003308:	4c28      	ldr	r4, [pc, #160]	; (80033ac <main+0xc4>)
	  ThermValue=0.0625*AMG8833_Read_thermistor();
 800330a:	4f2a      	ldr	r7, [pc, #168]	; (80033b4 <main+0xcc>)
	memset(pixdata,0, sizeof(pixdata));
 800330c:	f000 f9c2 	bl	8003694 <memset>
	memset(colorbuff,0, sizeof(colorbuff));
 8003310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003314:	2100      	movs	r1, #0
 8003316:	4828      	ldr	r0, [pc, #160]	; (80033b8 <main+0xd0>)
 8003318:	f000 f9bc 	bl	8003694 <memset>
	Set_interrupt(upperdegree, lowerdegree);
 800331c:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8003320:	eeb3 0a08 	vmov.f32	s0, #56	; 0x41c00000  24.0
 8003324:	f7ff f8c8 	bl	80024b8 <Set_interrupt>
	Enable_interrupt();
 8003328:	f7ff f950 	bl	80025cc <Enable_interrupt>
	  ThermValue=0.0625*AMG8833_Read_thermistor();
 800332c:	2600      	movs	r6, #0
	  if(intReceived)
 800332e:	782b      	ldrb	r3, [r5, #0]
 8003330:	b15b      	cbz	r3, 800334a <main+0x62>
	getInterrupt(pixelInts);
 8003332:	4822      	ldr	r0, [pc, #136]	; (80033bc <main+0xd4>)
 8003334:	f7ff f984 	bl	8002640 <getInterrupt>
	printf("\n*********** interrupt received! ***************\n");
 8003338:	4821      	ldr	r0, [pc, #132]	; (80033c0 <main+0xd8>)
 800333a:	f000 fa27 	bl	800378c <puts>
	DrawInts(pixelInts);
 800333e:	f7ff fed3 	bl	80030e8 <DrawInts.constprop.0>
	Clear_interrupt();
 8003342:	f7ff f95f 	bl	8002604 <Clear_interrupt>
	intReceived = false;
 8003346:	2300      	movs	r3, #0
 8003348:	702b      	strb	r3, [r5, #0]
	  AMG8833_Read_pixdels(pixdata);                  //output temperature
 800334a:	4620      	mov	r0, r4
 800334c:	f7ff f85c 	bl	8002408 <AMG8833_Read_pixdels>
	  printf("\n**********Real Temp is:\n");
 8003350:	481c      	ldr	r0, [pc, #112]	; (80033c4 <main+0xdc>)
 8003352:	f000 fa1b 	bl	800378c <puts>
	  show_buffer(pixdata);
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff ff96 	bl	8003288 <show_buffer>
	  ThermValue=0.0625*AMG8833_Read_thermistor();
 800335c:	f7ff f88c 	bl	8002478 <AMG8833_Read_thermistor>
 8003360:	f7fd f8d8 	bl	8000514 <__aeabi_i2d>
 8003364:	4632      	mov	r2, r6
 8003366:	463b      	mov	r3, r7
 8003368:	f7fd f93a 	bl	80005e0 <__aeabi_dmul>
 800336c:	f7fd fb72 	bl	8000a54 <__aeabi_d2f>
 8003370:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <main+0xe0>)
 8003372:	6018      	str	r0, [r3, #0]
	  offset=ThermValue-RM_TEMP;         // Calibration  ****increase: color-> blue  decrease: color->red*******
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <main+0xe4>)
 800337a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800337e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003382:	edc3 7a00 	vstr	s15, [r3]
		  Set_interrupt(upperdegree+offset, lowerdegree+offset);        //reset the threshold
 8003386:	ed93 0a00 	vldr	s0, [r3]
 800338a:	edd3 0a00 	vldr	s1, [r3]
 800338e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8003392:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8003396:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 800339a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800339e:	f7ff f88b 	bl	80024b8 <Set_interrupt>
	  fillScreen(0x0000);
 80033a2:	2000      	movs	r0, #0
 80033a4:	f7ff fb67 	bl	8002a76 <fillScreen>
	  if(intReceived)
 80033a8:	e7c1      	b.n	800332e <main+0x46>
 80033aa:	bf00      	nop
 80033ac:	20000a98 	.word	0x20000a98
 80033b0:	20000204 	.word	0x20000204
 80033b4:	3fb00000 	.word	0x3fb00000
 80033b8:	20000298 	.word	0x20000298
 80033bc:	20000290 	.word	0x20000290
 80033c0:	0800486b 	.word	0x0800486b
 80033c4:	0800489c 	.word	0x0800489c
 80033c8:	20000200 	.word	0x20000200
 80033cc:	20000208 	.word	0x20000208

080033d0 <Init_SPI_1>:


void Init_SPI_1(void)
{

	SPI_Handle.Instance = SPI1;
 80033d0:	480d      	ldr	r0, [pc, #52]	; (8003408 <Init_SPI_1+0x38>)
	SPI_Handle.Init.Mode = SPI_MODE_MASTER;
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <Init_SPI_1+0x3c>)
	SPI_Handle.Init.Direction = SPI_DIRECTION_2LINES;
	SPI_Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 80033d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
	SPI_Handle.Init.Mode = SPI_MODE_MASTER;
 80033d8:	f44f 7c82 	mov.w	ip, #260	; 0x104
	SPI_Handle.Init.DataSize = SPI_DATASIZE_8BIT;
 80033dc:	60c2      	str	r2, [r0, #12]
	SPI_Handle.Init.CLKPolarity = SPI_POLARITY_LOW;
	SPI_Handle.Init.CLKPhase = SPI_PHASE_1EDGE;
	SPI_Handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80033de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	SPI_Handle.Init.Mode = SPI_MODE_MASTER;
 80033e2:	e880 1008 	stmia.w	r0, {r3, ip}
	SPI_Handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80033e6:	6182      	str	r2, [r0, #24]
	SPI_Handle.Init.Direction = SPI_DIRECTION_2LINES;
 80033e8:	2300      	movs	r3, #0
	SPI_Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;//2
 80033ea:	2218      	movs	r2, #24
	SPI_Handle.Init.Direction = SPI_DIRECTION_2LINES;
 80033ec:	6083      	str	r3, [r0, #8]
	SPI_Handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ee:	6103      	str	r3, [r0, #16]
	SPI_Handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033f0:	6143      	str	r3, [r0, #20]
	SPI_Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;//2
 80033f2:	61c2      	str	r2, [r0, #28]
	SPI_Handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033f4:	6203      	str	r3, [r0, #32]
	SPI_Handle.Init.TIMode = SPI_TIMODE_DISABLE;
 80033f6:	6243      	str	r3, [r0, #36]	; 0x24
	SPI_Handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f8:	6283      	str	r3, [r0, #40]	; 0x28
	SPI_Handle.Init.CRCPolynomial = 7;
 80033fa:	2207      	movs	r2, #7
	SPI_Handle.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033fc:	6303      	str	r3, [r0, #48]	; 0x30
	SPI_Handle.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033fe:	2308      	movs	r3, #8
	SPI_Handle.Init.CRCPolynomial = 7;
 8003400:	62c2      	str	r2, [r0, #44]	; 0x2c
	SPI_Handle.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003402:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&SPI_Handle) != HAL_OK)
 8003404:	f7fe bf3f 	b.w	8002286 <HAL_SPI_Init>
 8003408:	20009bd8 	.word	0x20009bd8
 800340c:	40013000 	.word	0x40013000

08003410 <SPI_initialization>:
}


void SPI_initialization(void)
{
	__HAL_RCC_SPI1_CLK_ENABLE();
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <SPI_initialization+0x60>)
 8003412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003414:	b513      	push	{r0, r1, r4, lr}
	__HAL_RCC_SPI1_CLK_ENABLE();
 8003416:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800341a:	661a      	str	r2, [r3, #96]	; 0x60
 800341c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	Init_GPIO_PIN(&SPIx->Mosi);
 800341e:	4c15      	ldr	r4, [pc, #84]	; (8003474 <SPI_initialization+0x64>)
	__HAL_RCC_SPI1_CLK_ENABLE();
 8003420:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003424:	9200      	str	r2, [sp, #0]
 8003426:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003428:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	9301      	str	r3, [sp, #4]
	Init_GPIO_PIN(&SPIx->Mosi);
 8003438:	4620      	mov	r0, r4
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800343a:	9b01      	ldr	r3, [sp, #4]
	Init_GPIO_PIN(&SPIx->Mosi);
 800343c:	f7ff fd76 	bl	8002f2c <Init_GPIO_PIN>
	Init_GPIO_PIN(&SPIx->Sclk);
 8003440:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8003444:	f7ff fd72 	bl	8002f2c <Init_GPIO_PIN>
	Init_GPIO_PIN(&SPIx->Nss);
 8003448:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800344c:	f7ff fd6e 	bl	8002f2c <Init_GPIO_PIN>
	HAL_GPIO_WritePin(SPIx->Nss.port, SPIx->Nss.pin, GPIO_PIN_SET); //CS->1
 8003450:	2201      	movs	r2, #1
 8003452:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 8003456:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003458:	f7fd fcf4 	bl	8000e44 <HAL_GPIO_WritePin>
	Init_GPIO_SPI(&SPI_1);
	Init_SPI_1();
 800345c:	f7ff ffb8 	bl	80033d0 <Init_SPI_1>
	__HAL_SPI_ENABLE(&SPI_Handle);
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <SPI_initialization+0x68>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	6813      	ldr	r3, [r2, #0]
 8003466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	b002      	add	sp, #8
 800346e:	bd10      	pop	{r4, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	20000108 	.word	0x20000108
 8003478:	20009bd8 	.word	0x20009bd8

0800347c <SPI_transmit_8bit>:


void SPI_transmit_8bit(SPI_HandleTypeDef* hspi, uint8_t dat )
{

	hspi->Instance->CR1|=SPI_CR1_SPE;
 800347c:	6803      	ldr	r3, [r0, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003484:	601a      	str	r2, [r3, #0]
	while((hspi->Instance->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	07d2      	lsls	r2, r2, #31
 800348a:	d40c      	bmi.n	80034a6 <SPI_transmit_8bit+0x2a>
	{
      (void)hspi->Instance->DR;
	}
	while((hspi->Instance->SR & SPI_SR_TXE) != SPI_SR_TXE)
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	0792      	lsls	r2, r2, #30
 8003490:	d5fc      	bpl.n	800348c <SPI_transmit_8bit+0x10>
	{
	}
	*((__IO uint8_t *)&(hspi->Instance->DR))= dat;
 8003492:	7319      	strb	r1, [r3, #12]
	while((hspi->Instance->SR & SPI_SR_RXNE) != SPI_SR_RXNE)
 8003494:	6803      	ldr	r3, [r0, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	07d1      	lsls	r1, r2, #31
 800349a:	d5fc      	bpl.n	8003496 <SPI_transmit_8bit+0x1a>
	{
	}
	(void)hspi->Instance->DR;
 800349c:	68da      	ldr	r2, [r3, #12]
	while((hspi->Instance->SR & SPI_SR_BSY) == SPI_SR_BSY)
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	0612      	lsls	r2, r2, #24
 80034a2:	d4fc      	bmi.n	800349e <SPI_transmit_8bit+0x22>
	{
	}
}
 80034a4:	4770      	bx	lr
      (void)hspi->Instance->DR;
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	e7ed      	b.n	8003486 <SPI_transmit_8bit+0xa>
	...

080034ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_MspInit+0x2c>)
 80034ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	661a      	str	r2, [r3, #96]	; 0x60
 80034b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80034b8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	f002 0201 	and.w	r2, r2, #1
 80034be:	9200      	str	r2, [sp, #0]
 80034c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034c8:	659a      	str	r2, [r3, #88]	; 0x58
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034d4:	b002      	add	sp, #8
 80034d6:	4770      	bx	lr
 80034d8:	40021000 	.word	0x40021000

080034dc <NMI_Handler>:
 80034dc:	4770      	bx	lr

080034de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034de:	e7fe      	b.n	80034de <HardFault_Handler>

080034e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e0:	e7fe      	b.n	80034e0 <MemManage_Handler>

080034e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e2:	e7fe      	b.n	80034e2 <BusFault_Handler>

080034e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e4:	e7fe      	b.n	80034e4 <UsageFault_Handler>

080034e6 <SVC_Handler>:
 80034e6:	4770      	bx	lr

080034e8 <DebugMon_Handler>:
 80034e8:	4770      	bx	lr

080034ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ea:	4770      	bx	lr

080034ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034ec:	f7fd bb38 	b.w	8000b60 <HAL_IncTick>

080034f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80034f2:	2020      	movs	r0, #32
 80034f4:	f7fd fcac 	bl	8000e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80034f8:	2040      	movs	r0, #64	; 0x40
 80034fa:	f7fd fca9 	bl	8000e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80034fe:	2080      	movs	r0, #128	; 0x80
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003504:	f7fd bca4 	b.w	8000e50 <HAL_GPIO_EXTI_IRQHandler>

08003508 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	460e      	mov	r6, r1
 800350c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	460c      	mov	r4, r1
 8003510:	1ba3      	subs	r3, r4, r6
 8003512:	429d      	cmp	r5, r3
 8003514:	dc01      	bgt.n	800351a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003516:	4628      	mov	r0, r5
 8003518:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800351a:	f3af 8000 	nop.w
 800351e:	f804 0b01 	strb.w	r0, [r4], #1
 8003522:	e7f5      	b.n	8003510 <_read+0x8>

08003524 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003524:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <_sbrk+0x2c>)
 8003528:	6819      	ldr	r1, [r3, #0]
{
 800352a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800352c:	b909      	cbnz	r1, 8003532 <_sbrk+0xe>
		heap_end = &end;
 800352e:	4909      	ldr	r1, [pc, #36]	; (8003554 <_sbrk+0x30>)
 8003530:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003532:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003534:	4669      	mov	r1, sp
 8003536:	4402      	add	r2, r0
 8003538:	428a      	cmp	r2, r1
 800353a:	d906      	bls.n	800354a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800353c:	f000 f866 	bl	800360c <__errno>
 8003540:	230c      	movs	r3, #12
 8003542:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800354a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800354c:	bd08      	pop	{r3, pc}
 800354e:	bf00      	nop
 8003550:	2000020c 	.word	0x2000020c
 8003554:	20009c40 	.word	0x20009c40

08003558 <_close>:

int _close(int file)
{
	return -1;
}
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	4770      	bx	lr

0800355e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800355e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003562:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003564:	2000      	movs	r0, #0
 8003566:	4770      	bx	lr

08003568 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003568:	2001      	movs	r0, #1
 800356a:	4770      	bx	lr

0800356c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800356c:	2000      	movs	r0, #0
 800356e:	4770      	bx	lr

08003570 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003570:	490f      	ldr	r1, [pc, #60]	; (80035b0 <SystemInit+0x40>)
 8003572:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003576:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <SystemInit+0x44>)
 8003580:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003582:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800358a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003592:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003596:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800359c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035a4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80035a6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035ac:	608b      	str	r3, [r1, #8]
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00
 80035b4:	40021000 	.word	0x40021000

080035b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035be:	e003      	b.n	80035c8 <LoopCopyDataInit>

080035c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80035c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035c6:	3104      	adds	r1, #4

080035c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035c8:	480b      	ldr	r0, [pc, #44]	; (80035f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80035cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035d0:	d3f6      	bcc.n	80035c0 <CopyDataInit>
	ldr	r2, =_sbss
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <LoopForever+0x12>)
	b	LoopFillZerobss
 80035d4:	e002      	b.n	80035dc <LoopFillZerobss>

080035d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035d8:	f842 3b04 	str.w	r3, [r2], #4

080035dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <LoopForever+0x16>)
	cmp	r2, r3
 80035de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80035e0:	d3f9      	bcc.n	80035d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035e2:	f7ff ffc5 	bl	8003570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035e6:	f000 f817 	bl	8003618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ea:	f7ff fe7d 	bl	80032e8 <main>

080035ee <LoopForever>:

LoopForever:
    b LoopForever
 80035ee:	e7fe      	b.n	80035ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035f0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80035f4:	080049cc 	.word	0x080049cc
	ldr	r0, =_sdata
 80035f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80035fc:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8003600:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8003604:	20009c40 	.word	0x20009c40

08003608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003608:	e7fe      	b.n	8003608 <ADC1_2_IRQHandler>
	...

0800360c <__errno>:
 800360c:	4b01      	ldr	r3, [pc, #4]	; (8003614 <__errno+0x8>)
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	2000017c 	.word	0x2000017c

08003618 <__libc_init_array>:
 8003618:	b570      	push	{r4, r5, r6, lr}
 800361a:	4e0d      	ldr	r6, [pc, #52]	; (8003650 <__libc_init_array+0x38>)
 800361c:	4c0d      	ldr	r4, [pc, #52]	; (8003654 <__libc_init_array+0x3c>)
 800361e:	1ba4      	subs	r4, r4, r6
 8003620:	10a4      	asrs	r4, r4, #2
 8003622:	2500      	movs	r5, #0
 8003624:	42a5      	cmp	r5, r4
 8003626:	d109      	bne.n	800363c <__libc_init_array+0x24>
 8003628:	4e0b      	ldr	r6, [pc, #44]	; (8003658 <__libc_init_array+0x40>)
 800362a:	4c0c      	ldr	r4, [pc, #48]	; (800365c <__libc_init_array+0x44>)
 800362c:	f000 ffe6 	bl	80045fc <_init>
 8003630:	1ba4      	subs	r4, r4, r6
 8003632:	10a4      	asrs	r4, r4, #2
 8003634:	2500      	movs	r5, #0
 8003636:	42a5      	cmp	r5, r4
 8003638:	d105      	bne.n	8003646 <__libc_init_array+0x2e>
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003640:	4798      	blx	r3
 8003642:	3501      	adds	r5, #1
 8003644:	e7ee      	b.n	8003624 <__libc_init_array+0xc>
 8003646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800364a:	4798      	blx	r3
 800364c:	3501      	adds	r5, #1
 800364e:	e7f2      	b.n	8003636 <__libc_init_array+0x1e>
 8003650:	080049c4 	.word	0x080049c4
 8003654:	080049c4 	.word	0x080049c4
 8003658:	080049c4 	.word	0x080049c4
 800365c:	080049c8 	.word	0x080049c8

08003660 <__itoa>:
 8003660:	1e93      	subs	r3, r2, #2
 8003662:	2b22      	cmp	r3, #34	; 0x22
 8003664:	b510      	push	{r4, lr}
 8003666:	460c      	mov	r4, r1
 8003668:	d904      	bls.n	8003674 <__itoa+0x14>
 800366a:	2300      	movs	r3, #0
 800366c:	700b      	strb	r3, [r1, #0]
 800366e:	461c      	mov	r4, r3
 8003670:	4620      	mov	r0, r4
 8003672:	bd10      	pop	{r4, pc}
 8003674:	2a0a      	cmp	r2, #10
 8003676:	d109      	bne.n	800368c <__itoa+0x2c>
 8003678:	2800      	cmp	r0, #0
 800367a:	da07      	bge.n	800368c <__itoa+0x2c>
 800367c:	232d      	movs	r3, #45	; 0x2d
 800367e:	700b      	strb	r3, [r1, #0]
 8003680:	4240      	negs	r0, r0
 8003682:	2101      	movs	r1, #1
 8003684:	4421      	add	r1, r4
 8003686:	f000 f899 	bl	80037bc <__utoa>
 800368a:	e7f1      	b.n	8003670 <__itoa+0x10>
 800368c:	2100      	movs	r1, #0
 800368e:	e7f9      	b.n	8003684 <__itoa+0x24>

08003690 <itoa>:
 8003690:	f7ff bfe6 	b.w	8003660 <__itoa>

08003694 <memset>:
 8003694:	4402      	add	r2, r0
 8003696:	4603      	mov	r3, r0
 8003698:	4293      	cmp	r3, r2
 800369a:	d100      	bne.n	800369e <memset+0xa>
 800369c:	4770      	bx	lr
 800369e:	f803 1b01 	strb.w	r1, [r3], #1
 80036a2:	e7f9      	b.n	8003698 <memset+0x4>

080036a4 <iprintf>:
 80036a4:	b40f      	push	{r0, r1, r2, r3}
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <iprintf+0x2c>)
 80036a8:	b513      	push	{r0, r1, r4, lr}
 80036aa:	681c      	ldr	r4, [r3, #0]
 80036ac:	b124      	cbz	r4, 80036b8 <iprintf+0x14>
 80036ae:	69a3      	ldr	r3, [r4, #24]
 80036b0:	b913      	cbnz	r3, 80036b8 <iprintf+0x14>
 80036b2:	4620      	mov	r0, r4
 80036b4:	f000 fa74 	bl	8003ba0 <__sinit>
 80036b8:	ab05      	add	r3, sp, #20
 80036ba:	9a04      	ldr	r2, [sp, #16]
 80036bc:	68a1      	ldr	r1, [r4, #8]
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	4620      	mov	r0, r4
 80036c2:	f000 fc31 	bl	8003f28 <_vfiprintf_r>
 80036c6:	b002      	add	sp, #8
 80036c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036cc:	b004      	add	sp, #16
 80036ce:	4770      	bx	lr
 80036d0:	2000017c 	.word	0x2000017c

080036d4 <_puts_r>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	460e      	mov	r6, r1
 80036d8:	4605      	mov	r5, r0
 80036da:	b118      	cbz	r0, 80036e4 <_puts_r+0x10>
 80036dc:	6983      	ldr	r3, [r0, #24]
 80036de:	b90b      	cbnz	r3, 80036e4 <_puts_r+0x10>
 80036e0:	f000 fa5e 	bl	8003ba0 <__sinit>
 80036e4:	69ab      	ldr	r3, [r5, #24]
 80036e6:	68ac      	ldr	r4, [r5, #8]
 80036e8:	b913      	cbnz	r3, 80036f0 <_puts_r+0x1c>
 80036ea:	4628      	mov	r0, r5
 80036ec:	f000 fa58 	bl	8003ba0 <__sinit>
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <_puts_r+0xac>)
 80036f2:	429c      	cmp	r4, r3
 80036f4:	d117      	bne.n	8003726 <_puts_r+0x52>
 80036f6:	686c      	ldr	r4, [r5, #4]
 80036f8:	89a3      	ldrh	r3, [r4, #12]
 80036fa:	071b      	lsls	r3, r3, #28
 80036fc:	d51d      	bpl.n	800373a <_puts_r+0x66>
 80036fe:	6923      	ldr	r3, [r4, #16]
 8003700:	b1db      	cbz	r3, 800373a <_puts_r+0x66>
 8003702:	3e01      	subs	r6, #1
 8003704:	68a3      	ldr	r3, [r4, #8]
 8003706:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800370a:	3b01      	subs	r3, #1
 800370c:	60a3      	str	r3, [r4, #8]
 800370e:	b9e9      	cbnz	r1, 800374c <_puts_r+0x78>
 8003710:	2b00      	cmp	r3, #0
 8003712:	da2e      	bge.n	8003772 <_puts_r+0x9e>
 8003714:	4622      	mov	r2, r4
 8003716:	210a      	movs	r1, #10
 8003718:	4628      	mov	r0, r5
 800371a:	f000 f88f 	bl	800383c <__swbuf_r>
 800371e:	3001      	adds	r0, #1
 8003720:	d011      	beq.n	8003746 <_puts_r+0x72>
 8003722:	200a      	movs	r0, #10
 8003724:	bd70      	pop	{r4, r5, r6, pc}
 8003726:	4b17      	ldr	r3, [pc, #92]	; (8003784 <_puts_r+0xb0>)
 8003728:	429c      	cmp	r4, r3
 800372a:	d101      	bne.n	8003730 <_puts_r+0x5c>
 800372c:	68ac      	ldr	r4, [r5, #8]
 800372e:	e7e3      	b.n	80036f8 <_puts_r+0x24>
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <_puts_r+0xb4>)
 8003732:	429c      	cmp	r4, r3
 8003734:	bf08      	it	eq
 8003736:	68ec      	ldreq	r4, [r5, #12]
 8003738:	e7de      	b.n	80036f8 <_puts_r+0x24>
 800373a:	4621      	mov	r1, r4
 800373c:	4628      	mov	r0, r5
 800373e:	f000 f8cf 	bl	80038e0 <__swsetup_r>
 8003742:	2800      	cmp	r0, #0
 8003744:	d0dd      	beq.n	8003702 <_puts_r+0x2e>
 8003746:	f04f 30ff 	mov.w	r0, #4294967295
 800374a:	bd70      	pop	{r4, r5, r6, pc}
 800374c:	2b00      	cmp	r3, #0
 800374e:	da04      	bge.n	800375a <_puts_r+0x86>
 8003750:	69a2      	ldr	r2, [r4, #24]
 8003752:	4293      	cmp	r3, r2
 8003754:	db06      	blt.n	8003764 <_puts_r+0x90>
 8003756:	290a      	cmp	r1, #10
 8003758:	d004      	beq.n	8003764 <_puts_r+0x90>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	6022      	str	r2, [r4, #0]
 8003760:	7019      	strb	r1, [r3, #0]
 8003762:	e7cf      	b.n	8003704 <_puts_r+0x30>
 8003764:	4622      	mov	r2, r4
 8003766:	4628      	mov	r0, r5
 8003768:	f000 f868 	bl	800383c <__swbuf_r>
 800376c:	3001      	adds	r0, #1
 800376e:	d1c9      	bne.n	8003704 <_puts_r+0x30>
 8003770:	e7e9      	b.n	8003746 <_puts_r+0x72>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	200a      	movs	r0, #10
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	6022      	str	r2, [r4, #0]
 800377a:	7018      	strb	r0, [r3, #0]
 800377c:	bd70      	pop	{r4, r5, r6, pc}
 800377e:	bf00      	nop
 8003780:	08004950 	.word	0x08004950
 8003784:	08004970 	.word	0x08004970
 8003788:	08004930 	.word	0x08004930

0800378c <puts>:
 800378c:	4b02      	ldr	r3, [pc, #8]	; (8003798 <puts+0xc>)
 800378e:	4601      	mov	r1, r0
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	f7ff bf9f 	b.w	80036d4 <_puts_r>
 8003796:	bf00      	nop
 8003798:	2000017c 	.word	0x2000017c

0800379c <strcat>:
 800379c:	b510      	push	{r4, lr}
 800379e:	4602      	mov	r2, r0
 80037a0:	4613      	mov	r3, r2
 80037a2:	3201      	adds	r2, #1
 80037a4:	781c      	ldrb	r4, [r3, #0]
 80037a6:	2c00      	cmp	r4, #0
 80037a8:	d1fa      	bne.n	80037a0 <strcat+0x4>
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037b4:	2a00      	cmp	r2, #0
 80037b6:	d1f9      	bne.n	80037ac <strcat+0x10>
 80037b8:	bd10      	pop	{r4, pc}
	...

080037bc <__utoa>:
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037be:	4c1e      	ldr	r4, [pc, #120]	; (8003838 <__utoa+0x7c>)
 80037c0:	b08b      	sub	sp, #44	; 0x2c
 80037c2:	4603      	mov	r3, r0
 80037c4:	460f      	mov	r7, r1
 80037c6:	466d      	mov	r5, sp
 80037c8:	f104 0e20 	add.w	lr, r4, #32
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	6861      	ldr	r1, [r4, #4]
 80037d0:	462e      	mov	r6, r5
 80037d2:	c603      	stmia	r6!, {r0, r1}
 80037d4:	3408      	adds	r4, #8
 80037d6:	4574      	cmp	r4, lr
 80037d8:	4635      	mov	r5, r6
 80037da:	d1f7      	bne.n	80037cc <__utoa+0x10>
 80037dc:	7921      	ldrb	r1, [r4, #4]
 80037de:	7131      	strb	r1, [r6, #4]
 80037e0:	1e91      	subs	r1, r2, #2
 80037e2:	6820      	ldr	r0, [r4, #0]
 80037e4:	6030      	str	r0, [r6, #0]
 80037e6:	2922      	cmp	r1, #34	; 0x22
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	d904      	bls.n	80037f8 <__utoa+0x3c>
 80037ee:	7039      	strb	r1, [r7, #0]
 80037f0:	460f      	mov	r7, r1
 80037f2:	4638      	mov	r0, r7
 80037f4:	b00b      	add	sp, #44	; 0x2c
 80037f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f8:	1e78      	subs	r0, r7, #1
 80037fa:	4606      	mov	r6, r0
 80037fc:	fbb3 f5f2 	udiv	r5, r3, r2
 8003800:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003804:	fb02 3315 	mls	r3, r2, r5, r3
 8003808:	4473      	add	r3, lr
 800380a:	1c4c      	adds	r4, r1, #1
 800380c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003810:	f806 3f01 	strb.w	r3, [r6, #1]!
 8003814:	462b      	mov	r3, r5
 8003816:	b965      	cbnz	r5, 8003832 <__utoa+0x76>
 8003818:	553d      	strb	r5, [r7, r4]
 800381a:	187a      	adds	r2, r7, r1
 800381c:	1acc      	subs	r4, r1, r3
 800381e:	42a3      	cmp	r3, r4
 8003820:	dae7      	bge.n	80037f2 <__utoa+0x36>
 8003822:	7844      	ldrb	r4, [r0, #1]
 8003824:	7815      	ldrb	r5, [r2, #0]
 8003826:	f800 5f01 	strb.w	r5, [r0, #1]!
 800382a:	3301      	adds	r3, #1
 800382c:	f802 4901 	strb.w	r4, [r2], #-1
 8003830:	e7f4      	b.n	800381c <__utoa+0x60>
 8003832:	4621      	mov	r1, r4
 8003834:	e7e2      	b.n	80037fc <__utoa+0x40>
 8003836:	bf00      	nop
 8003838:	08004908 	.word	0x08004908

0800383c <__swbuf_r>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	460e      	mov	r6, r1
 8003840:	4614      	mov	r4, r2
 8003842:	4605      	mov	r5, r0
 8003844:	b118      	cbz	r0, 800384e <__swbuf_r+0x12>
 8003846:	6983      	ldr	r3, [r0, #24]
 8003848:	b90b      	cbnz	r3, 800384e <__swbuf_r+0x12>
 800384a:	f000 f9a9 	bl	8003ba0 <__sinit>
 800384e:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <__swbuf_r+0x98>)
 8003850:	429c      	cmp	r4, r3
 8003852:	d12a      	bne.n	80038aa <__swbuf_r+0x6e>
 8003854:	686c      	ldr	r4, [r5, #4]
 8003856:	69a3      	ldr	r3, [r4, #24]
 8003858:	60a3      	str	r3, [r4, #8]
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	071a      	lsls	r2, r3, #28
 800385e:	d52e      	bpl.n	80038be <__swbuf_r+0x82>
 8003860:	6923      	ldr	r3, [r4, #16]
 8003862:	b363      	cbz	r3, 80038be <__swbuf_r+0x82>
 8003864:	6923      	ldr	r3, [r4, #16]
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	1ac0      	subs	r0, r0, r3
 800386a:	6963      	ldr	r3, [r4, #20]
 800386c:	b2f6      	uxtb	r6, r6
 800386e:	4298      	cmp	r0, r3
 8003870:	4637      	mov	r7, r6
 8003872:	db04      	blt.n	800387e <__swbuf_r+0x42>
 8003874:	4621      	mov	r1, r4
 8003876:	4628      	mov	r0, r5
 8003878:	f000 f928 	bl	8003acc <_fflush_r>
 800387c:	bb28      	cbnz	r0, 80038ca <__swbuf_r+0x8e>
 800387e:	68a3      	ldr	r3, [r4, #8]
 8003880:	3b01      	subs	r3, #1
 8003882:	60a3      	str	r3, [r4, #8]
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	6022      	str	r2, [r4, #0]
 800388a:	701e      	strb	r6, [r3, #0]
 800388c:	6963      	ldr	r3, [r4, #20]
 800388e:	3001      	adds	r0, #1
 8003890:	4298      	cmp	r0, r3
 8003892:	d004      	beq.n	800389e <__swbuf_r+0x62>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	07db      	lsls	r3, r3, #31
 8003898:	d519      	bpl.n	80038ce <__swbuf_r+0x92>
 800389a:	2e0a      	cmp	r6, #10
 800389c:	d117      	bne.n	80038ce <__swbuf_r+0x92>
 800389e:	4621      	mov	r1, r4
 80038a0:	4628      	mov	r0, r5
 80038a2:	f000 f913 	bl	8003acc <_fflush_r>
 80038a6:	b190      	cbz	r0, 80038ce <__swbuf_r+0x92>
 80038a8:	e00f      	b.n	80038ca <__swbuf_r+0x8e>
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <__swbuf_r+0x9c>)
 80038ac:	429c      	cmp	r4, r3
 80038ae:	d101      	bne.n	80038b4 <__swbuf_r+0x78>
 80038b0:	68ac      	ldr	r4, [r5, #8]
 80038b2:	e7d0      	b.n	8003856 <__swbuf_r+0x1a>
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <__swbuf_r+0xa0>)
 80038b6:	429c      	cmp	r4, r3
 80038b8:	bf08      	it	eq
 80038ba:	68ec      	ldreq	r4, [r5, #12]
 80038bc:	e7cb      	b.n	8003856 <__swbuf_r+0x1a>
 80038be:	4621      	mov	r1, r4
 80038c0:	4628      	mov	r0, r5
 80038c2:	f000 f80d 	bl	80038e0 <__swsetup_r>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0cc      	beq.n	8003864 <__swbuf_r+0x28>
 80038ca:	f04f 37ff 	mov.w	r7, #4294967295
 80038ce:	4638      	mov	r0, r7
 80038d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d2:	bf00      	nop
 80038d4:	08004950 	.word	0x08004950
 80038d8:	08004970 	.word	0x08004970
 80038dc:	08004930 	.word	0x08004930

080038e0 <__swsetup_r>:
 80038e0:	4b32      	ldr	r3, [pc, #200]	; (80039ac <__swsetup_r+0xcc>)
 80038e2:	b570      	push	{r4, r5, r6, lr}
 80038e4:	681d      	ldr	r5, [r3, #0]
 80038e6:	4606      	mov	r6, r0
 80038e8:	460c      	mov	r4, r1
 80038ea:	b125      	cbz	r5, 80038f6 <__swsetup_r+0x16>
 80038ec:	69ab      	ldr	r3, [r5, #24]
 80038ee:	b913      	cbnz	r3, 80038f6 <__swsetup_r+0x16>
 80038f0:	4628      	mov	r0, r5
 80038f2:	f000 f955 	bl	8003ba0 <__sinit>
 80038f6:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <__swsetup_r+0xd0>)
 80038f8:	429c      	cmp	r4, r3
 80038fa:	d10f      	bne.n	800391c <__swsetup_r+0x3c>
 80038fc:	686c      	ldr	r4, [r5, #4]
 80038fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003902:	b29a      	uxth	r2, r3
 8003904:	0715      	lsls	r5, r2, #28
 8003906:	d42c      	bmi.n	8003962 <__swsetup_r+0x82>
 8003908:	06d0      	lsls	r0, r2, #27
 800390a:	d411      	bmi.n	8003930 <__swsetup_r+0x50>
 800390c:	2209      	movs	r2, #9
 800390e:	6032      	str	r2, [r6, #0]
 8003910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003914:	81a3      	strh	r3, [r4, #12]
 8003916:	f04f 30ff 	mov.w	r0, #4294967295
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <__swsetup_r+0xd4>)
 800391e:	429c      	cmp	r4, r3
 8003920:	d101      	bne.n	8003926 <__swsetup_r+0x46>
 8003922:	68ac      	ldr	r4, [r5, #8]
 8003924:	e7eb      	b.n	80038fe <__swsetup_r+0x1e>
 8003926:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <__swsetup_r+0xd8>)
 8003928:	429c      	cmp	r4, r3
 800392a:	bf08      	it	eq
 800392c:	68ec      	ldreq	r4, [r5, #12]
 800392e:	e7e6      	b.n	80038fe <__swsetup_r+0x1e>
 8003930:	0751      	lsls	r1, r2, #29
 8003932:	d512      	bpl.n	800395a <__swsetup_r+0x7a>
 8003934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003936:	b141      	cbz	r1, 800394a <__swsetup_r+0x6a>
 8003938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800393c:	4299      	cmp	r1, r3
 800393e:	d002      	beq.n	8003946 <__swsetup_r+0x66>
 8003940:	4630      	mov	r0, r6
 8003942:	f000 fa1b 	bl	8003d7c <_free_r>
 8003946:	2300      	movs	r3, #0
 8003948:	6363      	str	r3, [r4, #52]	; 0x34
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	2300      	movs	r3, #0
 8003954:	6063      	str	r3, [r4, #4]
 8003956:	6923      	ldr	r3, [r4, #16]
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	89a3      	ldrh	r3, [r4, #12]
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	81a3      	strh	r3, [r4, #12]
 8003962:	6923      	ldr	r3, [r4, #16]
 8003964:	b94b      	cbnz	r3, 800397a <__swsetup_r+0x9a>
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800396c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003970:	d003      	beq.n	800397a <__swsetup_r+0x9a>
 8003972:	4621      	mov	r1, r4
 8003974:	4630      	mov	r0, r6
 8003976:	f000 f9c1 	bl	8003cfc <__smakebuf_r>
 800397a:	89a2      	ldrh	r2, [r4, #12]
 800397c:	f012 0301 	ands.w	r3, r2, #1
 8003980:	d00c      	beq.n	800399c <__swsetup_r+0xbc>
 8003982:	2300      	movs	r3, #0
 8003984:	60a3      	str	r3, [r4, #8]
 8003986:	6963      	ldr	r3, [r4, #20]
 8003988:	425b      	negs	r3, r3
 800398a:	61a3      	str	r3, [r4, #24]
 800398c:	6923      	ldr	r3, [r4, #16]
 800398e:	b953      	cbnz	r3, 80039a6 <__swsetup_r+0xc6>
 8003990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003994:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003998:	d1ba      	bne.n	8003910 <__swsetup_r+0x30>
 800399a:	bd70      	pop	{r4, r5, r6, pc}
 800399c:	0792      	lsls	r2, r2, #30
 800399e:	bf58      	it	pl
 80039a0:	6963      	ldrpl	r3, [r4, #20]
 80039a2:	60a3      	str	r3, [r4, #8]
 80039a4:	e7f2      	b.n	800398c <__swsetup_r+0xac>
 80039a6:	2000      	movs	r0, #0
 80039a8:	e7f7      	b.n	800399a <__swsetup_r+0xba>
 80039aa:	bf00      	nop
 80039ac:	2000017c 	.word	0x2000017c
 80039b0:	08004950 	.word	0x08004950
 80039b4:	08004970 	.word	0x08004970
 80039b8:	08004930 	.word	0x08004930

080039bc <__sflush_r>:
 80039bc:	898a      	ldrh	r2, [r1, #12]
 80039be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c2:	4605      	mov	r5, r0
 80039c4:	0710      	lsls	r0, r2, #28
 80039c6:	460c      	mov	r4, r1
 80039c8:	d45a      	bmi.n	8003a80 <__sflush_r+0xc4>
 80039ca:	684b      	ldr	r3, [r1, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	dc05      	bgt.n	80039dc <__sflush_r+0x20>
 80039d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	dc02      	bgt.n	80039dc <__sflush_r+0x20>
 80039d6:	2000      	movs	r0, #0
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039de:	2e00      	cmp	r6, #0
 80039e0:	d0f9      	beq.n	80039d6 <__sflush_r+0x1a>
 80039e2:	2300      	movs	r3, #0
 80039e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039e8:	682f      	ldr	r7, [r5, #0]
 80039ea:	602b      	str	r3, [r5, #0]
 80039ec:	d033      	beq.n	8003a56 <__sflush_r+0x9a>
 80039ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	075a      	lsls	r2, r3, #29
 80039f4:	d505      	bpl.n	8003a02 <__sflush_r+0x46>
 80039f6:	6863      	ldr	r3, [r4, #4]
 80039f8:	1ac0      	subs	r0, r0, r3
 80039fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039fc:	b10b      	cbz	r3, 8003a02 <__sflush_r+0x46>
 80039fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a00:	1ac0      	subs	r0, r0, r3
 8003a02:	2300      	movs	r3, #0
 8003a04:	4602      	mov	r2, r0
 8003a06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a08:	6a21      	ldr	r1, [r4, #32]
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	47b0      	blx	r6
 8003a0e:	1c43      	adds	r3, r0, #1
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	d106      	bne.n	8003a22 <__sflush_r+0x66>
 8003a14:	6829      	ldr	r1, [r5, #0]
 8003a16:	291d      	cmp	r1, #29
 8003a18:	d84b      	bhi.n	8003ab2 <__sflush_r+0xf6>
 8003a1a:	4a2b      	ldr	r2, [pc, #172]	; (8003ac8 <__sflush_r+0x10c>)
 8003a1c:	40ca      	lsrs	r2, r1
 8003a1e:	07d6      	lsls	r6, r2, #31
 8003a20:	d547      	bpl.n	8003ab2 <__sflush_r+0xf6>
 8003a22:	2200      	movs	r2, #0
 8003a24:	6062      	str	r2, [r4, #4]
 8003a26:	04d9      	lsls	r1, r3, #19
 8003a28:	6922      	ldr	r2, [r4, #16]
 8003a2a:	6022      	str	r2, [r4, #0]
 8003a2c:	d504      	bpl.n	8003a38 <__sflush_r+0x7c>
 8003a2e:	1c42      	adds	r2, r0, #1
 8003a30:	d101      	bne.n	8003a36 <__sflush_r+0x7a>
 8003a32:	682b      	ldr	r3, [r5, #0]
 8003a34:	b903      	cbnz	r3, 8003a38 <__sflush_r+0x7c>
 8003a36:	6560      	str	r0, [r4, #84]	; 0x54
 8003a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a3a:	602f      	str	r7, [r5, #0]
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	d0ca      	beq.n	80039d6 <__sflush_r+0x1a>
 8003a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a44:	4299      	cmp	r1, r3
 8003a46:	d002      	beq.n	8003a4e <__sflush_r+0x92>
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f000 f997 	bl	8003d7c <_free_r>
 8003a4e:	2000      	movs	r0, #0
 8003a50:	6360      	str	r0, [r4, #52]	; 0x34
 8003a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a56:	6a21      	ldr	r1, [r4, #32]
 8003a58:	2301      	movs	r3, #1
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	47b0      	blx	r6
 8003a5e:	1c41      	adds	r1, r0, #1
 8003a60:	d1c6      	bne.n	80039f0 <__sflush_r+0x34>
 8003a62:	682b      	ldr	r3, [r5, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0c3      	beq.n	80039f0 <__sflush_r+0x34>
 8003a68:	2b1d      	cmp	r3, #29
 8003a6a:	d001      	beq.n	8003a70 <__sflush_r+0xb4>
 8003a6c:	2b16      	cmp	r3, #22
 8003a6e:	d101      	bne.n	8003a74 <__sflush_r+0xb8>
 8003a70:	602f      	str	r7, [r5, #0]
 8003a72:	e7b0      	b.n	80039d6 <__sflush_r+0x1a>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a80:	690f      	ldr	r7, [r1, #16]
 8003a82:	2f00      	cmp	r7, #0
 8003a84:	d0a7      	beq.n	80039d6 <__sflush_r+0x1a>
 8003a86:	0793      	lsls	r3, r2, #30
 8003a88:	680e      	ldr	r6, [r1, #0]
 8003a8a:	bf08      	it	eq
 8003a8c:	694b      	ldreq	r3, [r1, #20]
 8003a8e:	600f      	str	r7, [r1, #0]
 8003a90:	bf18      	it	ne
 8003a92:	2300      	movne	r3, #0
 8003a94:	eba6 0807 	sub.w	r8, r6, r7
 8003a98:	608b      	str	r3, [r1, #8]
 8003a9a:	f1b8 0f00 	cmp.w	r8, #0
 8003a9e:	dd9a      	ble.n	80039d6 <__sflush_r+0x1a>
 8003aa0:	4643      	mov	r3, r8
 8003aa2:	463a      	mov	r2, r7
 8003aa4:	6a21      	ldr	r1, [r4, #32]
 8003aa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	47b0      	blx	r6
 8003aac:	2800      	cmp	r0, #0
 8003aae:	dc07      	bgt.n	8003ac0 <__sflush_r+0x104>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab6:	81a3      	strh	r3, [r4, #12]
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac0:	4407      	add	r7, r0
 8003ac2:	eba8 0800 	sub.w	r8, r8, r0
 8003ac6:	e7e8      	b.n	8003a9a <__sflush_r+0xde>
 8003ac8:	20400001 	.word	0x20400001

08003acc <_fflush_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	690b      	ldr	r3, [r1, #16]
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	b1db      	cbz	r3, 8003b0e <_fflush_r+0x42>
 8003ad6:	b118      	cbz	r0, 8003ae0 <_fflush_r+0x14>
 8003ad8:	6983      	ldr	r3, [r0, #24]
 8003ada:	b90b      	cbnz	r3, 8003ae0 <_fflush_r+0x14>
 8003adc:	f000 f860 	bl	8003ba0 <__sinit>
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <_fflush_r+0x48>)
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	d109      	bne.n	8003afa <_fflush_r+0x2e>
 8003ae6:	686c      	ldr	r4, [r5, #4]
 8003ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aec:	b17b      	cbz	r3, 8003b0e <_fflush_r+0x42>
 8003aee:	4621      	mov	r1, r4
 8003af0:	4628      	mov	r0, r5
 8003af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003af6:	f7ff bf61 	b.w	80039bc <__sflush_r>
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <_fflush_r+0x4c>)
 8003afc:	429c      	cmp	r4, r3
 8003afe:	d101      	bne.n	8003b04 <_fflush_r+0x38>
 8003b00:	68ac      	ldr	r4, [r5, #8]
 8003b02:	e7f1      	b.n	8003ae8 <_fflush_r+0x1c>
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <_fflush_r+0x50>)
 8003b06:	429c      	cmp	r4, r3
 8003b08:	bf08      	it	eq
 8003b0a:	68ec      	ldreq	r4, [r5, #12]
 8003b0c:	e7ec      	b.n	8003ae8 <_fflush_r+0x1c>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	bd38      	pop	{r3, r4, r5, pc}
 8003b12:	bf00      	nop
 8003b14:	08004950 	.word	0x08004950
 8003b18:	08004970 	.word	0x08004970
 8003b1c:	08004930 	.word	0x08004930

08003b20 <_cleanup_r>:
 8003b20:	4901      	ldr	r1, [pc, #4]	; (8003b28 <_cleanup_r+0x8>)
 8003b22:	f000 b8a9 	b.w	8003c78 <_fwalk_reent>
 8003b26:	bf00      	nop
 8003b28:	08003acd 	.word	0x08003acd

08003b2c <std.isra.0>:
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	b510      	push	{r4, lr}
 8003b30:	4604      	mov	r4, r0
 8003b32:	6003      	str	r3, [r0, #0]
 8003b34:	6043      	str	r3, [r0, #4]
 8003b36:	6083      	str	r3, [r0, #8]
 8003b38:	8181      	strh	r1, [r0, #12]
 8003b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b3c:	81c2      	strh	r2, [r0, #14]
 8003b3e:	6103      	str	r3, [r0, #16]
 8003b40:	6143      	str	r3, [r0, #20]
 8003b42:	6183      	str	r3, [r0, #24]
 8003b44:	4619      	mov	r1, r3
 8003b46:	2208      	movs	r2, #8
 8003b48:	305c      	adds	r0, #92	; 0x5c
 8003b4a:	f7ff fda3 	bl	8003694 <memset>
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <std.isra.0+0x38>)
 8003b50:	6263      	str	r3, [r4, #36]	; 0x24
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <std.isra.0+0x3c>)
 8003b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <std.isra.0+0x40>)
 8003b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <std.isra.0+0x44>)
 8003b5c:	6224      	str	r4, [r4, #32]
 8003b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b60:	bd10      	pop	{r4, pc}
 8003b62:	bf00      	nop
 8003b64:	080044a1 	.word	0x080044a1
 8003b68:	080044c3 	.word	0x080044c3
 8003b6c:	080044fb 	.word	0x080044fb
 8003b70:	0800451f 	.word	0x0800451f

08003b74 <__sfmoreglue>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	1e4a      	subs	r2, r1, #1
 8003b78:	2568      	movs	r5, #104	; 0x68
 8003b7a:	4355      	muls	r5, r2
 8003b7c:	460e      	mov	r6, r1
 8003b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b82:	f000 f949 	bl	8003e18 <_malloc_r>
 8003b86:	4604      	mov	r4, r0
 8003b88:	b140      	cbz	r0, 8003b9c <__sfmoreglue+0x28>
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	e880 0042 	stmia.w	r0, {r1, r6}
 8003b90:	300c      	adds	r0, #12
 8003b92:	60a0      	str	r0, [r4, #8]
 8003b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b98:	f7ff fd7c 	bl	8003694 <memset>
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}

08003ba0 <__sinit>:
 8003ba0:	6983      	ldr	r3, [r0, #24]
 8003ba2:	b510      	push	{r4, lr}
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	bb33      	cbnz	r3, 8003bf6 <__sinit+0x56>
 8003ba8:	6483      	str	r3, [r0, #72]	; 0x48
 8003baa:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003bac:	6503      	str	r3, [r0, #80]	; 0x50
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <__sinit+0x58>)
 8003bb0:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <__sinit+0x5c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6282      	str	r2, [r0, #40]	; 0x28
 8003bb6:	4298      	cmp	r0, r3
 8003bb8:	bf04      	itt	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	6183      	streq	r3, [r0, #24]
 8003bbe:	f000 f81f 	bl	8003c00 <__sfp>
 8003bc2:	6060      	str	r0, [r4, #4]
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f000 f81b 	bl	8003c00 <__sfp>
 8003bca:	60a0      	str	r0, [r4, #8]
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f000 f817 	bl	8003c00 <__sfp>
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	60e0      	str	r0, [r4, #12]
 8003bd6:	2104      	movs	r1, #4
 8003bd8:	6860      	ldr	r0, [r4, #4]
 8003bda:	f7ff ffa7 	bl	8003b2c <std.isra.0>
 8003bde:	2201      	movs	r2, #1
 8003be0:	2109      	movs	r1, #9
 8003be2:	68a0      	ldr	r0, [r4, #8]
 8003be4:	f7ff ffa2 	bl	8003b2c <std.isra.0>
 8003be8:	2202      	movs	r2, #2
 8003bea:	2112      	movs	r1, #18
 8003bec:	68e0      	ldr	r0, [r4, #12]
 8003bee:	f7ff ff9d 	bl	8003b2c <std.isra.0>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61a3      	str	r3, [r4, #24]
 8003bf6:	bd10      	pop	{r4, pc}
 8003bf8:	08004904 	.word	0x08004904
 8003bfc:	08003b21 	.word	0x08003b21

08003c00 <__sfp>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <__sfp+0x74>)
 8003c04:	681e      	ldr	r6, [r3, #0]
 8003c06:	69b3      	ldr	r3, [r6, #24]
 8003c08:	4607      	mov	r7, r0
 8003c0a:	b913      	cbnz	r3, 8003c12 <__sfp+0x12>
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	f7ff ffc7 	bl	8003ba0 <__sinit>
 8003c12:	3648      	adds	r6, #72	; 0x48
 8003c14:	68b4      	ldr	r4, [r6, #8]
 8003c16:	6873      	ldr	r3, [r6, #4]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	d503      	bpl.n	8003c24 <__sfp+0x24>
 8003c1c:	6833      	ldr	r3, [r6, #0]
 8003c1e:	b133      	cbz	r3, 8003c2e <__sfp+0x2e>
 8003c20:	6836      	ldr	r6, [r6, #0]
 8003c22:	e7f7      	b.n	8003c14 <__sfp+0x14>
 8003c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c28:	b16d      	cbz	r5, 8003c46 <__sfp+0x46>
 8003c2a:	3468      	adds	r4, #104	; 0x68
 8003c2c:	e7f4      	b.n	8003c18 <__sfp+0x18>
 8003c2e:	2104      	movs	r1, #4
 8003c30:	4638      	mov	r0, r7
 8003c32:	f7ff ff9f 	bl	8003b74 <__sfmoreglue>
 8003c36:	6030      	str	r0, [r6, #0]
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d1f1      	bne.n	8003c20 <__sfp+0x20>
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4604      	mov	r4, r0
 8003c42:	4620      	mov	r0, r4
 8003c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c4a:	81e3      	strh	r3, [r4, #14]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	81a3      	strh	r3, [r4, #12]
 8003c50:	6665      	str	r5, [r4, #100]	; 0x64
 8003c52:	6025      	str	r5, [r4, #0]
 8003c54:	60a5      	str	r5, [r4, #8]
 8003c56:	6065      	str	r5, [r4, #4]
 8003c58:	6125      	str	r5, [r4, #16]
 8003c5a:	6165      	str	r5, [r4, #20]
 8003c5c:	61a5      	str	r5, [r4, #24]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	4629      	mov	r1, r5
 8003c62:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c66:	f7ff fd15 	bl	8003694 <memset>
 8003c6a:	6365      	str	r5, [r4, #52]	; 0x34
 8003c6c:	63a5      	str	r5, [r4, #56]	; 0x38
 8003c6e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003c70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003c72:	e7e6      	b.n	8003c42 <__sfp+0x42>
 8003c74:	08004904 	.word	0x08004904

08003c78 <_fwalk_reent>:
 8003c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c7c:	4680      	mov	r8, r0
 8003c7e:	4689      	mov	r9, r1
 8003c80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c84:	2600      	movs	r6, #0
 8003c86:	b914      	cbnz	r4, 8003c8e <_fwalk_reent+0x16>
 8003c88:	4630      	mov	r0, r6
 8003c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c8e:	68a5      	ldr	r5, [r4, #8]
 8003c90:	6867      	ldr	r7, [r4, #4]
 8003c92:	3f01      	subs	r7, #1
 8003c94:	d501      	bpl.n	8003c9a <_fwalk_reent+0x22>
 8003c96:	6824      	ldr	r4, [r4, #0]
 8003c98:	e7f5      	b.n	8003c86 <_fwalk_reent+0xe>
 8003c9a:	89ab      	ldrh	r3, [r5, #12]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d907      	bls.n	8003cb0 <_fwalk_reent+0x38>
 8003ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	d003      	beq.n	8003cb0 <_fwalk_reent+0x38>
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4640      	mov	r0, r8
 8003cac:	47c8      	blx	r9
 8003cae:	4306      	orrs	r6, r0
 8003cb0:	3568      	adds	r5, #104	; 0x68
 8003cb2:	e7ee      	b.n	8003c92 <_fwalk_reent+0x1a>

08003cb4 <__swhatbuf_r>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	460e      	mov	r6, r1
 8003cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbc:	2900      	cmp	r1, #0
 8003cbe:	b090      	sub	sp, #64	; 0x40
 8003cc0:	4614      	mov	r4, r2
 8003cc2:	461d      	mov	r5, r3
 8003cc4:	da07      	bge.n	8003cd6 <__swhatbuf_r+0x22>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	602b      	str	r3, [r5, #0]
 8003cca:	89b3      	ldrh	r3, [r6, #12]
 8003ccc:	061a      	lsls	r2, r3, #24
 8003cce:	d410      	bmi.n	8003cf2 <__swhatbuf_r+0x3e>
 8003cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cd4:	e00e      	b.n	8003cf4 <__swhatbuf_r+0x40>
 8003cd6:	aa01      	add	r2, sp, #4
 8003cd8:	f000 fc48 	bl	800456c <_fstat_r>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	dbf2      	blt.n	8003cc6 <__swhatbuf_r+0x12>
 8003ce0:	9a02      	ldr	r2, [sp, #8]
 8003ce2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ce6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003cea:	425a      	negs	r2, r3
 8003cec:	415a      	adcs	r2, r3
 8003cee:	602a      	str	r2, [r5, #0]
 8003cf0:	e7ee      	b.n	8003cd0 <__swhatbuf_r+0x1c>
 8003cf2:	2340      	movs	r3, #64	; 0x40
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	6023      	str	r3, [r4, #0]
 8003cf8:	b010      	add	sp, #64	; 0x40
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}

08003cfc <__smakebuf_r>:
 8003cfc:	898b      	ldrh	r3, [r1, #12]
 8003cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d00:	079d      	lsls	r5, r3, #30
 8003d02:	4606      	mov	r6, r0
 8003d04:	460c      	mov	r4, r1
 8003d06:	d507      	bpl.n	8003d18 <__smakebuf_r+0x1c>
 8003d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	6123      	str	r3, [r4, #16]
 8003d10:	2301      	movs	r3, #1
 8003d12:	6163      	str	r3, [r4, #20]
 8003d14:	b002      	add	sp, #8
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	ab01      	add	r3, sp, #4
 8003d1a:	466a      	mov	r2, sp
 8003d1c:	f7ff ffca 	bl	8003cb4 <__swhatbuf_r>
 8003d20:	9900      	ldr	r1, [sp, #0]
 8003d22:	4605      	mov	r5, r0
 8003d24:	4630      	mov	r0, r6
 8003d26:	f000 f877 	bl	8003e18 <_malloc_r>
 8003d2a:	b948      	cbnz	r0, 8003d40 <__smakebuf_r+0x44>
 8003d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d30:	059a      	lsls	r2, r3, #22
 8003d32:	d4ef      	bmi.n	8003d14 <__smakebuf_r+0x18>
 8003d34:	f023 0303 	bic.w	r3, r3, #3
 8003d38:	f043 0302 	orr.w	r3, r3, #2
 8003d3c:	81a3      	strh	r3, [r4, #12]
 8003d3e:	e7e3      	b.n	8003d08 <__smakebuf_r+0xc>
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <__smakebuf_r+0x7c>)
 8003d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	6020      	str	r0, [r4, #0]
 8003d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4c:	81a3      	strh	r3, [r4, #12]
 8003d4e:	9b00      	ldr	r3, [sp, #0]
 8003d50:	6163      	str	r3, [r4, #20]
 8003d52:	9b01      	ldr	r3, [sp, #4]
 8003d54:	6120      	str	r0, [r4, #16]
 8003d56:	b15b      	cbz	r3, 8003d70 <__smakebuf_r+0x74>
 8003d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f000 fc17 	bl	8004590 <_isatty_r>
 8003d62:	b128      	cbz	r0, 8003d70 <__smakebuf_r+0x74>
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	81a3      	strh	r3, [r4, #12]
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	431d      	orrs	r5, r3
 8003d74:	81a5      	strh	r5, [r4, #12]
 8003d76:	e7cd      	b.n	8003d14 <__smakebuf_r+0x18>
 8003d78:	08003b21 	.word	0x08003b21

08003d7c <_free_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4605      	mov	r5, r0
 8003d80:	2900      	cmp	r1, #0
 8003d82:	d045      	beq.n	8003e10 <_free_r+0x94>
 8003d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d88:	1f0c      	subs	r4, r1, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bfb8      	it	lt
 8003d8e:	18e4      	addlt	r4, r4, r3
 8003d90:	f000 fc20 	bl	80045d4 <__malloc_lock>
 8003d94:	4a1f      	ldr	r2, [pc, #124]	; (8003e14 <_free_r+0x98>)
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	4610      	mov	r0, r2
 8003d9a:	b933      	cbnz	r3, 8003daa <_free_r+0x2e>
 8003d9c:	6063      	str	r3, [r4, #4]
 8003d9e:	6014      	str	r4, [r2, #0]
 8003da0:	4628      	mov	r0, r5
 8003da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003da6:	f000 bc16 	b.w	80045d6 <__malloc_unlock>
 8003daa:	42a3      	cmp	r3, r4
 8003dac:	d90c      	bls.n	8003dc8 <_free_r+0x4c>
 8003dae:	6821      	ldr	r1, [r4, #0]
 8003db0:	1862      	adds	r2, r4, r1
 8003db2:	4293      	cmp	r3, r2
 8003db4:	bf04      	itt	eq
 8003db6:	681a      	ldreq	r2, [r3, #0]
 8003db8:	685b      	ldreq	r3, [r3, #4]
 8003dba:	6063      	str	r3, [r4, #4]
 8003dbc:	bf04      	itt	eq
 8003dbe:	1852      	addeq	r2, r2, r1
 8003dc0:	6022      	streq	r2, [r4, #0]
 8003dc2:	6004      	str	r4, [r0, #0]
 8003dc4:	e7ec      	b.n	8003da0 <_free_r+0x24>
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	b10a      	cbz	r2, 8003dd0 <_free_r+0x54>
 8003dcc:	42a2      	cmp	r2, r4
 8003dce:	d9fa      	bls.n	8003dc6 <_free_r+0x4a>
 8003dd0:	6819      	ldr	r1, [r3, #0]
 8003dd2:	1858      	adds	r0, r3, r1
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d10b      	bne.n	8003df0 <_free_r+0x74>
 8003dd8:	6820      	ldr	r0, [r4, #0]
 8003dda:	4401      	add	r1, r0
 8003ddc:	1858      	adds	r0, r3, r1
 8003dde:	4282      	cmp	r2, r0
 8003de0:	6019      	str	r1, [r3, #0]
 8003de2:	d1dd      	bne.n	8003da0 <_free_r+0x24>
 8003de4:	6810      	ldr	r0, [r2, #0]
 8003de6:	6852      	ldr	r2, [r2, #4]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	4401      	add	r1, r0
 8003dec:	6019      	str	r1, [r3, #0]
 8003dee:	e7d7      	b.n	8003da0 <_free_r+0x24>
 8003df0:	d902      	bls.n	8003df8 <_free_r+0x7c>
 8003df2:	230c      	movs	r3, #12
 8003df4:	602b      	str	r3, [r5, #0]
 8003df6:	e7d3      	b.n	8003da0 <_free_r+0x24>
 8003df8:	6820      	ldr	r0, [r4, #0]
 8003dfa:	1821      	adds	r1, r4, r0
 8003dfc:	428a      	cmp	r2, r1
 8003dfe:	bf04      	itt	eq
 8003e00:	6811      	ldreq	r1, [r2, #0]
 8003e02:	6852      	ldreq	r2, [r2, #4]
 8003e04:	6062      	str	r2, [r4, #4]
 8003e06:	bf04      	itt	eq
 8003e08:	1809      	addeq	r1, r1, r0
 8003e0a:	6021      	streq	r1, [r4, #0]
 8003e0c:	605c      	str	r4, [r3, #4]
 8003e0e:	e7c7      	b.n	8003da0 <_free_r+0x24>
 8003e10:	bd38      	pop	{r3, r4, r5, pc}
 8003e12:	bf00      	nop
 8003e14:	20000210 	.word	0x20000210

08003e18 <_malloc_r>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	1ccd      	adds	r5, r1, #3
 8003e1c:	f025 0503 	bic.w	r5, r5, #3
 8003e20:	3508      	adds	r5, #8
 8003e22:	2d0c      	cmp	r5, #12
 8003e24:	bf38      	it	cc
 8003e26:	250c      	movcc	r5, #12
 8003e28:	2d00      	cmp	r5, #0
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	db01      	blt.n	8003e32 <_malloc_r+0x1a>
 8003e2e:	42a9      	cmp	r1, r5
 8003e30:	d903      	bls.n	8003e3a <_malloc_r+0x22>
 8003e32:	230c      	movs	r3, #12
 8003e34:	6033      	str	r3, [r6, #0]
 8003e36:	2000      	movs	r0, #0
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
 8003e3a:	f000 fbcb 	bl	80045d4 <__malloc_lock>
 8003e3e:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <_malloc_r+0xb4>)
 8003e40:	6814      	ldr	r4, [r2, #0]
 8003e42:	4621      	mov	r1, r4
 8003e44:	b991      	cbnz	r1, 8003e6c <_malloc_r+0x54>
 8003e46:	4c22      	ldr	r4, [pc, #136]	; (8003ed0 <_malloc_r+0xb8>)
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	b91b      	cbnz	r3, 8003e54 <_malloc_r+0x3c>
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 fb17 	bl	8004480 <_sbrk_r>
 8003e52:	6020      	str	r0, [r4, #0]
 8003e54:	4629      	mov	r1, r5
 8003e56:	4630      	mov	r0, r6
 8003e58:	f000 fb12 	bl	8004480 <_sbrk_r>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d126      	bne.n	8003eae <_malloc_r+0x96>
 8003e60:	230c      	movs	r3, #12
 8003e62:	6033      	str	r3, [r6, #0]
 8003e64:	4630      	mov	r0, r6
 8003e66:	f000 fbb6 	bl	80045d6 <__malloc_unlock>
 8003e6a:	e7e4      	b.n	8003e36 <_malloc_r+0x1e>
 8003e6c:	680b      	ldr	r3, [r1, #0]
 8003e6e:	1b5b      	subs	r3, r3, r5
 8003e70:	d41a      	bmi.n	8003ea8 <_malloc_r+0x90>
 8003e72:	2b0b      	cmp	r3, #11
 8003e74:	d90f      	bls.n	8003e96 <_malloc_r+0x7e>
 8003e76:	600b      	str	r3, [r1, #0]
 8003e78:	50cd      	str	r5, [r1, r3]
 8003e7a:	18cc      	adds	r4, r1, r3
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f000 fbaa 	bl	80045d6 <__malloc_unlock>
 8003e82:	f104 000b 	add.w	r0, r4, #11
 8003e86:	1d23      	adds	r3, r4, #4
 8003e88:	f020 0007 	bic.w	r0, r0, #7
 8003e8c:	1ac3      	subs	r3, r0, r3
 8003e8e:	d01b      	beq.n	8003ec8 <_malloc_r+0xb0>
 8003e90:	425a      	negs	r2, r3
 8003e92:	50e2      	str	r2, [r4, r3]
 8003e94:	bd70      	pop	{r4, r5, r6, pc}
 8003e96:	428c      	cmp	r4, r1
 8003e98:	bf0d      	iteet	eq
 8003e9a:	6863      	ldreq	r3, [r4, #4]
 8003e9c:	684b      	ldrne	r3, [r1, #4]
 8003e9e:	6063      	strne	r3, [r4, #4]
 8003ea0:	6013      	streq	r3, [r2, #0]
 8003ea2:	bf18      	it	ne
 8003ea4:	460c      	movne	r4, r1
 8003ea6:	e7e9      	b.n	8003e7c <_malloc_r+0x64>
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	6849      	ldr	r1, [r1, #4]
 8003eac:	e7ca      	b.n	8003e44 <_malloc_r+0x2c>
 8003eae:	1cc4      	adds	r4, r0, #3
 8003eb0:	f024 0403 	bic.w	r4, r4, #3
 8003eb4:	42a0      	cmp	r0, r4
 8003eb6:	d005      	beq.n	8003ec4 <_malloc_r+0xac>
 8003eb8:	1a21      	subs	r1, r4, r0
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f000 fae0 	bl	8004480 <_sbrk_r>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d0cd      	beq.n	8003e60 <_malloc_r+0x48>
 8003ec4:	6025      	str	r5, [r4, #0]
 8003ec6:	e7d9      	b.n	8003e7c <_malloc_r+0x64>
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000210 	.word	0x20000210
 8003ed0:	20000214 	.word	0x20000214

08003ed4 <__sfputc_r>:
 8003ed4:	6893      	ldr	r3, [r2, #8]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	b410      	push	{r4}
 8003edc:	6093      	str	r3, [r2, #8]
 8003ede:	da09      	bge.n	8003ef4 <__sfputc_r+0x20>
 8003ee0:	6994      	ldr	r4, [r2, #24]
 8003ee2:	42a3      	cmp	r3, r4
 8003ee4:	db02      	blt.n	8003eec <__sfputc_r+0x18>
 8003ee6:	b2cb      	uxtb	r3, r1
 8003ee8:	2b0a      	cmp	r3, #10
 8003eea:	d103      	bne.n	8003ef4 <__sfputc_r+0x20>
 8003eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ef0:	f7ff bca4 	b.w	800383c <__swbuf_r>
 8003ef4:	6813      	ldr	r3, [r2, #0]
 8003ef6:	1c58      	adds	r0, r3, #1
 8003ef8:	6010      	str	r0, [r2, #0]
 8003efa:	7019      	strb	r1, [r3, #0]
 8003efc:	b2c8      	uxtb	r0, r1
 8003efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <__sfputs_r>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	4606      	mov	r6, r0
 8003f08:	460f      	mov	r7, r1
 8003f0a:	4614      	mov	r4, r2
 8003f0c:	18d5      	adds	r5, r2, r3
 8003f0e:	42ac      	cmp	r4, r5
 8003f10:	d101      	bne.n	8003f16 <__sfputs_r+0x12>
 8003f12:	2000      	movs	r0, #0
 8003f14:	e007      	b.n	8003f26 <__sfputs_r+0x22>
 8003f16:	463a      	mov	r2, r7
 8003f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f7ff ffd9 	bl	8003ed4 <__sfputc_r>
 8003f22:	1c43      	adds	r3, r0, #1
 8003f24:	d1f3      	bne.n	8003f0e <__sfputs_r+0xa>
 8003f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f28 <_vfiprintf_r>:
 8003f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2c:	b09d      	sub	sp, #116	; 0x74
 8003f2e:	460c      	mov	r4, r1
 8003f30:	4617      	mov	r7, r2
 8003f32:	9303      	str	r3, [sp, #12]
 8003f34:	4606      	mov	r6, r0
 8003f36:	b118      	cbz	r0, 8003f40 <_vfiprintf_r+0x18>
 8003f38:	6983      	ldr	r3, [r0, #24]
 8003f3a:	b90b      	cbnz	r3, 8003f40 <_vfiprintf_r+0x18>
 8003f3c:	f7ff fe30 	bl	8003ba0 <__sinit>
 8003f40:	4b7c      	ldr	r3, [pc, #496]	; (8004134 <_vfiprintf_r+0x20c>)
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d157      	bne.n	8003ff6 <_vfiprintf_r+0xce>
 8003f46:	6874      	ldr	r4, [r6, #4]
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	0718      	lsls	r0, r3, #28
 8003f4c:	d55d      	bpl.n	800400a <_vfiprintf_r+0xe2>
 8003f4e:	6923      	ldr	r3, [r4, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d05a      	beq.n	800400a <_vfiprintf_r+0xe2>
 8003f54:	2300      	movs	r3, #0
 8003f56:	9309      	str	r3, [sp, #36]	; 0x24
 8003f58:	2320      	movs	r3, #32
 8003f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f5e:	2330      	movs	r3, #48	; 0x30
 8003f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f64:	f04f 0b01 	mov.w	fp, #1
 8003f68:	46b8      	mov	r8, r7
 8003f6a:	4645      	mov	r5, r8
 8003f6c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d155      	bne.n	8004020 <_vfiprintf_r+0xf8>
 8003f74:	ebb8 0a07 	subs.w	sl, r8, r7
 8003f78:	d00b      	beq.n	8003f92 <_vfiprintf_r+0x6a>
 8003f7a:	4653      	mov	r3, sl
 8003f7c:	463a      	mov	r2, r7
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4630      	mov	r0, r6
 8003f82:	f7ff ffbf 	bl	8003f04 <__sfputs_r>
 8003f86:	3001      	adds	r0, #1
 8003f88:	f000 80c4 	beq.w	8004114 <_vfiprintf_r+0x1ec>
 8003f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f8e:	4453      	add	r3, sl
 8003f90:	9309      	str	r3, [sp, #36]	; 0x24
 8003f92:	f898 3000 	ldrb.w	r3, [r8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80bc 	beq.w	8004114 <_vfiprintf_r+0x1ec>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa2:	9304      	str	r3, [sp, #16]
 8003fa4:	9307      	str	r3, [sp, #28]
 8003fa6:	9205      	str	r2, [sp, #20]
 8003fa8:	9306      	str	r3, [sp, #24]
 8003faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fae:	931a      	str	r3, [sp, #104]	; 0x68
 8003fb0:	2205      	movs	r2, #5
 8003fb2:	7829      	ldrb	r1, [r5, #0]
 8003fb4:	4860      	ldr	r0, [pc, #384]	; (8004138 <_vfiprintf_r+0x210>)
 8003fb6:	f7fc f90b 	bl	80001d0 <memchr>
 8003fba:	f105 0801 	add.w	r8, r5, #1
 8003fbe:	9b04      	ldr	r3, [sp, #16]
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d131      	bne.n	8004028 <_vfiprintf_r+0x100>
 8003fc4:	06d9      	lsls	r1, r3, #27
 8003fc6:	bf44      	itt	mi
 8003fc8:	2220      	movmi	r2, #32
 8003fca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fce:	071a      	lsls	r2, r3, #28
 8003fd0:	bf44      	itt	mi
 8003fd2:	222b      	movmi	r2, #43	; 0x2b
 8003fd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fd8:	782a      	ldrb	r2, [r5, #0]
 8003fda:	2a2a      	cmp	r2, #42	; 0x2a
 8003fdc:	d02c      	beq.n	8004038 <_vfiprintf_r+0x110>
 8003fde:	9a07      	ldr	r2, [sp, #28]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	200a      	movs	r0, #10
 8003fe4:	46a8      	mov	r8, r5
 8003fe6:	3501      	adds	r5, #1
 8003fe8:	f898 3000 	ldrb.w	r3, [r8]
 8003fec:	3b30      	subs	r3, #48	; 0x30
 8003fee:	2b09      	cmp	r3, #9
 8003ff0:	d96d      	bls.n	80040ce <_vfiprintf_r+0x1a6>
 8003ff2:	b371      	cbz	r1, 8004052 <_vfiprintf_r+0x12a>
 8003ff4:	e026      	b.n	8004044 <_vfiprintf_r+0x11c>
 8003ff6:	4b51      	ldr	r3, [pc, #324]	; (800413c <_vfiprintf_r+0x214>)
 8003ff8:	429c      	cmp	r4, r3
 8003ffa:	d101      	bne.n	8004000 <_vfiprintf_r+0xd8>
 8003ffc:	68b4      	ldr	r4, [r6, #8]
 8003ffe:	e7a3      	b.n	8003f48 <_vfiprintf_r+0x20>
 8004000:	4b4f      	ldr	r3, [pc, #316]	; (8004140 <_vfiprintf_r+0x218>)
 8004002:	429c      	cmp	r4, r3
 8004004:	bf08      	it	eq
 8004006:	68f4      	ldreq	r4, [r6, #12]
 8004008:	e79e      	b.n	8003f48 <_vfiprintf_r+0x20>
 800400a:	4621      	mov	r1, r4
 800400c:	4630      	mov	r0, r6
 800400e:	f7ff fc67 	bl	80038e0 <__swsetup_r>
 8004012:	2800      	cmp	r0, #0
 8004014:	d09e      	beq.n	8003f54 <_vfiprintf_r+0x2c>
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	b01d      	add	sp, #116	; 0x74
 800401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004020:	2b25      	cmp	r3, #37	; 0x25
 8004022:	d0a7      	beq.n	8003f74 <_vfiprintf_r+0x4c>
 8004024:	46a8      	mov	r8, r5
 8004026:	e7a0      	b.n	8003f6a <_vfiprintf_r+0x42>
 8004028:	4a43      	ldr	r2, [pc, #268]	; (8004138 <_vfiprintf_r+0x210>)
 800402a:	1a80      	subs	r0, r0, r2
 800402c:	fa0b f000 	lsl.w	r0, fp, r0
 8004030:	4318      	orrs	r0, r3
 8004032:	9004      	str	r0, [sp, #16]
 8004034:	4645      	mov	r5, r8
 8004036:	e7bb      	b.n	8003fb0 <_vfiprintf_r+0x88>
 8004038:	9a03      	ldr	r2, [sp, #12]
 800403a:	1d11      	adds	r1, r2, #4
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	9103      	str	r1, [sp, #12]
 8004040:	2a00      	cmp	r2, #0
 8004042:	db01      	blt.n	8004048 <_vfiprintf_r+0x120>
 8004044:	9207      	str	r2, [sp, #28]
 8004046:	e004      	b.n	8004052 <_vfiprintf_r+0x12a>
 8004048:	4252      	negs	r2, r2
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	9207      	str	r2, [sp, #28]
 8004050:	9304      	str	r3, [sp, #16]
 8004052:	f898 3000 	ldrb.w	r3, [r8]
 8004056:	2b2e      	cmp	r3, #46	; 0x2e
 8004058:	d110      	bne.n	800407c <_vfiprintf_r+0x154>
 800405a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800405e:	2b2a      	cmp	r3, #42	; 0x2a
 8004060:	f108 0101 	add.w	r1, r8, #1
 8004064:	d137      	bne.n	80040d6 <_vfiprintf_r+0x1ae>
 8004066:	9b03      	ldr	r3, [sp, #12]
 8004068:	1d1a      	adds	r2, r3, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	9203      	str	r2, [sp, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	bfb8      	it	lt
 8004072:	f04f 33ff 	movlt.w	r3, #4294967295
 8004076:	f108 0802 	add.w	r8, r8, #2
 800407a:	9305      	str	r3, [sp, #20]
 800407c:	4d31      	ldr	r5, [pc, #196]	; (8004144 <_vfiprintf_r+0x21c>)
 800407e:	f898 1000 	ldrb.w	r1, [r8]
 8004082:	2203      	movs	r2, #3
 8004084:	4628      	mov	r0, r5
 8004086:	f7fc f8a3 	bl	80001d0 <memchr>
 800408a:	b140      	cbz	r0, 800409e <_vfiprintf_r+0x176>
 800408c:	2340      	movs	r3, #64	; 0x40
 800408e:	1b40      	subs	r0, r0, r5
 8004090:	fa03 f000 	lsl.w	r0, r3, r0
 8004094:	9b04      	ldr	r3, [sp, #16]
 8004096:	4303      	orrs	r3, r0
 8004098:	9304      	str	r3, [sp, #16]
 800409a:	f108 0801 	add.w	r8, r8, #1
 800409e:	f898 1000 	ldrb.w	r1, [r8]
 80040a2:	4829      	ldr	r0, [pc, #164]	; (8004148 <_vfiprintf_r+0x220>)
 80040a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040a8:	2206      	movs	r2, #6
 80040aa:	f108 0701 	add.w	r7, r8, #1
 80040ae:	f7fc f88f 	bl	80001d0 <memchr>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d034      	beq.n	8004120 <_vfiprintf_r+0x1f8>
 80040b6:	4b25      	ldr	r3, [pc, #148]	; (800414c <_vfiprintf_r+0x224>)
 80040b8:	bb03      	cbnz	r3, 80040fc <_vfiprintf_r+0x1d4>
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	3307      	adds	r3, #7
 80040be:	f023 0307 	bic.w	r3, r3, #7
 80040c2:	3308      	adds	r3, #8
 80040c4:	9303      	str	r3, [sp, #12]
 80040c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c8:	444b      	add	r3, r9
 80040ca:	9309      	str	r3, [sp, #36]	; 0x24
 80040cc:	e74c      	b.n	8003f68 <_vfiprintf_r+0x40>
 80040ce:	fb00 3202 	mla	r2, r0, r2, r3
 80040d2:	2101      	movs	r1, #1
 80040d4:	e786      	b.n	8003fe4 <_vfiprintf_r+0xbc>
 80040d6:	2300      	movs	r3, #0
 80040d8:	9305      	str	r3, [sp, #20]
 80040da:	4618      	mov	r0, r3
 80040dc:	250a      	movs	r5, #10
 80040de:	4688      	mov	r8, r1
 80040e0:	3101      	adds	r1, #1
 80040e2:	f898 2000 	ldrb.w	r2, [r8]
 80040e6:	3a30      	subs	r2, #48	; 0x30
 80040e8:	2a09      	cmp	r2, #9
 80040ea:	d903      	bls.n	80040f4 <_vfiprintf_r+0x1cc>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0c5      	beq.n	800407c <_vfiprintf_r+0x154>
 80040f0:	9005      	str	r0, [sp, #20]
 80040f2:	e7c3      	b.n	800407c <_vfiprintf_r+0x154>
 80040f4:	fb05 2000 	mla	r0, r5, r0, r2
 80040f8:	2301      	movs	r3, #1
 80040fa:	e7f0      	b.n	80040de <_vfiprintf_r+0x1b6>
 80040fc:	ab03      	add	r3, sp, #12
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4622      	mov	r2, r4
 8004102:	4b13      	ldr	r3, [pc, #76]	; (8004150 <_vfiprintf_r+0x228>)
 8004104:	a904      	add	r1, sp, #16
 8004106:	4630      	mov	r0, r6
 8004108:	f3af 8000 	nop.w
 800410c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004110:	4681      	mov	r9, r0
 8004112:	d1d8      	bne.n	80040c6 <_vfiprintf_r+0x19e>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	065b      	lsls	r3, r3, #25
 8004118:	f53f af7d 	bmi.w	8004016 <_vfiprintf_r+0xee>
 800411c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800411e:	e77c      	b.n	800401a <_vfiprintf_r+0xf2>
 8004120:	ab03      	add	r3, sp, #12
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4622      	mov	r2, r4
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <_vfiprintf_r+0x228>)
 8004128:	a904      	add	r1, sp, #16
 800412a:	4630      	mov	r0, r6
 800412c:	f000 f888 	bl	8004240 <_printf_i>
 8004130:	e7ec      	b.n	800410c <_vfiprintf_r+0x1e4>
 8004132:	bf00      	nop
 8004134:	08004950 	.word	0x08004950
 8004138:	08004990 	.word	0x08004990
 800413c:	08004970 	.word	0x08004970
 8004140:	08004930 	.word	0x08004930
 8004144:	08004996 	.word	0x08004996
 8004148:	0800499a 	.word	0x0800499a
 800414c:	00000000 	.word	0x00000000
 8004150:	08003f05 	.word	0x08003f05

08004154 <_printf_common>:
 8004154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004158:	4691      	mov	r9, r2
 800415a:	461f      	mov	r7, r3
 800415c:	688a      	ldr	r2, [r1, #8]
 800415e:	690b      	ldr	r3, [r1, #16]
 8004160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004164:	4293      	cmp	r3, r2
 8004166:	bfb8      	it	lt
 8004168:	4613      	movlt	r3, r2
 800416a:	f8c9 3000 	str.w	r3, [r9]
 800416e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004172:	4606      	mov	r6, r0
 8004174:	460c      	mov	r4, r1
 8004176:	b112      	cbz	r2, 800417e <_printf_common+0x2a>
 8004178:	3301      	adds	r3, #1
 800417a:	f8c9 3000 	str.w	r3, [r9]
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	0699      	lsls	r1, r3, #26
 8004182:	bf42      	ittt	mi
 8004184:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004188:	3302      	addmi	r3, #2
 800418a:	f8c9 3000 	strmi.w	r3, [r9]
 800418e:	6825      	ldr	r5, [r4, #0]
 8004190:	f015 0506 	ands.w	r5, r5, #6
 8004194:	d107      	bne.n	80041a6 <_printf_common+0x52>
 8004196:	f104 0a19 	add.w	sl, r4, #25
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	f8d9 2000 	ldr.w	r2, [r9]
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	429d      	cmp	r5, r3
 80041a4:	db29      	blt.n	80041fa <_printf_common+0xa6>
 80041a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	3300      	adds	r3, #0
 80041ae:	bf18      	it	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	0692      	lsls	r2, r2, #26
 80041b4:	d42e      	bmi.n	8004214 <_printf_common+0xc0>
 80041b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ba:	4639      	mov	r1, r7
 80041bc:	4630      	mov	r0, r6
 80041be:	47c0      	blx	r8
 80041c0:	3001      	adds	r0, #1
 80041c2:	d021      	beq.n	8004208 <_printf_common+0xb4>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	68e5      	ldr	r5, [r4, #12]
 80041c8:	f8d9 2000 	ldr.w	r2, [r9]
 80041cc:	f003 0306 	and.w	r3, r3, #6
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	bf08      	it	eq
 80041d4:	1aad      	subeq	r5, r5, r2
 80041d6:	68a3      	ldr	r3, [r4, #8]
 80041d8:	6922      	ldr	r2, [r4, #16]
 80041da:	bf0c      	ite	eq
 80041dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041e0:	2500      	movne	r5, #0
 80041e2:	4293      	cmp	r3, r2
 80041e4:	bfc4      	itt	gt
 80041e6:	1a9b      	subgt	r3, r3, r2
 80041e8:	18ed      	addgt	r5, r5, r3
 80041ea:	f04f 0900 	mov.w	r9, #0
 80041ee:	341a      	adds	r4, #26
 80041f0:	454d      	cmp	r5, r9
 80041f2:	d11b      	bne.n	800422c <_printf_common+0xd8>
 80041f4:	2000      	movs	r0, #0
 80041f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fa:	2301      	movs	r3, #1
 80041fc:	4652      	mov	r2, sl
 80041fe:	4639      	mov	r1, r7
 8004200:	4630      	mov	r0, r6
 8004202:	47c0      	blx	r8
 8004204:	3001      	adds	r0, #1
 8004206:	d103      	bne.n	8004210 <_printf_common+0xbc>
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004210:	3501      	adds	r5, #1
 8004212:	e7c2      	b.n	800419a <_printf_common+0x46>
 8004214:	18e1      	adds	r1, r4, r3
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	2030      	movs	r0, #48	; 0x30
 800421a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800421e:	4422      	add	r2, r4
 8004220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004228:	3302      	adds	r3, #2
 800422a:	e7c4      	b.n	80041b6 <_printf_common+0x62>
 800422c:	2301      	movs	r3, #1
 800422e:	4622      	mov	r2, r4
 8004230:	4639      	mov	r1, r7
 8004232:	4630      	mov	r0, r6
 8004234:	47c0      	blx	r8
 8004236:	3001      	adds	r0, #1
 8004238:	d0e6      	beq.n	8004208 <_printf_common+0xb4>
 800423a:	f109 0901 	add.w	r9, r9, #1
 800423e:	e7d7      	b.n	80041f0 <_printf_common+0x9c>

08004240 <_printf_i>:
 8004240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004244:	4617      	mov	r7, r2
 8004246:	7e0a      	ldrb	r2, [r1, #24]
 8004248:	b085      	sub	sp, #20
 800424a:	2a6e      	cmp	r2, #110	; 0x6e
 800424c:	4698      	mov	r8, r3
 800424e:	4606      	mov	r6, r0
 8004250:	460c      	mov	r4, r1
 8004252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004254:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004258:	f000 80bc 	beq.w	80043d4 <_printf_i+0x194>
 800425c:	d81a      	bhi.n	8004294 <_printf_i+0x54>
 800425e:	2a63      	cmp	r2, #99	; 0x63
 8004260:	d02e      	beq.n	80042c0 <_printf_i+0x80>
 8004262:	d80a      	bhi.n	800427a <_printf_i+0x3a>
 8004264:	2a00      	cmp	r2, #0
 8004266:	f000 80c8 	beq.w	80043fa <_printf_i+0x1ba>
 800426a:	2a58      	cmp	r2, #88	; 0x58
 800426c:	f000 808a 	beq.w	8004384 <_printf_i+0x144>
 8004270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004274:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004278:	e02a      	b.n	80042d0 <_printf_i+0x90>
 800427a:	2a64      	cmp	r2, #100	; 0x64
 800427c:	d001      	beq.n	8004282 <_printf_i+0x42>
 800427e:	2a69      	cmp	r2, #105	; 0x69
 8004280:	d1f6      	bne.n	8004270 <_printf_i+0x30>
 8004282:	6821      	ldr	r1, [r4, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f011 0f80 	tst.w	r1, #128	; 0x80
 800428a:	d023      	beq.n	80042d4 <_printf_i+0x94>
 800428c:	1d11      	adds	r1, r2, #4
 800428e:	6019      	str	r1, [r3, #0]
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	e027      	b.n	80042e4 <_printf_i+0xa4>
 8004294:	2a73      	cmp	r2, #115	; 0x73
 8004296:	f000 80b4 	beq.w	8004402 <_printf_i+0x1c2>
 800429a:	d808      	bhi.n	80042ae <_printf_i+0x6e>
 800429c:	2a6f      	cmp	r2, #111	; 0x6f
 800429e:	d02a      	beq.n	80042f6 <_printf_i+0xb6>
 80042a0:	2a70      	cmp	r2, #112	; 0x70
 80042a2:	d1e5      	bne.n	8004270 <_printf_i+0x30>
 80042a4:	680a      	ldr	r2, [r1, #0]
 80042a6:	f042 0220 	orr.w	r2, r2, #32
 80042aa:	600a      	str	r2, [r1, #0]
 80042ac:	e003      	b.n	80042b6 <_printf_i+0x76>
 80042ae:	2a75      	cmp	r2, #117	; 0x75
 80042b0:	d021      	beq.n	80042f6 <_printf_i+0xb6>
 80042b2:	2a78      	cmp	r2, #120	; 0x78
 80042b4:	d1dc      	bne.n	8004270 <_printf_i+0x30>
 80042b6:	2278      	movs	r2, #120	; 0x78
 80042b8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80042bc:	496e      	ldr	r1, [pc, #440]	; (8004478 <_printf_i+0x238>)
 80042be:	e064      	b.n	800438a <_printf_i+0x14a>
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80042c6:	1d11      	adds	r1, r2, #4
 80042c8:	6019      	str	r1, [r3, #0]
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0a3      	b.n	800441c <_printf_i+0x1dc>
 80042d4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80042d8:	f102 0104 	add.w	r1, r2, #4
 80042dc:	6019      	str	r1, [r3, #0]
 80042de:	d0d7      	beq.n	8004290 <_printf_i+0x50>
 80042e0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da03      	bge.n	80042f0 <_printf_i+0xb0>
 80042e8:	222d      	movs	r2, #45	; 0x2d
 80042ea:	425b      	negs	r3, r3
 80042ec:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042f0:	4962      	ldr	r1, [pc, #392]	; (800447c <_printf_i+0x23c>)
 80042f2:	220a      	movs	r2, #10
 80042f4:	e017      	b.n	8004326 <_printf_i+0xe6>
 80042f6:	6820      	ldr	r0, [r4, #0]
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80042fe:	d003      	beq.n	8004308 <_printf_i+0xc8>
 8004300:	1d08      	adds	r0, r1, #4
 8004302:	6018      	str	r0, [r3, #0]
 8004304:	680b      	ldr	r3, [r1, #0]
 8004306:	e006      	b.n	8004316 <_printf_i+0xd6>
 8004308:	f010 0f40 	tst.w	r0, #64	; 0x40
 800430c:	f101 0004 	add.w	r0, r1, #4
 8004310:	6018      	str	r0, [r3, #0]
 8004312:	d0f7      	beq.n	8004304 <_printf_i+0xc4>
 8004314:	880b      	ldrh	r3, [r1, #0]
 8004316:	4959      	ldr	r1, [pc, #356]	; (800447c <_printf_i+0x23c>)
 8004318:	2a6f      	cmp	r2, #111	; 0x6f
 800431a:	bf14      	ite	ne
 800431c:	220a      	movne	r2, #10
 800431e:	2208      	moveq	r2, #8
 8004320:	2000      	movs	r0, #0
 8004322:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004326:	6865      	ldr	r5, [r4, #4]
 8004328:	60a5      	str	r5, [r4, #8]
 800432a:	2d00      	cmp	r5, #0
 800432c:	f2c0 809c 	blt.w	8004468 <_printf_i+0x228>
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	f020 0004 	bic.w	r0, r0, #4
 8004336:	6020      	str	r0, [r4, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d13f      	bne.n	80043bc <_printf_i+0x17c>
 800433c:	2d00      	cmp	r5, #0
 800433e:	f040 8095 	bne.w	800446c <_printf_i+0x22c>
 8004342:	4675      	mov	r5, lr
 8004344:	2a08      	cmp	r2, #8
 8004346:	d10b      	bne.n	8004360 <_printf_i+0x120>
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	07da      	lsls	r2, r3, #31
 800434c:	d508      	bpl.n	8004360 <_printf_i+0x120>
 800434e:	6923      	ldr	r3, [r4, #16]
 8004350:	6862      	ldr	r2, [r4, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	bfde      	ittt	le
 8004356:	2330      	movle	r3, #48	; 0x30
 8004358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800435c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004360:	ebae 0305 	sub.w	r3, lr, r5
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	f8cd 8000 	str.w	r8, [sp]
 800436a:	463b      	mov	r3, r7
 800436c:	aa03      	add	r2, sp, #12
 800436e:	4621      	mov	r1, r4
 8004370:	4630      	mov	r0, r6
 8004372:	f7ff feef 	bl	8004154 <_printf_common>
 8004376:	3001      	adds	r0, #1
 8004378:	d155      	bne.n	8004426 <_printf_i+0x1e6>
 800437a:	f04f 30ff 	mov.w	r0, #4294967295
 800437e:	b005      	add	sp, #20
 8004380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004384:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004388:	493c      	ldr	r1, [pc, #240]	; (800447c <_printf_i+0x23c>)
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004392:	f100 0504 	add.w	r5, r0, #4
 8004396:	601d      	str	r5, [r3, #0]
 8004398:	d001      	beq.n	800439e <_printf_i+0x15e>
 800439a:	6803      	ldr	r3, [r0, #0]
 800439c:	e002      	b.n	80043a4 <_printf_i+0x164>
 800439e:	0655      	lsls	r5, r2, #25
 80043a0:	d5fb      	bpl.n	800439a <_printf_i+0x15a>
 80043a2:	8803      	ldrh	r3, [r0, #0]
 80043a4:	07d0      	lsls	r0, r2, #31
 80043a6:	bf44      	itt	mi
 80043a8:	f042 0220 	orrmi.w	r2, r2, #32
 80043ac:	6022      	strmi	r2, [r4, #0]
 80043ae:	b91b      	cbnz	r3, 80043b8 <_printf_i+0x178>
 80043b0:	6822      	ldr	r2, [r4, #0]
 80043b2:	f022 0220 	bic.w	r2, r2, #32
 80043b6:	6022      	str	r2, [r4, #0]
 80043b8:	2210      	movs	r2, #16
 80043ba:	e7b1      	b.n	8004320 <_printf_i+0xe0>
 80043bc:	4675      	mov	r5, lr
 80043be:	fbb3 f0f2 	udiv	r0, r3, r2
 80043c2:	fb02 3310 	mls	r3, r2, r0, r3
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043cc:	4603      	mov	r3, r0
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d1f5      	bne.n	80043be <_printf_i+0x17e>
 80043d2:	e7b7      	b.n	8004344 <_printf_i+0x104>
 80043d4:	6808      	ldr	r0, [r1, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	6949      	ldr	r1, [r1, #20]
 80043da:	f010 0f80 	tst.w	r0, #128	; 0x80
 80043de:	d004      	beq.n	80043ea <_printf_i+0x1aa>
 80043e0:	1d10      	adds	r0, r2, #4
 80043e2:	6018      	str	r0, [r3, #0]
 80043e4:	6813      	ldr	r3, [r2, #0]
 80043e6:	6019      	str	r1, [r3, #0]
 80043e8:	e007      	b.n	80043fa <_printf_i+0x1ba>
 80043ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043ee:	f102 0004 	add.w	r0, r2, #4
 80043f2:	6018      	str	r0, [r3, #0]
 80043f4:	6813      	ldr	r3, [r2, #0]
 80043f6:	d0f6      	beq.n	80043e6 <_printf_i+0x1a6>
 80043f8:	8019      	strh	r1, [r3, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	4675      	mov	r5, lr
 8004400:	e7b1      	b.n	8004366 <_printf_i+0x126>
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	1d11      	adds	r1, r2, #4
 8004406:	6019      	str	r1, [r3, #0]
 8004408:	6815      	ldr	r5, [r2, #0]
 800440a:	6862      	ldr	r2, [r4, #4]
 800440c:	2100      	movs	r1, #0
 800440e:	4628      	mov	r0, r5
 8004410:	f7fb fede 	bl	80001d0 <memchr>
 8004414:	b108      	cbz	r0, 800441a <_printf_i+0x1da>
 8004416:	1b40      	subs	r0, r0, r5
 8004418:	6060      	str	r0, [r4, #4]
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	6123      	str	r3, [r4, #16]
 800441e:	2300      	movs	r3, #0
 8004420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004424:	e79f      	b.n	8004366 <_printf_i+0x126>
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	462a      	mov	r2, r5
 800442a:	4639      	mov	r1, r7
 800442c:	4630      	mov	r0, r6
 800442e:	47c0      	blx	r8
 8004430:	3001      	adds	r0, #1
 8004432:	d0a2      	beq.n	800437a <_printf_i+0x13a>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	079b      	lsls	r3, r3, #30
 8004438:	d507      	bpl.n	800444a <_printf_i+0x20a>
 800443a:	2500      	movs	r5, #0
 800443c:	f104 0919 	add.w	r9, r4, #25
 8004440:	68e3      	ldr	r3, [r4, #12]
 8004442:	9a03      	ldr	r2, [sp, #12]
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	429d      	cmp	r5, r3
 8004448:	db05      	blt.n	8004456 <_printf_i+0x216>
 800444a:	68e0      	ldr	r0, [r4, #12]
 800444c:	9b03      	ldr	r3, [sp, #12]
 800444e:	4298      	cmp	r0, r3
 8004450:	bfb8      	it	lt
 8004452:	4618      	movlt	r0, r3
 8004454:	e793      	b.n	800437e <_printf_i+0x13e>
 8004456:	2301      	movs	r3, #1
 8004458:	464a      	mov	r2, r9
 800445a:	4639      	mov	r1, r7
 800445c:	4630      	mov	r0, r6
 800445e:	47c0      	blx	r8
 8004460:	3001      	adds	r0, #1
 8004462:	d08a      	beq.n	800437a <_printf_i+0x13a>
 8004464:	3501      	adds	r5, #1
 8004466:	e7eb      	b.n	8004440 <_printf_i+0x200>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1a7      	bne.n	80043bc <_printf_i+0x17c>
 800446c:	780b      	ldrb	r3, [r1, #0]
 800446e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004472:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004476:	e765      	b.n	8004344 <_printf_i+0x104>
 8004478:	080049b2 	.word	0x080049b2
 800447c:	080049a1 	.word	0x080049a1

08004480 <_sbrk_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4c06      	ldr	r4, [pc, #24]	; (800449c <_sbrk_r+0x1c>)
 8004484:	2300      	movs	r3, #0
 8004486:	4605      	mov	r5, r0
 8004488:	4608      	mov	r0, r1
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	f7ff f84a 	bl	8003524 <_sbrk>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_sbrk_r+0x1a>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	b103      	cbz	r3, 800449a <_sbrk_r+0x1a>
 8004498:	602b      	str	r3, [r5, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	20009c3c 	.word	0x20009c3c

080044a0 <__sread>:
 80044a0:	b510      	push	{r4, lr}
 80044a2:	460c      	mov	r4, r1
 80044a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a8:	f000 f896 	bl	80045d8 <_read_r>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	bfab      	itete	ge
 80044b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044b2:	89a3      	ldrhlt	r3, [r4, #12]
 80044b4:	181b      	addge	r3, r3, r0
 80044b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044ba:	bfac      	ite	ge
 80044bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80044be:	81a3      	strhlt	r3, [r4, #12]
 80044c0:	bd10      	pop	{r4, pc}

080044c2 <__swrite>:
 80044c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c6:	461f      	mov	r7, r3
 80044c8:	898b      	ldrh	r3, [r1, #12]
 80044ca:	05db      	lsls	r3, r3, #23
 80044cc:	4605      	mov	r5, r0
 80044ce:	460c      	mov	r4, r1
 80044d0:	4616      	mov	r6, r2
 80044d2:	d505      	bpl.n	80044e0 <__swrite+0x1e>
 80044d4:	2302      	movs	r3, #2
 80044d6:	2200      	movs	r2, #0
 80044d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044dc:	f000 f868 	bl	80045b0 <_lseek_r>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ea:	81a3      	strh	r3, [r4, #12]
 80044ec:	4632      	mov	r2, r6
 80044ee:	463b      	mov	r3, r7
 80044f0:	4628      	mov	r0, r5
 80044f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044f6:	f000 b817 	b.w	8004528 <_write_r>

080044fa <__sseek>:
 80044fa:	b510      	push	{r4, lr}
 80044fc:	460c      	mov	r4, r1
 80044fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004502:	f000 f855 	bl	80045b0 <_lseek_r>
 8004506:	1c43      	adds	r3, r0, #1
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	bf15      	itete	ne
 800450c:	6560      	strne	r0, [r4, #84]	; 0x54
 800450e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004516:	81a3      	strheq	r3, [r4, #12]
 8004518:	bf18      	it	ne
 800451a:	81a3      	strhne	r3, [r4, #12]
 800451c:	bd10      	pop	{r4, pc}

0800451e <__sclose>:
 800451e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004522:	f000 b813 	b.w	800454c <_close_r>
	...

08004528 <_write_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4c07      	ldr	r4, [pc, #28]	; (8004548 <_write_r+0x20>)
 800452c:	4605      	mov	r5, r0
 800452e:	4608      	mov	r0, r1
 8004530:	4611      	mov	r1, r2
 8004532:	2200      	movs	r2, #0
 8004534:	6022      	str	r2, [r4, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	f7fe fe8c 	bl	8003254 <_write>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_write_r+0x1e>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	b103      	cbz	r3, 8004546 <_write_r+0x1e>
 8004544:	602b      	str	r3, [r5, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	20009c3c 	.word	0x20009c3c

0800454c <_close_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4c06      	ldr	r4, [pc, #24]	; (8004568 <_close_r+0x1c>)
 8004550:	2300      	movs	r3, #0
 8004552:	4605      	mov	r5, r0
 8004554:	4608      	mov	r0, r1
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	f7fe fffe 	bl	8003558 <_close>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_close_r+0x1a>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	b103      	cbz	r3, 8004566 <_close_r+0x1a>
 8004564:	602b      	str	r3, [r5, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20009c3c 	.word	0x20009c3c

0800456c <_fstat_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4c07      	ldr	r4, [pc, #28]	; (800458c <_fstat_r+0x20>)
 8004570:	2300      	movs	r3, #0
 8004572:	4605      	mov	r5, r0
 8004574:	4608      	mov	r0, r1
 8004576:	4611      	mov	r1, r2
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	f7fe fff0 	bl	800355e <_fstat>
 800457e:	1c43      	adds	r3, r0, #1
 8004580:	d102      	bne.n	8004588 <_fstat_r+0x1c>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	b103      	cbz	r3, 8004588 <_fstat_r+0x1c>
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	bd38      	pop	{r3, r4, r5, pc}
 800458a:	bf00      	nop
 800458c:	20009c3c 	.word	0x20009c3c

08004590 <_isatty_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4c06      	ldr	r4, [pc, #24]	; (80045ac <_isatty_r+0x1c>)
 8004594:	2300      	movs	r3, #0
 8004596:	4605      	mov	r5, r0
 8004598:	4608      	mov	r0, r1
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	f7fe ffe4 	bl	8003568 <_isatty>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	d102      	bne.n	80045aa <_isatty_r+0x1a>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	b103      	cbz	r3, 80045aa <_isatty_r+0x1a>
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	20009c3c 	.word	0x20009c3c

080045b0 <_lseek_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4c07      	ldr	r4, [pc, #28]	; (80045d0 <_lseek_r+0x20>)
 80045b4:	4605      	mov	r5, r0
 80045b6:	4608      	mov	r0, r1
 80045b8:	4611      	mov	r1, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	6022      	str	r2, [r4, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	f7fe ffd4 	bl	800356c <_lseek>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d102      	bne.n	80045ce <_lseek_r+0x1e>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	b103      	cbz	r3, 80045ce <_lseek_r+0x1e>
 80045cc:	602b      	str	r3, [r5, #0]
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	20009c3c 	.word	0x20009c3c

080045d4 <__malloc_lock>:
 80045d4:	4770      	bx	lr

080045d6 <__malloc_unlock>:
 80045d6:	4770      	bx	lr

080045d8 <_read_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4c07      	ldr	r4, [pc, #28]	; (80045f8 <_read_r+0x20>)
 80045dc:	4605      	mov	r5, r0
 80045de:	4608      	mov	r0, r1
 80045e0:	4611      	mov	r1, r2
 80045e2:	2200      	movs	r2, #0
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f7fe ff8e 	bl	8003508 <_read>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_read_r+0x1e>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_read_r+0x1e>
 80045f4:	602b      	str	r3, [r5, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	20009c3c 	.word	0x20009c3c

080045fc <_init>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr

08004608 <_fini>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr
